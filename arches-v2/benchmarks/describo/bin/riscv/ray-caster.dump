
./bin/riscv/ray-caster:     file format elf64-littleriscv
./bin/riscv/ray-caster
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000000100b0

Program Header:
0x70000003 off    0x0000000000008961 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0
         filesz 0x0000000000000034 memsz 0x0000000000000000 flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000010000 paddr 0x0000000000010000 align 2**12
         filesz 0x0000000000008934 memsz 0x0000000000008934 flags r-x

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         000073a0  00000000000100b0  00000000000100b0  000000b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000040  0000000000017450  0000000000017450  00007450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     00000478  0000000000017490  0000000000017490  00007490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .sdata        0000002c  0000000000018908  0000000000018908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000002d  0000000000000000  0000000000000000  00008934  2**0
                  CONTENTS, READONLY
  5 .riscv.attributes 00000034  0000000000000000  0000000000000000  00008961  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  0000000000000000  0000000000000000  00008995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00019780  0000000000000000  0000000000000000  00008a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000008e2  0000000000000000  0000000000000000  000221d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000137a2  0000000000000000  0000000000000000  00022ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00003d72  0000000000000000  0000000000000000  00036259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000003fc  0000000000000000  0000000000000000  00039fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00014c78  0000000000000000  0000000000000000  0003a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000f25b  0000000000000000  0000000000000000  0004f03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000000100b0 l    d  .text	0000000000000000 .text
0000000000017450 l    d  .rodata	0000000000000000 .rodata
0000000000017490 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000018908 l    d  .sdata	0000000000000000 .sdata
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .debug_loclists	0000000000000000 .debug_loclists
0000000000000000 l    d  .debug_rnglists	0000000000000000 .debug_rnglists
0000000000000000 l    df *ABS*	0000000000000000 ray-caster.cpp
0000000000017450 l     O .rodata	0000000000000040 _ZL15lod_node_offset
0000000000000000 l    df *ABS*	0000000000000000 memcpy.c
0000000000019108 g       *ABS*	0000000000000000 __global_pointer$
0000000000010420  w    F .text	00000000000014cc _Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit
0000000000018908 g       .sdata	0000000000000000 __SDATA_BEGIN__
00000000000172ac g     F .text	00000000000001a4 memcpy
0000000000015100  w    F .text	0000000000000570 _Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit
0000000000016f28  w    F .text	0000000000000384 _Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit
0000000000013878  w    F .text	0000000000001888 _Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit
0000000000013260  w    F .text	0000000000000618 _Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit
0000000000018938 g       .sdata	0000000000000000 __BSS_END__
00000000000118ec  w    F .text	0000000000001974 _Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit
0000000000018934 g       .sdata	0000000000000000 __bss_start
0000000000015670  w    F .text	00000000000014c4 _Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit
00000000000100b0 g     F .text	000000000000022c main
0000000000016b34  w    F .text	00000000000003f4 _Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit
0000000000018908 g       .sdata	0000000000000000 __DATA_BEGIN__
0000000000018934 g       .sdata	0000000000000000 _edata
0000000000018938 g       .sdata	0000000000000000 _end
0000000000010358 g     F .text	00000000000000c8 _Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit
00000000000102dc g     F .text	000000000000007c _Z9intersectRK10GlobalDataRK3RayR3Hit



Disassembly of section .text:

00000000000100b0 <main>:
}

#ifdef ARCH_RISCV
//gcc will only set main as entry point so we'll do this for now but we could theortically use path_tracer as entry
int main()
{
   100b0:	f7010113          	add	sp,sp,-144
   100b4:	08113423          	sd	ra,136(sp)
   100b8:	08813023          	sd	s0,128(sp)
   100bc:	06913c23          	sd	s1,120(sp)
   100c0:	06812627          	fsw	fs0,108(sp)
   100c4:	06912427          	fsw	fs1,104(sp)
   100c8:	07212227          	fsw	fs2,100(sp)
   100cc:	07312027          	fsw	fs3,96(sp)
   100d0:	05412e27          	fsw	fs4,92(sp)

inline uint32_t atomicinc()
{
	#ifdef ARCH_RISCV
	uint32_t value;
	asm volatile("traxamoin %[rd]\n\t" : [rd] "=r" (value));
   100d4:	0000040b          	traxamoin	s0
	for(uint32_t index = atomicinc(); index < global_data.framebuffer_size; index = atomicinc())
   100d8:	04802783          	lw	a5,72(zero) # 48 <main-0x10068>
   100dc:	0004041b          	sext.w	s0,s0
   100e0:	16f47663          	bgeu	s0,a5,1024c <main+0x19c>
	return *this;
}

inline vec2& vec2::operator+=(const vec2 &v)
{
	e[0] += v[0];
   100e4:	000197b7          	lui	a5,0x19
   100e8:	9187aa07          	flw	fs4,-1768(a5) # 18918 <__DATA_BEGIN__+0x10>
	return *this;
}

inline vec2& vec2::operator-=(const vec2 &v)
{
	e[0] -= v[0];
   100ec:	000197b7          	lui	a5,0x19
   100f0:	9287a987          	flw	fs3,-1752(a5) # 18928 <__DATA_BEGIN__+0x20>
		uv *= _recip_res;
		uv -= rtm::vec2(0.5f);

		Ray ray;
		ray.d = (_x * uv.x + _y * uv.y - _z);
		ray.t_min = T_MIN;
   100f4:	000197b7          	lui	a5,0x19
   100f8:	92c7a487          	flw	fs1,-1748(a5) # 1892c <__DATA_BEGIN__+0x24>
		ray.o = _position;
		ray.t_max = T_MAX;
   100fc:	000197b7          	lui	a5,0x19
   10100:	9307a907          	flw	fs2,-1744(a5) # 18930 <__DATA_BEGIN__+0x28>
		ray.rcp_max_error =  4.0f * 0.5f; //1 pixel = 2 radius of error so 1 / 2
   10104:	000197b7          	lui	a5,0x19
   10108:	9107a407          	flw	fs0,-1776(a5) # 18910 <__DATA_BEGIN__+0x8>
	glm::vec3* normals;
};

bool intersect(const GlobalData& global_data, const Ray& ray, Hit& hit)
{
	switch(global_data.config)
   1010c:	00200493          	li	s1,2
		uint32_t x = index % global_data.framebuffer_width;
   10110:	04002783          	lw	a5,64(zero) # 40 <main-0x10070>
}

inline vec2& vec2::operator*=(const vec2 &v)
{
	e[0] *= v.e[0];
	e[1] *= v.e[1];
   10114:	06002287          	flw	ft5,96(zero) # 60 <main-0x10050>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
}

inline vec3 operator*(const vec3 &a, const vec3 &b)
{
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   10118:	08002507          	flw	fa0,128(zero) # 80 <main-0x10030>
		uint32_t y = index / global_data.framebuffer_width;	
   1011c:	02f456bb          	divuw	a3,s0,a5
   10120:	08402587          	flw	fa1,132(zero) # 84 <main-0x1002c>
   10124:	07c02707          	flw	fa4,124(zero) # 7c <main-0x10034>
	e[0] -= v[0];
   10128:	05c02207          	flw	ft4,92(zero) # 5c <main-0x10054>
	inline float operator[](int i) const { return e[i]; }
   1012c:	07402687          	flw	fa3,116(zero) # 74 <main-0x1003c>
   10130:	07802187          	flw	ft3,120(zero) # 78 <main-0x10038>
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   10134:	07002607          	flw	fa2,112(zero) # 70 <main-0x10040>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10138:	08c02087          	flw	ft1,140(zero) # 8c <main-0x10024>
   1013c:	09002007          	flw	ft0,144(zero) # 90 <main-0x10020>
   10140:	08802107          	flw	ft2,136(zero) # 88 <main-0x10028>
   10144:	09802703          	lw	a4,152(zero) # 98 <main-0x10018>
		ray.t_min = T_MIN;
   10148:	02912627          	fsw	fs1,44(sp)
		uint32_t x = index % global_data.framebuffer_width;
   1014c:	02f477bb          	remuw	a5,s0,a5
		rtm::vec2 uv((float)i, (float)j);
   10150:	d016f7d3          	fcvt.s.wu	fa5,a3
	e[1] += v[1];
   10154:	0147f7d3          	fadd.s	fa5,fa5,fs4
	e[1] -= v[1];
   10158:	9857f7c3          	fmadd.s	fa5,fa5,ft5,fs3
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1015c:	10e7f753          	fmul.s	fa4,fa5,fa4
   10160:	10a7f553          	fmul.s	fa0,fa5,fa0
   10164:	10b7f5d3          	fmul.s	fa1,fa5,fa1
   10168:	d017f7d3          	fcvt.s.wu	fa5,a5
	e[0] += v[0];
   1016c:	0147f7d3          	fadd.s	fa5,fa5,fs4
	e[0] -= v[0];
   10170:	9847f7c3          	fmadd.s	fa5,fa5,ft4,fs3
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   10174:	70c7f643          	fmadd.s	fa2,fa5,fa2,fa4
   10178:	50d7f743          	fmadd.s	fa4,fa5,fa3,fa0
   1017c:	5837f7c3          	fmadd.s	fa5,fa5,ft3,fa1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10180:	082676d3          	fsub.s	fa3,fa2,ft2
   10184:	08177753          	fsub.s	fa4,fa4,ft1
   10188:	0807f7d3          	fsub.s	fa5,fa5,ft0
	e[0] = v[0];
   1018c:	02d12827          	fsw	fa3,48(sp)
	e[1] = v[1];
   10190:	02e12a27          	fsw	fa4,52(sp)
	e[2] = v[2];
   10194:	02f12c27          	fsw	fa5,56(sp)
	e[0] = v[0];
   10198:	06402787          	flw	fa5,100(zero) # 64 <main-0x1004c>
   1019c:	02f12027          	fsw	fa5,32(sp)
	e[1] = v[1];
   101a0:	06802787          	flw	fa5,104(zero) # 68 <main-0x10048>
   101a4:	02f12227          	fsw	fa5,36(sp)
	e[2] = v[2];
   101a8:	06c02787          	flw	fa5,108(zero) # 6c <main-0x10044>
		ray.t_max = T_MAX;
   101ac:	03212e27          	fsw	fs2,60(sp)

		ray.radius = 0.0f;
   101b0:	04012223          	sw	zero,68(sp)
   101b4:	02f12427          	fsw	fa5,40(sp)
		ray.drdt = _drdt;
   101b8:	05802787          	flw	fa5,88(zero) # 58 <main-0x10058>
		Hit hit; hit.t = ray.t_max;
   101bc:	01212427          	fsw	fs2,8(sp)
		ray.rcp_max_error =  4.0f * 0.5f; //1 pixel = 2 radius of error so 1 / 2
   101c0:	04812427          	fsw	fs0,72(sp)
   101c4:	04f12027          	fsw	fa5,64(sp)
   101c8:	0c970e63          	beq	a4,s1,102a4 <main+0x1f4>
   101cc:	0ae4e663          	bltu	s1,a4,10278 <main+0x1c8>
   101d0:	0e070863          	beqz	a4,102c0 <main+0x210>
	{
		case 0: return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
		case 1: return intersect(global_data.cblas, global_data.tt4, ray, hit); //TTC
   101d4:	0a003503          	ld	a0,160(zero) # a0 <main-0x10010>
   101d8:	00810693          	add	a3,sp,8
   101dc:	02010613          	add	a2,sp,32
   101e0:	0a800593          	li	a1,168
   101e4:	00003097          	auipc	ra,0x3
   101e8:	694080e7          	jalr	1684(ra) # 13878 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>
		if(intersect(global_data, ray, hit)) 
   101ec:	0a050863          	beqz	a0,1029c <main+0x1ec>
	}

	//Robert Jenkins' one a time hash funcion for size 1 https://en.wikipedia.org/wiki/Jenkins_hash_function
	static uint32_t fast_hash(uint32_t u)
	{
		u += u << 10;
   101f0:	01412703          	lw	a4,20(sp)
   101f4:	00a7179b          	sllw	a5,a4,0xa
   101f8:	00e787bb          	addw	a5,a5,a4
		u ^= u >> 6;
   101fc:	0067d71b          	srlw	a4,a5,0x6
   10200:	00f74733          	xor	a4,a4,a5
   10204:	0037179b          	sllw	a5,a4,0x3
   10208:	00e787bb          	addw	a5,a5,a4
		u += u << 3;
		u ^= u >> 11;
   1020c:	00b7d71b          	srlw	a4,a5,0xb
   10210:	00f74733          	xor	a4,a4,a5
			out = RNG::fast_hash(hit.id) | 0xff000000;
   10214:	00f7179b          	sllw	a5,a4,0xf
   10218:	00e787bb          	addw	a5,a5,a4
   1021c:	ff000737          	lui	a4,0xff000
   10220:	00e7e7b3          	or	a5,a5,a4
   10224:	0007879b          	sext.w	a5,a5
		global_data.framebuffer[index] = out;
   10228:	02041713          	sll	a4,s0,0x20
   1022c:	01e75413          	srl	s0,a4,0x1e
   10230:	05003703          	ld	a4,80(zero) # 50 <main-0x10060>
   10234:	00870433          	add	s0,a4,s0
   10238:	00f42023          	sw	a5,0(s0)
   1023c:	0000040b          	traxamoin	s0
	for(uint32_t index = atomicinc(); index < global_data.framebuffer_size; index = atomicinc())
   10240:	04802783          	lw	a5,72(zero) # 48 <main-0x10068>
   10244:	0004041b          	sext.w	s0,s0
   10248:	ecf464e3          	bltu	s0,a5,10110 <main+0x60>
	ray_caster(*(GlobalData*)GLOBAL_DATA_ADDRESS);
	return 0;
}
   1024c:	08813083          	ld	ra,136(sp)
   10250:	08013403          	ld	s0,128(sp)
   10254:	07813483          	ld	s1,120(sp)
   10258:	06c12407          	flw	fs0,108(sp)
   1025c:	06812487          	flw	fs1,104(sp)
   10260:	06412907          	flw	fs2,100(sp)
   10264:	06012987          	flw	fs3,96(sp)
   10268:	05c12a07          	flw	fs4,92(sp)
   1026c:	00000513          	li	a0,0
   10270:	09010113          	add	sp,sp,144
   10274:	00008067          	ret
	switch(global_data.config)
   10278:	00300793          	li	a5,3
   1027c:	02f71063          	bne	a4,a5,1029c <main+0x1ec>
		case 2: return intersect(global_data.blas, global_data.mesh, ray, hit); //BVH
		case 3: return intersect(global_data.blas, global_data.tt1, ray, hit); //TT
   10280:	0a003503          	ld	a0,160(zero) # a0 <main-0x10010>
   10284:	00810693          	add	a3,sp,8
   10288:	02010613          	add	a2,sp,32
   1028c:	0a800593          	li	a1,168
   10290:	00005097          	auipc	ra,0x5
   10294:	3e0080e7          	jalr	992(ra) # 15670 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>
		if(intersect(global_data, ray, hit)) 
   10298:	f4051ce3          	bnez	a0,101f0 <main+0x140>
		uint32_t out = 0xffffffff;
   1029c:	fff00793          	li	a5,-1
   102a0:	f89ff06f          	j	10228 <main+0x178>
		case 2: return intersect(global_data.blas, global_data.mesh, ray, hit); //BVH
   102a4:	0a003503          	ld	a0,160(zero) # a0 <main-0x10010>
   102a8:	00810693          	add	a3,sp,8
   102ac:	02010613          	add	a2,sp,32
   102b0:	0a800593          	li	a1,168
   102b4:	00005097          	auipc	ra,0x5
   102b8:	e4c080e7          	jalr	-436(ra) # 15100 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>
   102bc:	f31ff06f          	j	101ec <main+0x13c>
		case 0: return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
   102c0:	0a003503          	ld	a0,160(zero) # a0 <main-0x10010>
   102c4:	00810693          	add	a3,sp,8
   102c8:	02010613          	add	a2,sp,32
   102cc:	0a800593          	li	a1,168
   102d0:	00003097          	auipc	ra,0x3
   102d4:	f90080e7          	jalr	-112(ra) # 13260 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>
   102d8:	f15ff06f          	j	101ec <main+0x13c>

00000000000102dc <_Z9intersectRK10GlobalDataRK3RayR3Hit>:
	switch(global_data.config)
   102dc:	05852703          	lw	a4,88(a0)
{
   102e0:	00050793          	mv	a5,a0
	switch(global_data.config)
   102e4:	00200513          	li	a0,2
{
   102e8:	00060693          	mv	a3,a2
	switch(global_data.config)
   102ec:	02a70e63          	beq	a4,a0,10328 <_Z9intersectRK10GlobalDataRK3RayR3Hit+0x4c>
   102f0:	00e56e63          	bltu	a0,a4,1030c <_Z9intersectRK10GlobalDataRK3RayR3Hit+0x30>
   102f4:	04070863          	beqz	a4,10344 <_Z9intersectRK10GlobalDataRK3RayR3Hit+0x68>
		case 1: return intersect(global_data.cblas, global_data.tt4, ray, hit); //TTC
   102f8:	0607b503          	ld	a0,96(a5)
   102fc:	00058613          	mv	a2,a1
   10300:	06878593          	add	a1,a5,104
   10304:	00003317          	auipc	t1,0x3
   10308:	57430067          	jr	1396(t1) # 13878 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>
	switch(global_data.config)
   1030c:	00300613          	li	a2,3
   10310:	02c71663          	bne	a4,a2,1033c <_Z9intersectRK10GlobalDataRK3RayR3Hit+0x60>
		case 3: return intersect(global_data.blas, global_data.tt1, ray, hit); //TT
   10314:	0607b503          	ld	a0,96(a5)
   10318:	00058613          	mv	a2,a1
   1031c:	06878593          	add	a1,a5,104
   10320:	00005317          	auipc	t1,0x5
   10324:	35030067          	jr	848(t1) # 15670 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>
		case 2: return intersect(global_data.blas, global_data.mesh, ray, hit); //BVH
   10328:	0607b503          	ld	a0,96(a5)
   1032c:	00058613          	mv	a2,a1
   10330:	06878593          	add	a1,a5,104
   10334:	00005317          	auipc	t1,0x5
   10338:	dcc30067          	jr	-564(t1) # 15100 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>
	}
	return false;
}
   1033c:	00000513          	li	a0,0
   10340:	00008067          	ret
		case 0: return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
   10344:	0607b503          	ld	a0,96(a5)
   10348:	00058613          	mv	a2,a1
   1034c:	06878593          	add	a1,a5,104
   10350:	00003317          	auipc	t1,0x3
   10354:	f1030067          	jr	-240(t1) # 13260 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>

0000000000010358 <_Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit>:

bool intersect(const GlobalData& global_data, uint last_patch_index, const Ray& last_ray, Ray& ray, Hit& hit)
{
   10358:	00050793          	mv	a5,a0
	switch(global_data.config)
   1035c:	05852503          	lw	a0,88(a0)
   10360:	00200313          	li	t1,2
{
   10364:	00060893          	mv	a7,a2
   10368:	00068613          	mv	a2,a3
   1036c:	00070693          	mv	a3,a4
	switch(global_data.config)
   10370:	08650463          	beq	a0,t1,103f8 <_Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit+0xa0>
{
   10374:	fd010113          	add	sp,sp,-48
   10378:	02113423          	sd	ra,40(sp)
   1037c:	00058813          	mv	a6,a1
	switch(global_data.config)
   10380:	02a36a63          	bltu	t1,a0,103b4 <_Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit+0x5c>
   10384:	08050263          	beqz	a0,10408 <_Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit+0xb0>
			return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
		case 1: 
		{

			TesselationTree4SecondaryRayData data4(global_data.tt4, last_patch_index, last_ray);
			return intersect(global_data.cblas, data4, ray, hit); //TTC
   10388:	0607b503          	ld	a0,96(a5)
   1038c:	00810593          	add	a1,sp,8
			TesselationTree4SecondaryRayData data4(global_data.tt4, last_patch_index, last_ray);
   10390:	06878793          	add	a5,a5,104
struct TesselationTree4SecondaryRayData
{
	const TesselationTree4Pointers& tes_tree;
	const Ray& last_ray;
	uint last_patch_index;
	TesselationTree4SecondaryRayData(const TesselationTree4Pointers& tes_tree, uint last_patch_index, const Ray& last_ray) : tes_tree(tes_tree), last_ray(last_ray), last_patch_index(last_patch_index) {}
   10394:	00f13423          	sd	a5,8(sp)
   10398:	01113823          	sd	a7,16(sp)
   1039c:	01012c23          	sw	a6,24(sp)
			return intersect(global_data.cblas, data4, ray, hit); //TTC
   103a0:	00006097          	auipc	ra,0x6
   103a4:	794080e7          	jalr	1940(ra) # 16b34 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>
			TesselationTree1SecondaryRayData data1(global_data.tt1, last_patch_index, last_ray);
 			return intersect(global_data.blas, data1, ray, hit); //TT
		}
	}
	return false;
}
   103a8:	02813083          	ld	ra,40(sp)
   103ac:	03010113          	add	sp,sp,48
   103b0:	00008067          	ret
	switch(global_data.config)
   103b4:	00300713          	li	a4,3
   103b8:	02e51863          	bne	a0,a4,103e8 <_Z9intersectRK10GlobalDatajRK3RayRS2_R3Hit+0x90>
 			return intersect(global_data.blas, data1, ray, hit); //TT
   103bc:	0607b503          	ld	a0,96(a5)
   103c0:	00810593          	add	a1,sp,8
			TesselationTree1SecondaryRayData data1(global_data.tt1, last_patch_index, last_ray);
   103c4:	06878793          	add	a5,a5,104
struct TesselationTree1SecondaryRayData
{
	const TesselationTree1Pointers& tes_tree;
	const Ray& last_ray;
	uint last_patch_index;
	TesselationTree1SecondaryRayData(const TesselationTree1Pointers& tes_tree, uint last_patch_index, const Ray& last_ray) : tes_tree(tes_tree), last_ray(last_ray), last_patch_index(last_patch_index) {}
   103c8:	00f13423          	sd	a5,8(sp)
   103cc:	01113823          	sd	a7,16(sp)
   103d0:	01012c23          	sw	a6,24(sp)
 			return intersect(global_data.blas, data1, ray, hit); //TT
   103d4:	00007097          	auipc	ra,0x7
   103d8:	b54080e7          	jalr	-1196(ra) # 16f28 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit>
}
   103dc:	02813083          	ld	ra,40(sp)
   103e0:	03010113          	add	sp,sp,48
   103e4:	00008067          	ret
   103e8:	02813083          	ld	ra,40(sp)
	switch(global_data.config)
   103ec:	00000513          	li	a0,0
}
   103f0:	03010113          	add	sp,sp,48
   103f4:	00008067          	ret
			return intersect(global_data.blas, global_data.mesh, ray, hit); //BVH
   103f8:	0607b503          	ld	a0,96(a5)
   103fc:	06878593          	add	a1,a5,104
   10400:	00005317          	auipc	t1,0x5
   10404:	d0030067          	jr	-768(t1) # 15100 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>
}
   10408:	02813083          	ld	ra,40(sp)
			return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
   1040c:	0607b503          	ld	a0,96(a5)
   10410:	06878593          	add	a1,a5,104
}
   10414:	03010113          	add	sp,sp,48
			return intersect(global_data.cblas, global_data.mesh, ray, hit); //BVHC
   10418:	00003317          	auipc	t1,0x3
   1041c:	e4830067          	jr	-440(t1) # 13260 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>

0000000000010420 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit>:
   10420:	ad010113          	add	sp,sp,-1328
   10424:	4da13823          	sd	s10,1232(sp)
   10428:	0005bd03          	ld	s10,0(a1)
   1042c:	51213823          	sd	s2,1296(sp)
   10430:	47f10793          	add	a5,sp,1151
   10434:	000d3903          	ld	s2,0(s10)
   10438:	fe07f713          	and	a4,a5,-32
		bool child_transformed;
	}
	tri_stack[8];

	TesselationTree1::Header header;
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   1043c:	02051793          	sll	a5,a0,0x20
{
   10440:	4db13423          	sd	s11,1224(sp)
   10444:	00058d93          	mv	s11,a1
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   10448:	01b7d593          	srl	a1,a5,0x1b
{
   1044c:	52813023          	sd	s0,1312(sp)
   10450:	51413023          	sd	s4,1280(sp)
   10454:	00060413          	mv	s0,a2
   10458:	00050a13          	mv	s4,a0
inline void move_to_stack(T& dst, const T& src)
{
	for(uint i = 0; i < sizeof(T) / sizeof(uint64_t); ++i)
	{
		uint64_t r = ((uint64_t*)&src)[i];
		((uint64_t*)&dst)[i] = r;
   1045c:	02000613          	li	a2,32
   10460:	00070513          	mv	a0,a4
   10464:	00b905b3          	add	a1,s2,a1
   10468:	50913c23          	sd	s1,1304(sp)
   1046c:	4f813023          	sd	s8,1248(sp)
   10470:	4b312827          	fsw	fs3,1200(sp)
   10474:	4b412627          	fsw	fs4,1196(sp)
   10478:	4b512427          	fsw	fs5,1192(sp)
   1047c:	4b712027          	fsw	fs7,1184(sp)
   10480:	49812e27          	fsw	fs8,1180(sp)
   10484:	49b12827          	fsw	fs11,1168(sp)
   10488:	52113423          	sd	ra,1320(sp)
   1048c:	51313423          	sd	s3,1288(sp)
   10490:	4f513c23          	sd	s5,1272(sp)
   10494:	4f613823          	sd	s6,1264(sp)
   10498:	4f713423          	sd	s7,1256(sp)
   1049c:	4d913c23          	sd	s9,1240(sp)
   104a0:	4a812e27          	fsw	fs0,1212(sp)
   104a4:	4a912c27          	fsw	fs1,1208(sp)
   104a8:	4b212a27          	fsw	fs2,1204(sp)
   104ac:	4b612227          	fsw	fs6,1188(sp)
   104b0:	49912c27          	fsw	fs9,1176(sp)
   104b4:	49a12a27          	fsw	fs10,1172(sp)
   104b8:	00068493          	mv	s1,a3
}

inline vec3 operator/(const vec3 &a, const vec3 &b)
{
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   104bc:	00019c37          	lui	s8,0x19
   104c0:	00007097          	auipc	ra,0x7
   104c4:	dec080e7          	jalr	-532(ra) # 172ac <memcpy>
   104c8:	908c2087          	flw	ft1,-1784(s8) # 18908 <__DATA_BEGIN__>
	inline float operator[](int i) const { return e[i]; }
   104cc:	01042c07          	flw	fs8,16(s0)
   104d0:	01442987          	flw	fs3,20(s0)

	glm::vec3 inv_d = glm::vec3(1.0f) / ray.d;
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
	const TesselationTree1::Node* nodes = &data.tes_tree.nodes[header.root_node_offset];
   104d4:	01456783          	lwu	a5,20(a0)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   104d8:	1980f153          	fdiv.s	ft2,ft1,fs8
   104dc:	00050713          	mv	a4,a0
   104e0:	008d3503          	ld	a0,8(s10)
   104e4:	06f13423          	sd	a5,104(sp)
   104e8:	00579793          	sll	a5,a5,0x5
   104ec:	00f50533          	add	a0,a0,a5
	inline float operator[](int i) const { return e[i]; }
   104f0:	00042b87          	flw	fs7,0(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   104f4:	00052787          	flw	fa5,0(a0)
   104f8:	00c52007          	flw	ft0,12(a0)
	inline float operator[](int i) const { return e[i]; }
   104fc:	01842d87          	flw	fs11,24(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10500:	0977f7d3          	fsub.s	fa5,fa5,fs7
   10504:	09707053          	fsub.s	ft0,ft0,fs7
	inline float operator[](int i) const { return e[i]; }
   10508:	00442a07          	flw	fs4,4(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1050c:	00452707          	flw	fa4,4(a0)
   10510:	01052507          	flw	fa0,16(a0)
	inline float operator[](int i) const { return e[i]; }
   10514:	00842a87          	flw	fs5,8(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10518:	09477753          	fsub.s	fa4,fa4,fs4
   1051c:	09457553          	fsub.s	fa0,fa0,fs4
   10520:	00852687          	flw	fa3,8(a0)
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   10524:	00c72287          	flw	ft5,12(a4) # ffffffffff00000c <__global_pointer$+0xfffffffffefe6f04>
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   10528:	1930f353          	fdiv.s	ft6,ft1,fs3
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1052c:	10207053          	fmul.s	ft0,ft0,ft2
   10530:	1027f7d3          	fmul.s	fa5,fa5,ft2
   10534:	02842207          	flw	ft4,40(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10538:	0956f653          	fsub.s	fa2,fa3,fs5
   1053c:	01452587          	flw	fa1,20(a0)
   10540:	00c42187          	flw	ft3,12(s0)
   10544:	280786d3          	fmin.s	fa3,fa5,ft0
	rtm::vec3 tmaxv = rtm::max(t0, t1);

	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
	float tmax = std::min(std::min(tmaxv.x, tmaxv.y), std::min(tmaxv.z, ray.t_max));

	if (tmin > tmax) return ray.t_max;//no hit || behind
   10548:	280797d3          	fmax.s	fa5,fa5,ft0
   1054c:	1042f053          	fmul.s	ft0,ft5,ft4
   10550:	0955f5d3          	fsub.s	fa1,fa1,fs5
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   10554:	08212e27          	fsw	ft2,156(sp)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   10558:	01c42107          	flw	ft2,28(s0)
	const CompactTri* triangles = &data.tes_tree.triangles[header.root_node_offset];
   1055c:	018d3783          	ld	a5,24(s10)
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   10560:	04012627          	fsw	ft0,76(sp)
	const CompactTri* triangles = &data.tes_tree.triangles[header.root_node_offset];
   10564:	06f13823          	sd	a5,112(sp)
   10568:	19b0f0d3          	fdiv.s	ft1,ft1,fs11
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1056c:	10677753          	fmul.s	fa4,fa4,ft6
   10570:	10657553          	fmul.s	fa0,fa0,ft6
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   10574:	08612c27          	fsw	ft6,152(sp)
	inline float operator[](int i) const { return e[i]; }
   10578:	28a70053          	fmin.s	ft0,fa4,fa0
   1057c:	28a71753          	fmax.s	fa4,fa4,fa0
   10580:	280696d3          	fmax.s	fa3,fa3,ft0
   10584:	28e787d3          	fmin.s	fa5,fa5,fa4
   10588:	28369753          	fmax.s	fa4,fa3,ft3
   1058c:	282787d3          	fmin.s	fa5,fa5,ft2
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   10590:	101676d3          	fmul.s	fa3,fa2,ft1
   10594:	1015f653          	fmul.s	fa2,fa1,ft1
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   10598:	08112a27          	fsw	ft1,148(sp)
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   1059c:	28c685d3          	fmin.s	fa1,fa3,fa2
	if (tmin > tmax) return ray.t_max;//no hit || behind
   105a0:	28c696d3          	fmax.s	fa3,fa3,fa2
   105a4:	28b71753          	fmax.s	fa4,fa4,fa1
   105a8:	28d787d3          	fmin.s	fa5,fa5,fa3
   105ac:	a0e797d3          	flt.s	a5,fa5,fa4
   105b0:	00079463          	bnez	a5,105b8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x198>
	return tmin;
   105b4:	20e70153          	fmv.s	ft2,fa4

	uint32_t node_stack_size = 1u;
	node_stack[0].t = intersect(nodes[0].aabb, ray, inv_d);
	node_stack[0].dbs = nodes[0].dbs;
   105b8:	01852783          	lw	a5,24(a0)
	node_stack[0].node_index = 0;
	node_stack[0].lod = 0;
	node_stack[0].tri_type = 0;

	glm::uvec3 previous_patch_indices(0);
	if(data.last_patch_index != ~0) previous_patch_indices  = data.tes_tree.headers[data.last_patch_index].vi;
   105bc:	010daf83          	lw	t6,16(s11)
	node_stack[0].t = intersect(nodes[0].aabb, ray, inv_d);
   105c0:	0e212027          	fsw	ft2,224(sp)
	node_stack[0].dbs = nodes[0].dbs;
   105c4:	0ef12423          	sw	a5,232(sp)
	node_stack[0].node_index = 0;
   105c8:	0e012223          	sw	zero,228(sp)
	if(data.last_patch_index != ~0) previous_patch_indices  = data.tes_tree.headers[data.last_patch_index].vi;
   105cc:	fff00793          	li	a5,-1
   105d0:	00ff9463          	bne	t6,a5,105d8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1b8>
   105d4:	20c0106f          	j	117e0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13c0>
   105d8:	020f9693          	sll	a3,t6,0x20
   105dc:	01b6d793          	srl	a5,a3,0x1b
   105e0:	00f907b3          	add	a5,s2,a5
   105e4:	0007a683          	lw	a3,0(a5)
   105e8:	04d13c23          	sd	a3,88(sp)
   105ec:	0047a683          	lw	a3,4(a5)
   105f0:	0087a783          	lw	a5,8(a5)
   105f4:	08d13423          	sd	a3,136(sp)
   105f8:	06f13c23          	sd	a5,120(sp)
		uint32_t lod = current_node_entry.lod;
		uint32_t tri_type = current_node_entry.tri_type;

		if(lod == 0)
		{
			tri_stack[lod].tri = Triangle(data.tes_tree.vertices[header.vi[0]], data.tes_tree.vertices[header.vi[1]], data.tes_tree.vertices[header.vi[2]]);
   105fc:	00872c83          	lw	s9,8(a4)
   10600:	00472783          	lw	a5,4(a4)
   10604:	00072e83          	lw	t4,0(a4)
   10608:	020c9813          	sll	a6,s9,0x20
   1060c:	02085813          	srl	a6,a6,0x20
   10610:	02079893          	sll	a7,a5,0x20
   10614:	0af13c23          	sd	a5,184(sp)
   10618:	00181793          	sll	a5,a6,0x1
   1061c:	010787b3          	add	a5,a5,a6
   10620:	020e9313          	sll	t1,t4,0x20
inline uint find_shared_edge(const glm::uvec3& crnt_ptch_inds, const glm::uvec3& prev_ptch_inds)
{
	uint32_t match_mask = 0;
	for(uint i = 0; i < 3; ++i)
		for(uint j = 0; j < 3; ++j)
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   10624:	07813803          	ld	a6,120(sp)
   10628:	0208d893          	srl	a7,a7,0x20
   1062c:	02035313          	srl	t1,t1,0x20
	e[0] *= v[0];
   10630:	00019e37          	lui	t3,0x19
   10634:	90ce2787          	flw	fa5,-1780(t3) # 1890c <__DATA_BEGIN__+0x4>
   10638:	00189693          	sll	a3,a7,0x1

		//if the next LOD is the leaf intersect othewise push the child nodes onto the stack
		uint32_t next_level = lod + 1;
		uint32_t first_child_index = node_index << 2; //compute first child idnex
		
		if(next_level == header.last_lod) //leaf node
   1063c:	01072603          	lw	a2,16(a4)
			tri_stack[lod].tri = Triangle(data.tes_tree.vertices[header.vi[0]], data.tes_tree.vertices[header.vi[1]], data.tes_tree.vertices[header.vi[2]]);
   10640:	00131593          	sll	a1,t1,0x1
   10644:	011686b3          	add	a3,a3,a7
   10648:	410e8833          	sub	a6,t4,a6
   1064c:	00279793          	sll	a5,a5,0x2
   10650:	006585b3          	add	a1,a1,t1
		if(next_level == header.last_lod) //leaf node
   10654:	01812627          	fsw	fs8,12(sp)
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   10658:	908c2d07          	flw	fs10,-1784(s8)
   1065c:	217b8c53          	fmv.s	fs8,fs7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10660:	00019e37          	lui	t3,0x19
			tri_stack[lod].tri = Triangle(data.tes_tree.vertices[header.vi[0]], data.tes_tree.vertices[header.vi[1]], data.tes_tree.vertices[header.vi[2]]);
   10664:	00259593          	sll	a1,a1,0x2
   10668:	00269693          	sll	a3,a3,0x2
   1066c:	0af13823          	sd	a5,176(sp)
   10670:	00183793          	seqz	a5,a6
   10674:	918e2c87          	flw	fs9,-1768(t3) # 18918 <__DATA_BEGIN__+0x10>
   10678:	09d13023          	sd	t4,128(sp)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1067c:	00019bb7          	lui	s7,0x19
   10680:	00019b37          	lui	s6,0x19
	e[0] *= v[0];
   10684:	08f12827          	fsw	fa5,144(sp)
   10688:	0ab13023          	sd	a1,160(sp)
   1068c:	0ad13423          	sd	a3,168(sp)
   10690:	0cf13023          	sd	a5,192(sp)
		if(next_level == header.last_lod) //leaf node
   10694:	fff00893          	li	a7,-1
   10698:	00100e13          	li	t3,1
   1069c:	000c8813          	mv	a6,s9
   106a0:	01312427          	fsw	fs3,8(sp)
   106a4:	0ce13423          	sd	a4,200(sp)
   106a8:	05b13823          	sd	s11,80(sp)
   106ac:	04c13023          	sd	a2,64(sp)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   106b0:	fffe031b          	addw	t1,t3,-1
   106b4:	02031793          	sll	a5,t1,0x20
   106b8:	0207d793          	srl	a5,a5,0x20
   106bc:	00179713          	sll	a4,a5,0x1
   106c0:	00f70733          	add	a4,a4,a5
   106c4:	00271713          	sll	a4,a4,0x2
   106c8:	3c070793          	add	a5,a4,960
   106cc:	0d010713          	add	a4,sp,208
   106d0:	00e78733          	add	a4,a5,a4
   106d4:	c5072783          	lw	a5,-944(a4)
		if(current_node_entry.t >= hit.t) continue;
   106d8:	0004ab07          	flw	fs6,0(s1)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   106dc:	c5472583          	lw	a1,-940(a4)
		if(current_node_entry.t >= hit.t) continue;
   106e0:	f00787d3          	fmv.w.x	fa5,a5
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   106e4:	c5872683          	lw	a3,-936(a4)
   106e8:	0cf12823          	sw	a5,208(sp)
		if(current_node_entry.t >= hit.t) continue;
   106ec:	a0fb0753          	fle.s	a4,fs6,fa5
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   106f0:	0cb12a23          	sw	a1,212(sp)
   106f4:	0cd12c23          	sw	a3,216(sp)
		if(current_node_entry.t >= hit.t) continue;
   106f8:	340710e3          	bnez	a4,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
		uint32_t node_index = current_node_entry.node_index;
   106fc:	0d013683          	ld	a3,208(sp)
   10700:	04c00593          	li	a1,76

#include "rtm.hpp"
#include "aabb.hpp"
#include "ray.hpp"

class Triangle
   10704:	20010713          	add	a4,sp,512
		uint32_t lod = current_node_entry.lod;
   10708:	03a6de93          	srl	t4,a3,0x3a
   1070c:	00fef293          	and	t0,t4,15
   10710:	02b282b3          	mul	t0,t0,a1
		uint32_t node_index = current_node_entry.node_index;
   10714:	00669f13          	sll	t5,a3,0x6
		uint32_t lod = current_node_entry.lod;
   10718:	00fefe93          	and	t4,t4,15
		uint32_t dbs = current_node_entry.dbs;
   1071c:	0d812783          	lw	a5,216(sp)
		uint32_t node_index = current_node_entry.node_index;
   10720:	026f5f13          	srl	t5,t5,0x26
		uint32_t tri_type = current_node_entry.tri_type;
   10724:	03e6d693          	srl	a3,a3,0x3e
   10728:	00570733          	add	a4,a4,t0
		if(lod == 0)
   1072c:	580e9ce3          	bnez	t4,114c4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x10a4>
			tri_stack[lod].tri = Triangle(data.tes_tree.vertices[header.vi[0]], data.tes_tree.vertices[header.vi[1]], data.tes_tree.vertices[header.vi[2]]);
   10730:	010d3683          	ld	a3,16(s10)
   10734:	0a013603          	ld	a2,160(sp)
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(header.vi, previous_patch_indices);
   10738:	fff00913          	li	s2,-1
			tri_stack[lod].tri = Triangle(data.tes_tree.vertices[header.vi[0]], data.tes_tree.vertices[header.vi[1]], data.tes_tree.vertices[header.vi[2]]);
   1073c:	00c685b3          	add	a1,a3,a2
   10740:	0a813603          	ld	a2,168(sp)
	inline float operator[](int i) const { return e[i]; }
   10744:	0045a107          	flw	ft2,4(a1)
   10748:	0085a087          	flw	ft1,8(a1)
   1074c:	00c683b3          	add	t2,a3,a2
   10750:	0b013603          	ld	a2,176(sp)
   10754:	0003a507          	flw	fa0,0(t2)
   10758:	0043a587          	flw	fa1,4(t2)
   1075c:	00c686b3          	add	a3,a3,a2
   10760:	0083a607          	flw	fa2,8(t2)
   10764:	0006a687          	flw	fa3,0(a3)
   10768:	0046a707          	flw	fa4,4(a3)
   1076c:	0086a787          	flw	fa5,8(a3)
	e[0] = v[0];
   10770:	0005a007          	flw	ft0,0(a1)
	e[1] = v[1];
   10774:	20212227          	fsw	ft2,516(sp)
	e[2] = v[2];
   10778:	20112427          	fsw	ft1,520(sp)
	e[0] = v[0];
   1077c:	20012027          	fsw	ft0,512(sp)
   10780:	20a12627          	fsw	fa0,524(sp)
	e[1] = v[1];
   10784:	20b12827          	fsw	fa1,528(sp)
	e[2] = v[2];
   10788:	20c12a27          	fsw	fa2,532(sp)
	e[0] = v[0];
   1078c:	20d12c27          	fsw	fa3,536(sp)
	e[1] = v[1];
   10790:	20e12e27          	fsw	fa4,540(sp)
	e[2] = v[2];
   10794:	22f12027          	fsw	fa5,544(sp)
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(header.vi, previous_patch_indices);
   10798:	732f88e3          	beq	t6,s2,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   1079c:	08013683          	ld	a3,128(sp)
   107a0:	05813603          	ld	a2,88(sp)
   107a4:	00c69463          	bne	a3,a2,107ac <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x38c>
   107a8:	0bc0106f          	j	11864 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1444>
   107ac:	08813603          	ld	a2,136(sp)
   107b0:	00c69463          	bne	a3,a2,107b8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x398>
   107b4:	0b00106f          	j	11864 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1444>
   107b8:	0b813683          	ld	a3,184(sp)
   107bc:	05813583          	ld	a1,88(sp)
   107c0:	00b69463          	bne	a3,a1,107c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3a8>
   107c4:	02c0106f          	j	117f0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13d0>
   107c8:	00c69463          	bne	a3,a2,107d0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3b0>
   107cc:	0240106f          	j	117f0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13d0>
   107d0:	07813603          	ld	a2,120(sp)
   107d4:	00c69463          	bne	a3,a2,107dc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3bc>
   107d8:	0180106f          	j	117f0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13d0>
	uint32_t match_mask = 0;
   107dc:	0c013583          	ld	a1,192(sp)
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   107e0:	05813683          	ld	a3,88(sp)
   107e4:	00d81463          	bne	a6,a3,107ec <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3cc>
   107e8:	05c0106f          	j	11844 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1424>
   107ec:	08813683          	ld	a3,136(sp)
   107f0:	00d81463          	bne	a6,a3,107f8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3d8>
   107f4:	0500106f          	j	11844 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1424>
   107f8:	07813603          	ld	a2,120(sp)
   107fc:	00300693          	li	a3,3
   10800:	00c81463          	bne	a6,a2,10808 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3e8>
   10804:	0400106f          	j	11844 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1424>
			else                            tri_stack[0].shared_edge = 3;
   10808:	24d10423          	sb	a3,584(sp)
		bool edge_mask[3] = {patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 0, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 1, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 2};
   1080c:	57fa08e3          	beq	s4,t6,1157c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x115c>
   10810:	04c00693          	li	a3,76
   10814:	02de86b3          	mul	a3,t4,a3
   10818:	0d010613          	add	a2,sp,208
   1081c:	3c068693          	add	a3,a3,960
   10820:	00c686b3          	add	a3,a3,a2
   10824:	db86c583          	lbu	a1,-584(a3)
   10828:	fff58a93          	add	s5,a1,-1
   1082c:	ffe58993          	add	s3,a1,-2
   10830:	001aba93          	seqz	s5,s5
   10834:	0015b593          	seqz	a1,a1
   10838:	0019b993          	seqz	s3,s3
		glm::vec3 edge_states = evalute_deformation_bounds(dbs, max_db_over_max_error, tri_stack[lod].tri, data.last_ray, ray, edge_mask);
   1083c:	05013683          	ld	a3,80(sp)
	inline float operator[](int i) const { return e[i]; }
   10840:	01072487          	flw	fs1,16(a4)
   10844:	00472107          	flw	ft2,4(a4)
   10848:	0086b683          	ld	a3,8(a3)
   1084c:	01c72507          	flw	fa0,28(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10850:	0944f253          	fsub.s	ft4,fs1,fs4
	inline float operator[](int i) const { return e[i]; }
   10854:	0046a787          	flw	fa5,4(a3)



inline float dot(const vec3 & a, const vec3 &b)
{
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10858:	00812087          	flw	ft1,8(sp)
	inline float operator[](int i) const { return e[i]; }
   1085c:	00c72987          	flw	fs3,12(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10860:	08f172d3          	fsub.s	ft5,ft2,fa5
   10864:	08f4f6d3          	fsub.s	fa3,fs1,fa5
   10868:	08f577d3          	fsub.s	fa5,fa0,fa5
	inline float operator[](int i) const { return e[i]; }
   1086c:	0146a587          	flw	fa1,20(a3)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10870:	0989ffd3          	fsub.s	ft11,fs3,fs8
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10874:	1040f853          	fmul.s	fa6,ft1,ft4
   10878:	00c12e87          	flw	ft9,12(sp)
   1087c:	10b2f2d3          	fmul.s	ft5,ft5,fa1
   10880:	10b6f6d3          	fmul.s	fa3,fa3,fa1
   10884:	10b7f7d3          	fmul.s	fa5,fa5,fa1
	inline float operator[](int i) const { return e[i]; }
   10888:	01872007          	flw	ft0,24(a4)
   1088c:	02072587          	flw	fa1,32(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10890:	09457353          	fsub.s	ft6,fa0,fs4
   10894:	81fef843          	fmadd.s	fa6,ft9,ft11,fa6
   10898:	00412c27          	fsw	ft4,24(sp)
   1089c:	03f12027          	fsw	ft11,32(sp)
   108a0:	09807253          	fsub.s	ft4,ft0,fs8
   108a4:	0955ffd3          	fsub.s	ft11,fa1,fs5
	inline float operator[](int i) const { return e[i]; }
   108a8:	0006a707          	flw	fa4,0(a3)
   108ac:	00072187          	flw	ft3,0(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   108b0:	09417653          	fsub.s	fa2,ft2,fs4
   108b4:	08e9f8d3          	fsub.s	fa7,fs3,fa4
   108b8:	08e1ff53          	fsub.s	ft10,ft3,fa4
   108bc:	02412227          	fsw	ft4,36(sp)
   108c0:	08e07753          	fsub.s	fa4,ft0,fa4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   108c4:	1060f253          	fmul.s	ft4,ft1,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   108c8:	03f12627          	fsw	ft11,44(sp)
   108cc:	09807fd3          	fsub.s	ft11,ft0,fs8
	inline float operator[](int i) const { return e[i]; }
   108d0:	0086a387          	flw	ft7,8(a3)
   108d4:	01472907          	flw	fs2,20(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   108d8:	02612427          	fsw	ft6,40(sp)
	inline float operator[](int i) const { return e[i]; }
   108dc:	0106a307          	flw	ft6,16(a3)
	return prnt_shrd_edg;
}

inline glm::vec3 evalute_deformation_bounds(uint32_t qdb, float max_db_over_max_error, const Triangle& tri, const Ray& last_ray,  const Ray& ray, const bool edge_mask[3])
{
	glm::vec3 fdbs((float)(qdb >> 00 & 0x3ff), (float)(qdb >> 10 & 0x3ff), (float)(qdb >> 20 & 0x3ff));
   108e0:	00a7d91b          	srlw	s2,a5,0xa
   108e4:	0147d39b          	srlw	t2,a5,0x14
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   108e8:	0981f453          	fsub.s	fs0,ft3,fs8
   108ec:	00c12a27          	fsw	fa2,20(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   108f0:	10c0f653          	fmul.s	fa2,ft1,fa2
   108f4:	286f7f43          	fmadd.s	ft10,ft10,ft6,ft5
   108f8:	3ff7f793          	and	a5,a5,1023
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   108fc:	087972d3          	fsub.s	ft5,fs2,ft7
   10900:	3ff97913          	and	s2,s2,1023
   10904:	3ff3f393          	and	t2,t2,1023
   10908:	09597e53          	fsub.s	ft8,fs2,fs5
   1090c:	21fef243          	fmadd.s	ft4,ft9,ft11,ft4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10910:	691378c3          	fmadd.s	fa7,ft6,fa7,fa3
	e[0] *= v[0];
   10914:	09012f87          	flw	ft11,144(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10918:	78e37343          	fmadd.s	ft6,ft6,fa4,fa5
	inline float operator[](int i) const { return e[i]; }
   1091c:	00872087          	flw	ft1,8(a4)
   10920:	d007f6d3          	fcvt.s.w	fa3,a5
   10924:	d0097753          	fcvt.s.w	fa4,s2
   10928:	d003f7d3          	fcvt.s.w	fa5,t2
   1092c:	608ef643          	fmadd.s	fa2,ft9,fs0,fa2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10930:	0950fbd3          	fsub.s	fs7,ft1,fs5
   10934:	0870fed3          	fsub.s	ft9,ft1,ft7
	e[0] *= v[0];
   10938:	11f6f6d3          	fmul.s	fa3,fa3,ft11
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1093c:	0875f3d3          	fsub.s	ft7,fa1,ft7
	e[1] *= v[1];
   10940:	11f77753          	fmul.s	fa4,fa4,ft11
	e[2] *= v[2];
   10944:	11f7f7d3          	fmul.s	fa5,fa5,ft11
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10948:	0955ffd3          	fsub.s	ft11,fa1,fs5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1094c:	00512827          	fsw	ft5,16(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   10950:	81cdf843          	fmadd.s	fa6,fs11,ft8,fa6
	inline float operator[](int i) const { return e[i]; }
   10954:	0186a287          	flw	ft5,24(a3)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10958:	03c12827          	fsw	ft8,48(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1095c:	01012e07          	flw	ft8,16(sp)
   10960:	f05efec3          	fmadd.s	ft9,ft9,ft5,ft10
   10964:	617df643          	fmadd.s	fa2,fs11,fs7,fa2
   10968:	89c2f8c3          	fmadd.s	fa7,ft5,ft8,fa7
   1096c:	21fdf243          	fmadd.s	ft4,fs11,ft11,ft4
   10970:	3072f2c3          	fmadd.s	ft5,ft5,ft7,ft6

	glm::vec3 dlen(glm::dot(tri.vrts[0] - ray.o, ray.d), glm::dot(tri.vrts[1] - ray.o, ray.d), glm::dot(tri.vrts[2] - ray.o, ray.d));
	glm::vec3 last_dlen(glm::dot(tri.vrts[0] - last_ray.o, last_ray.d), glm::dot(tri.vrts[1] - last_ray.o, last_ray.d), glm::dot(tri.vrts[2] - last_ray.o, last_ray.d));
	
	glm::vec3 r;
	if(edge_mask[0]) r[0] = std::min(last_dlen[1], last_dlen[2]) * last_ray.drdt + last_ray.radius;
   10974:	440580e3          	beqz	a1,115b4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1194>
   10978:	28588353          	fmin.s	ft6,fa7,ft5
   1097c:	0206a387          	flw	ft7,32(a3)
   10980:	0246af07          	flw	ft10,36(a3)
   10984:	f063f343          	fmadd.s	ft6,ft7,ft6,ft10
	else             r[0] = std::min(     dlen[1],      dlen[2]) *      ray.drdt +      ray.radius;
	if(edge_mask[1]) r[1] = std::min(last_dlen[2], last_dlen[0]) * last_ray.drdt + last_ray.radius;
   10988:	400a82e3          	beqz	s5,1158c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x116c>
   1098c:	285e82d3          	fmin.s	ft5,ft9,ft5
   10990:	0206a207          	flw	ft4,32(a3)
   10994:	0246a387          	flw	ft7,36(a3)
   10998:	385272c3          	fmadd.s	ft5,ft4,ft5,ft7
	else             r[1] = std::min(     dlen[2],      dlen[0]) *      ray.drdt +      ray.radius;
	if(edge_mask[2]) r[2] = std::min(last_dlen[0], last_dlen[1]) * last_ray.drdt + last_ray.radius;
   1099c:	400982e3          	beqz	s3,115a0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1180>
   109a0:	291e8ed3          	fmin.s	ft9,ft9,fa7
   109a4:	0206a607          	flw	fa2,32(a3)
   109a8:	0246a207          	flw	ft4,36(a3)
   109ac:	21d67643          	fmadd.s	fa2,fa2,ft9,ft4
	asm volatile("frcp.s %0,%1\n\t" 
   109b0:	60037353          	frcp.s	ft6,ft6
   109b4:	6002f2d3          	frcp.s	ft5,ft5
   109b8:	60067653          	frcp.s	fa2,fa2
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   109bc:	10d6f6d3          	fmul.s	fa3,fa3,fa3
   109c0:	04c12387          	flw	ft7,76(sp)
   109c4:	10e77753          	fmul.s	fa4,fa4,fa4
   109c8:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   109cc:	f0000253          	fmv.w.x	ft4,zero
   109d0:	1076f6d3          	fmul.s	fa3,fa3,ft7
   109d4:	10777753          	fmul.s	fa4,fa4,ft7
   109d8:	1077f7d3          	fmul.s	fa5,fa5,ft7
   109dc:	1066f6d3          	fmul.s	fa3,fa3,ft6
   109e0:	10577753          	fmul.s	fa4,fa4,ft5
   109e4:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   109e8:	a1a697d3          	flt.s	a5,fa3,fs10
   109ec:	00079663          	bnez	a5,109f8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x5d8>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   109f0:	09a6f253          	fsub.s	ft4,fa3,fs10
   109f4:	29a20253          	fmin.s	ft4,ft4,fs10
   109f8:	a1a717d3          	flt.s	a5,fa4,fs10
   109fc:	f00002d3          	fmv.w.x	ft5,zero
   10a00:	00079663          	bnez	a5,10a0c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x5ec>
   10a04:	09a772d3          	fsub.s	ft5,fa4,fs10
   10a08:	29a282d3          	fmin.s	ft5,ft5,fs10
   10a0c:	a1a797d3          	flt.s	a5,fa5,fs10
   10a10:	f0000353          	fmv.w.x	ft6,zero
   10a14:	00079663          	bnez	a5,10a20 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x600>
   10a18:	09a7f353          	fsub.s	ft6,fa5,fs10
   10a1c:	29a30353          	fmin.s	ft6,ft6,fs10
		if(edge_states[0] <= 0.0f && edge_states[1] <= 0.0f && edge_states[2] <= 0.0f)
   10a20:	f00007d3          	fmv.w.x	fa5,zero
   10a24:	a0f207d3          	fle.s	a5,ft4,fa5
   10a28:	00078a63          	beqz	a5,10a3c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x61c>
   10a2c:	a0f287d3          	fle.s	a5,ft5,fa5
   10a30:	00078663          	beqz	a5,10a3c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x61c>
   10a34:	a0f307d3          	fle.s	a5,ft6,fa5
   10a38:	68079263          	bnez	a5,110bc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xc9c>
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   10a3c:	000173b7          	lui	t2,0x17
   10a40:	45038393          	add	t2,t2,1104 # 17450 <_ZL15lod_node_offset>
   10a44:	002e9793          	sll	a5,t4,0x2
   10a48:	00f387b3          	add	a5,t2,a5
   10a4c:	0007a783          	lw	a5,0(a5)
   10a50:	06813683          	ld	a3,104(sp)
   10a54:	020e9a93          	sll	s5,t4,0x20
   10a58:	01e787bb          	addw	a5,a5,t5
		move_to_stack(new_tri, triangles[absoulte_node_index]);
   10a5c:	02079793          	sll	a5,a5,0x20
   10a60:	0207d793          	srl	a5,a5,0x20
   10a64:	00d787b3          	add	a5,a5,a3
		uint64_t r = ((uint64_t*)&src)[i];
   10a68:	07013683          	ld	a3,112(sp)
   10a6c:	00579793          	sll	a5,a5,0x5
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   10a70:	020ada93          	srl	s5,s5,0x20
   10a74:	00f687b3          	add	a5,a3,a5
   10a78:	0007b583          	ld	a1,0(a5)
   10a7c:	0087b683          	ld	a3,8(a5)
   10a80:	0107b983          	ld	s3,16(a5)
	float f0 = u24_to_f32(dw0 & 0xffffff);
   10a84:	0005891b          	sext.w	s2,a1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10a88:	01795c93          	srl	s9,s2,0x17
   10a8c:	001cfc93          	and	s9,s9,1
		uint64_t r = ((uint64_t*)&src)[i];
   10a90:	0187b783          	ld	a5,24(a5)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10a94:	340c96e3          	bnez	s9,115e0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11c0>
   10a98:	02891913          	sll	s2,s2,0x28
   10a9c:	02895913          	srl	s2,s2,0x28
   10aa0:	3f800cb7          	lui	s9,0x3f800
	return *((float*)&u);
   10aa4:	01996933          	or	s2,s2,s9
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10aa8:	910ba707          	flw	fa4,-1776(s7) # 18910 <__DATA_BEGIN__+0x8>
   10aac:	914b2787          	flw	fa5,-1772(s6) # 18914 <__DATA_BEGIN__+0xc>
   10ab0:	f00906d3          	fmv.w.x	fa3,s2
   10ab4:	78e6f643          	fmadd.s	fa2,fa3,fa4,fa5
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   10ab8:	0185d913          	srl	s2,a1,0x18
   10abc:	0009091b          	sext.w	s2,s2
   10ac0:	01795c93          	srl	s9,s2,0x17
   10ac4:	001cfc93          	and	s9,s9,1
   10ac8:	300c98e3          	bnez	s9,115d8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11b8>
   10acc:	02891913          	sll	s2,s2,0x28
   10ad0:	02895913          	srl	s2,s2,0x28
   10ad4:	3f800cb7          	lui	s9,0x3f800
	return *((float*)&u);
   10ad8:	01996933          	or	s2,s2,s9
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10adc:	910ba707          	flw	fa4,-1776(s7)
   10ae0:	914b2787          	flw	fa5,-1772(s6)
   10ae4:	f00906d3          	fmv.w.x	fa3,s2
   10ae8:	78e6f6c3          	fmadd.s	fa3,fa3,fa4,fa5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   10aec:	0106991b          	sllw	s2,a3,0x10
   10af0:	0305d593          	srl	a1,a1,0x30
   10af4:	0125e5b3          	or	a1,a1,s2
   10af8:	0005859b          	sext.w	a1,a1
   10afc:	0175d913          	srl	s2,a1,0x17
   10b00:	00197913          	and	s2,s2,1
   10b04:	2c0916e3          	bnez	s2,115d0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11b0>
   10b08:	02859593          	sll	a1,a1,0x28
   10b0c:	0285d593          	srl	a1,a1,0x28
   10b10:	3f800937          	lui	s2,0x3f800
	return *((float*)&u);
   10b14:	0125e5b3          	or	a1,a1,s2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10b18:	910ba707          	flw	fa4,-1776(s7)
   10b1c:	914b2787          	flw	fa5,-1772(s6)
   10b20:	f00583d3          	fmv.w.x	ft7,a1
   10b24:	78e3f7c3          	fmadd.s	fa5,ft7,fa4,fa5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   10b28:	0086d593          	srl	a1,a3,0x8
   10b2c:	0005859b          	sext.w	a1,a1
   10b30:	0175d913          	srl	s2,a1,0x17
   10b34:	00197913          	and	s2,s2,1
   10b38:	280918e3          	bnez	s2,115c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11a8>
   10b3c:	02859593          	sll	a1,a1,0x28
   10b40:	0285d593          	srl	a1,a1,0x28
   10b44:	3f800937          	lui	s2,0x3f800
	return *((float*)&u);
   10b48:	0125e5b3          	or	a1,a1,s2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10b4c:	910ba387          	flw	ft7,-1776(s7)
   10b50:	914b2707          	flw	fa4,-1772(s6)
   10b54:	f0058853          	fmv.w.x	fa6,a1
   10b58:	70787743          	fmadd.s	fa4,fa6,ft7,fa4
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   10b5c:	4206d593          	sra	a1,a3,0x20
   10b60:	0175d913          	srl	s2,a1,0x17
   10b64:	00197913          	and	s2,s2,1
   10b68:	21ad03d3          	fmv.s	ft7,fs10
   10b6c:	02091263          	bnez	s2,10b90 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x770>
   10b70:	02859593          	sll	a1,a1,0x28
   10b74:	0285d593          	srl	a1,a1,0x28
   10b78:	3f800937          	lui	s2,0x3f800
	return *((float*)&u);
   10b7c:	0125e5b3          	or	a1,a1,s2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10b80:	910ba387          	flw	ft7,-1776(s7)
   10b84:	914b2807          	flw	fa6,-1772(s6)
   10b88:	f00588d3          	fmv.w.x	fa7,a1
   10b8c:	8078f3c3          	fmadd.s	ft7,fa7,ft7,fa6
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   10b90:	0089959b          	sllw	a1,s3,0x8
   10b94:	0386d693          	srl	a3,a3,0x38
   10b98:	00b6e6b3          	or	a3,a3,a1
   10b9c:	0006869b          	sext.w	a3,a3
   10ba0:	0176d593          	srl	a1,a3,0x17
   10ba4:	0015f593          	and	a1,a1,1
   10ba8:	21ad0853          	fmv.s	fa6,fs10
   10bac:	02059663          	bnez	a1,10bd8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x7b8>
   10bb0:	02869693          	sll	a3,a3,0x28
   10bb4:	3f8005b7          	lui	a1,0x3f800
   10bb8:	0286d693          	srl	a3,a3,0x28
	return *((float*)&u);
   10bbc:	00b6e6b3          	or	a3,a3,a1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10bc0:	00019637          	lui	a2,0x19
   10bc4:	000195b7          	lui	a1,0x19
   10bc8:	91062807          	flw	fa6,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   10bcc:	f00688d3          	fmv.w.x	fa7,a3
   10bd0:	9145ae07          	flw	ft8,-1772(a1) # 18914 <__DATA_BEGIN__+0xc>
   10bd4:	e1187843          	fmadd.s	fa6,fa6,fa7,ft8
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   10bd8:	0109d693          	srl	a3,s3,0x10
   10bdc:	0006869b          	sext.w	a3,a3
   10be0:	0176d593          	srl	a1,a3,0x17
   10be4:	0015f593          	and	a1,a1,1
   10be8:	21ad0fd3          	fmv.s	ft11,fs10
   10bec:	02059663          	bnez	a1,10c18 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x7f8>
   10bf0:	02869693          	sll	a3,a3,0x28
   10bf4:	3f8005b7          	lui	a1,0x3f800
   10bf8:	0286d693          	srl	a3,a3,0x28
	return *((float*)&u);
   10bfc:	00b6e6b3          	or	a3,a3,a1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10c00:	00019637          	lui	a2,0x19
   10c04:	000195b7          	lui	a1,0x19
   10c08:	91062887          	flw	fa7,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   10c0c:	f0068e53          	fmv.w.x	ft8,a3
   10c10:	9145ae87          	flw	ft9,-1772(a1) # 18914 <__DATA_BEGIN__+0xc>
   10c14:	e9c8ffc3          	fmadd.s	ft11,fa7,ft8,ft9
   10c18:	21ad0453          	fmv.s	fs0,fs10
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   10c1c:	0289d693          	srl	a3,s3,0x28
   10c20:	0209c263          	bltz	s3,10c44 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x824>
   10c24:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   10c28:	00b6e6b3          	or	a3,a3,a1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10c2c:	00019637          	lui	a2,0x19
   10c30:	000195b7          	lui	a1,0x19
   10c34:	91062887          	flw	fa7,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   10c38:	f0068e53          	fmv.w.x	ft8,a3
   10c3c:	9145ae87          	flw	ft9,-1772(a1) # 18914 <__DATA_BEGIN__+0xc>
   10c40:	e9c8f443          	fmadd.s	fs0,fa7,ft8,ft9
	float f8 = u24_to_f32(dw3 & 0xffffff);
   10c44:	0007879b          	sext.w	a5,a5
   10c48:	0177d693          	srl	a3,a5,0x17
   10c4c:	0016f693          	and	a3,a3,1
   10c50:	21ad0f53          	fmv.s	ft10,fs10
   10c54:	02069663          	bnez	a3,10c80 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x860>
   10c58:	02879793          	sll	a5,a5,0x28
   10c5c:	3f8006b7          	lui	a3,0x3f800
   10c60:	0287d793          	srl	a5,a5,0x28
	return *((float*)&u);
   10c64:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   10c68:	00019637          	lui	a2,0x19
   10c6c:	000196b7          	lui	a3,0x19
   10c70:	9106a887          	flw	fa7,-1776(a3) # 18910 <__DATA_BEGIN__+0x8>
   10c74:	f0078e53          	fmv.w.x	ft8,a5
   10c78:	91462e87          	flw	ft9,-1772(a2) # 18914 <__DATA_BEGIN__+0xc>
   10c7c:	e9c8ff43          	fmadd.s	ft10,fa7,ft8,ft9
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   10c80:	0009fed3          	fadd.s	ft9,fs3,ft0
   10c84:	00a4fe53          	fadd.s	ft8,fs1,fa0
   10c88:	0001f053          	fadd.s	ft0,ft3,ft0
   10c8c:	00b978d3          	fadd.s	fa7,fs2,fa1
   10c90:	00a17553          	fadd.s	fa0,ft2,fa0
   10c94:	00b0f5d3          	fadd.s	fa1,ft1,fa1
   10c98:	0131f1d3          	fadd.s	ft3,ft3,fs3
   10c9c:	00917153          	fadd.s	ft2,ft2,fs1
   10ca0:	0120f0d3          	fadd.s	ft1,ft1,fs2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10ca4:	7190774b          	fnmsub.s	fa4,ft0,fs9,fa4
   10ca8:	399573cb          	fnmsub.s	ft7,fa0,fs9,ft7
   10cac:	8195f84b          	fnmsub.s	fa6,fa1,fs9,fa6
   10cb0:	4191744b          	fnmsub.s	fs0,ft2,fs9,fs0
   10cb4:	f190ff4b          	fnmsub.s	ft10,ft1,fs9,ft10
   10cb8:	619ef64b          	fnmsub.s	fa2,ft9,fs9,fa2
   10cbc:	699e76cb          	fnmsub.s	fa3,ft8,fs9,fa3
   10cc0:	7998f7cb          	fnmsub.s	fa5,fa7,fs9,fa5
   10cc4:	f991ffcb          	fnmsub.s	ft11,ft3,fs9,ft11
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   10cc8:	1053f3d3          	fmul.s	ft7,ft7,ft5
   10ccc:	10467653          	fmul.s	fa2,fa2,ft4
   10cd0:	1046f6d3          	fmul.s	fa3,fa3,ft4
   10cd4:	1047f7d3          	fmul.s	fa5,fa5,ft4
   10cd8:	10587853          	fmul.s	fa6,fa6,ft5
   10cdc:	10577753          	fmul.s	fa4,fa4,ft5
   10ce0:	10647453          	fmul.s	fs0,fs0,ft6
   10ce4:	106f7f53          	fmul.s	ft10,ft10,ft6
   10ce8:	106fffd3          	fmul.s	ft11,ft11,ft6
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   10cec:	619ef643          	fmadd.s	fa2,ft9,fs9,fa2
   10cf0:	71907743          	fmadd.s	fa4,ft0,fs9,fa4
   10cf4:	699e76c3          	fmadd.s	fa3,ft8,fs9,fa3
   10cf8:	7998f7c3          	fmadd.s	fa5,fa7,fs9,fa5
   10cfc:	39957543          	fmadd.s	fa0,fa0,fs9,ft7
   10d00:	8195f5c3          	fmadd.s	fa1,fa1,fs9,fa6
   10d04:	f991f043          	fmadd.s	ft0,ft3,fs9,ft11
   10d08:	41917143          	fmadd.s	ft2,ft2,fs9,fs0
   10d0c:	f190f0c3          	fmadd.s	ft1,ft1,fs9,ft10
   10d10:	02428293          	add	t0,t0,36
   10d14:	20010793          	add	a5,sp,512
		if(next_level == header.last_lod) //leaf node
   10d18:	04013603          	ld	a2,64(sp)
   10d1c:	005787b3          	add	a5,a5,t0
	e[0] = v[0];
   10d20:	00c7a027          	fsw	fa2,0(a5)
	e[1] = v[1];
   10d24:	00d7a227          	fsw	fa3,4(a5)
	e[2] = v[2];
   10d28:	00f7a427          	fsw	fa5,8(a5)
	e[0] = v[0];
   10d2c:	00e7a627          	fsw	fa4,12(a5)
	e[1] = v[1];
   10d30:	00a7a827          	fsw	fa0,16(a5)
	e[2] = v[2];
   10d34:	00b7aa27          	fsw	fa1,20(a5)
	e[0] = v[0];
   10d38:	0007ac27          	fsw	ft0,24(a5)
	e[1] = v[1];
   10d3c:	0027ae27          	fsw	ft2,28(a5)
	e[2] = v[2];
   10d40:	0217a027          	fsw	ft1,32(a5)
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   10d44:	02c12827          	fsw	fa2,48(sp)
   10d48:	02d12a27          	fsw	fa3,52(sp)
   10d4c:	04f12427          	fsw	fa5,72(sp)
   10d50:	02e12227          	fsw	fa4,36(sp)
   10d54:	02a12427          	fsw	fa0,40(sp)
   10d58:	02b12627          	fsw	fa1,44(sp)
   10d5c:	00012827          	fsw	ft0,16(sp)
   10d60:	00212a27          	fsw	ft2,20(sp)
   10d64:	02112027          	fsw	ft1,32(sp)
		uint32_t next_level = lod + 1;
   10d68:	001e8793          	add	a5,t4,1
		uint32_t first_child_index = node_index << 2; //compute first child idnex
   10d6c:	002f129b          	sllw	t0,t5,0x2
		uint32_t next_level = lod + 1;
   10d70:	001e869b          	addw	a3,t4,1
		uint32_t first_child_index = node_index << 2; //compute first child idnex
   10d74:	002f1f13          	sll	t5,t5,0x2
		if(next_level == header.last_lod) //leaf node
   10d78:	54f60c63          	beq	a2,a5,112d0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xeb0>
				}
			}
		}
		else //interior node
		{
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   10d7c:	a1a215d3          	flt.s	a1,ft4,fs10
   10d80:	00100993          	li	s3,1
   10d84:	00059e63          	bnez	a1,10da0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x980>
   10d88:	a1a295d3          	flt.s	a1,ft5,fs10
   10d8c:	00059a63          	bnez	a1,10da0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x980>
   10d90:	a1a315d3          	flt.s	a1,ft6,fs10
   10d94:	00059663          	bnez	a1,10da0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x980>
   10d98:	00000993          	li	s3,0
   10d9c:	1c0e90e3          	bnez	t4,1175c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x133c>
   10da0:	04c00e93          	li	t4,76
   10da4:	03da8eb3          	mul	t4,s5,t4

			uint32_t temp_node_stack_size = node_stack_size;
			uint32_t absolute_first_child_index = lod_node_offset[next_level] + first_child_index;
   10da8:	02069693          	sll	a3,a3,0x20
   10dac:	01e6d693          	srl	a3,a3,0x1e
	for(; j != min; --j)
	{
		if(stack[j - 1].t >= entry.t) break;
		stack[j] = stack[j - 1];
	}
	stack[j] = entry;
   10db0:	01a7959b          	sllw	a1,a5,0x1a
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   10db4:	0d010613          	add	a2,sp,208
			uint32_t absolute_first_child_index = lod_node_offset[next_level] + first_child_index;
   10db8:	00d383b3          	add	t2,t2,a3
   10dbc:	0003a683          	lw	a3,0(t2)
   10dc0:	04000937          	lui	s2,0x4000
   10dc4:	fff90913          	add	s2,s2,-1 # 3ffffff <__global_pointer$+0x3fe6ef7>
   10dc8:	00c42107          	flw	ft2,12(s0)
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   10dcc:	3c0e8793          	add	a5,t4,960
   10dd0:	00c78eb3          	add	t4,a5,a2
   10dd4:	db3e8ca3          	sb	s3,-583(t4)
      if (__b < __a)
   10dd8:	01c42587          	flw	fa1,28(s0)
   10ddc:	3c000eb7          	lui	t4,0x3c000
			for(uint32_t i = 0; i < 4; ++i)
   10de0:	09412507          	flw	fa0,148(sp)
   10de4:	09812007          	flw	ft0,152(sp)
   10de8:	09c12087          	flw	ft1,156(sp)
   10dec:	012f7db3          	and	s11,t5,s2
   10df0:	01d5f633          	and	a2,a1,t4
			uint32_t absolute_first_child_index = lod_node_offset[next_level] + first_child_index;
   10df4:	00d282bb          	addw	t0,t0,a3
			for(uint32_t i = 0; i < 4; ++i)
   10df8:	03013c23          	sd	a6,56(sp)
   10dfc:	07113023          	sd	a7,96(sp)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   10e00:	00030793          	mv	a5,t1
			for(uint32_t i = 0; i < 4; ++i)
   10e04:	000d8893          	mv	a7,s11
   10e08:	00000693          	li	a3,0
   10e0c:	00400c93          	li	s9,4
   10e10:	01c13c23          	sd	t3,24(sp)
   10e14:	00060813          	mv	a6,a2
   10e18:	00030d93          	mv	s11,t1
			{
				TesselationTree1::Node node;
				move_to_stack(node, nodes[absolute_first_child_index + i]);
   10e1c:	00568abb          	addw	s5,a3,t0
   10e20:	020a9613          	sll	a2,s5,0x20
   10e24:	01b65a93          	srl	s5,a2,0x1b
		uint64_t r = ((uint64_t*)&src)[i];
   10e28:	01550ab3          	add	s5,a0,s5
   10e2c:	000ab303          	ld	t1,0(s5)
   10e30:	008ab583          	ld	a1,8(s5)
   10e34:	010ab603          	ld	a2,16(s5)
	for(uint i = 0; i < sizeof(T) / sizeof(uint64_t); ++i)
   10e38:	00030393          	mv	t2,t1
   10e3c:	00058f13          	mv	t5,a1
   10e40:	00060e93          	mv	t4,a2
   10e44:	02035313          	srl	t1,t1,0x20
   10e48:	0205d593          	srl	a1,a1,0x20
   10e4c:	02065613          	srl	a2,a2,0x20
		uint64_t r = ((uint64_t*)&src)[i];
   10e50:	018aba83          	ld	s5,24(s5)

				if(tri_stack[lod].child_transformed)
   10e54:	f00387d3          	fmv.w.x	fa5,t2
   10e58:	f0030653          	fmv.w.x	fa2,t1
   10e5c:	f00f06d3          	fmv.w.x	fa3,t5
   10e60:	f00582d3          	fmv.w.x	ft5,a1
   10e64:	f00e8253          	fmv.w.x	ft4,t4
   10e68:	f00601d3          	fmv.w.x	ft3,a2
   10e6c:	3c099c63          	bnez	s3,11244 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe24>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10e70:	0987f7d3          	fsub.s	fa5,fa5,fs8
   10e74:	09467653          	fsub.s	fa2,fa2,fs4
   10e78:	0982f2d3          	fsub.s	ft5,ft5,fs8
   10e7c:	09427253          	fsub.s	ft4,ft4,fs4
   10e80:	0956f6d3          	fsub.s	fa3,fa3,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   10e84:	1017f7d3          	fmul.s	fa5,fa5,ft1
   10e88:	10067653          	fmul.s	fa2,fa2,ft0
   10e8c:	1012f2d3          	fmul.s	ft5,ft5,ft1
   10e90:	10027253          	fmul.s	ft4,ft4,ft0
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   10e94:	0951f1d3          	fsub.s	ft3,ft3,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   10e98:	10a6f6d3          	fmul.s	fa3,fa3,fa0
   10e9c:	28578753          	fmin.s	fa4,fa5,ft5
   10ea0:	28460353          	fmin.s	ft6,fa2,ft4
	if (tmin > tmax) return ray.t_max;//no hit || behind
   10ea4:	285797d3          	fmax.s	fa5,fa5,ft5
   10ea8:	28461653          	fmax.s	fa2,fa2,ft4
   10eac:	10a1f1d3          	fmul.s	ft3,ft3,fa0
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   10eb0:	28671753          	fmax.s	fa4,fa4,ft6
	if (tmin > tmax) return ray.t_max;//no hit || behind
   10eb4:	28c787d3          	fmin.s	fa5,fa5,fa2
   10eb8:	28271753          	fmax.s	fa4,fa4,ft2
   10ebc:	28368653          	fmin.s	fa2,fa3,ft3
   10ec0:	28b787d3          	fmin.s	fa5,fa5,fa1
   10ec4:	283696d3          	fmax.s	fa3,fa3,ft3
   10ec8:	28c71753          	fmax.s	fa4,fa4,fa2
   10ecc:	28d787d3          	fmin.s	fa5,fa5,fa3
   10ed0:	a0e79653          	flt.s	a2,fa5,fa4
   10ed4:	00060463          	beqz	a2,10edc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xabc>
   10ed8:	20b58753          	fmv.s	fa4,fa1
				new_entry.t = intersect(node.aabb, ray, inv_d);
				new_entry.node_index = first_child_index + i;
				new_entry.lod = next_level;
				new_entry.tri_type = i;
				new_entry.dbs = node.dbs;
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++, temp_node_stack_size);
   10edc:	a1671653          	flt.s	a2,fa4,fs6
   10ee0:	12061863          	bnez	a2,11010 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xbf0>
			for(uint32_t i = 0; i < 4; ++i)
   10ee4:	00168693          	add	a3,a3,1
   10ee8:	f3969ae3          	bne	a3,s9,10e1c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x9fc>
   10eec:	03813803          	ld	a6,56(sp)
   10ef0:	06013883          	ld	a7,96(sp)
   10ef4:	00078e13          	mv	t3,a5
			}
		}
	} while(node_stack_size);
   10ef8:	fa0e1c63          	bnez	t3,106b0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x290>

	//if we found a hit convert barycentric coords to max lod
	if(hit_lod != ~0u)
   10efc:	fff00793          	li	a5,-1
   10f00:	0c813703          	ld	a4,200(sp)
   10f04:	04013603          	ld	a2,64(sp)
   10f08:	08f88a63          	beq	a7,a5,10f9c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb7c>
	{
	#if 1
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f0c:	00c4a783          	lw	a5,12(s1)
   10f10:	08c8f063          	bgeu	a7,a2,10f90 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb70>
		{
			uint32_t tri_type;
			hit.bc *= glm::vec2(2.0f);

			if(hit.bc.x > 1.0f)
   10f14:	000196b7          	lui	a3,0x19
   10f18:	0084a707          	flw	fa4,8(s1)
   10f1c:	0044a787          	flw	fa5,4(s1)
   10f20:	9186a587          	flw	fa1,-1768(a3) # 18918 <__DATA_BEGIN__+0x10>
			else if(hit.bc.y > 1.0f)
			{
				tri_type = 1;
				hit.bc -= glm::vec2(0.0f, 1.0f);
			}
			else if(hit.bc.x + hit.bc.y < 1.0f)
   10f24:	908c2507          	flw	fa0,-1784(s8)
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f28:	00088593          	mv	a1,a7
   10f2c:	0240006f          	j	10f50 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb30>
   10f30:	08a677d3          	fsub.s	fa5,fa2,fa0
	e[1] *= v.e[1];
   10f34:	20d68753          	fmv.s	fa4,fa3
				tri_type = 0;
   10f38:	00000693          	li	a3,0
			{
				tri_type = 3;
				hit.bc = glm::vec2(1.0f, 1.0f) - hit.bc;
			}

			hit.id <<= 2;
   10f3c:	0027979b          	sllw	a5,a5,0x2
			hit.id |= tri_type;
   10f40:	00f6e6b3          	or	a3,a3,a5
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f44:	0015859b          	addw	a1,a1,1
			hit.id |= tri_type;
   10f48:	0006879b          	sext.w	a5,a3
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f4c:	02b60e63          	beq	a2,a1,10f88 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb68>
			if(hit.bc.x > 1.0f)
   10f50:	a0f596d3          	flt.s	a3,fa1,fa5
	e[0] *= v.e[0];
   10f54:	00f7f653          	fadd.s	fa2,fa5,fa5
	e[1] *= v.e[1];
   10f58:	00e776d3          	fadd.s	fa3,fa4,fa4
			else if(hit.bc.y > 1.0f)
   10f5c:	a0e59553          	flt.s	a0,fa1,fa4
			if(hit.bc.x > 1.0f)
   10f60:	fc0698e3          	bnez	a3,10f30 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb10>
			else if(hit.bc.y > 1.0f)
   10f64:	70050663          	beqz	a0,11670 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1250>
			hit.id <<= 2;
   10f68:	0027979b          	sllw	a5,a5,0x2
				tri_type = 1;
   10f6c:	00100693          	li	a3,1
			hit.id |= tri_type;
   10f70:	00f6e6b3          	or	a3,a3,a5
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f74:	0015859b          	addw	a1,a1,1
	e[1] -= v[1];
   10f78:	08a6f753          	fsub.s	fa4,fa3,fa0
	e[0] *= v.e[0];
   10f7c:	20c607d3          	fmv.s	fa5,fa2
			hit.id |= tri_type;
   10f80:	0006879b          	sext.w	a5,a3
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   10f84:	fcb616e3          	bne	a2,a1,10f50 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb30>
   10f88:	00e4a427          	fsw	fa4,8(s1)
   10f8c:	00f4a227          	fsw	fa5,4(s1)
		}
	#endif
		hit.id += header.id_offset;
   10f90:	01872703          	lw	a4,24(a4)
   10f94:	00f707bb          	addw	a5,a4,a5
   10f98:	00f4a623          	sw	a5,12(s1)
	}

	return hit_lod != ~0u;
   10f9c:	52813083          	ld	ra,1320(sp)
   10fa0:	52013403          	ld	s0,1312(sp)
	return hit_lod != ~0u;
   10fa4:	00188513          	add	a0,a7,1
   10fa8:	51813483          	ld	s1,1304(sp)
   10fac:	51013903          	ld	s2,1296(sp)
   10fb0:	50813983          	ld	s3,1288(sp)
   10fb4:	50013a03          	ld	s4,1280(sp)
   10fb8:	4f813a83          	ld	s5,1272(sp)
   10fbc:	4f013b03          	ld	s6,1264(sp)
   10fc0:	4e813b83          	ld	s7,1256(sp)
   10fc4:	4e013c03          	ld	s8,1248(sp)
   10fc8:	4d813c83          	ld	s9,1240(sp)
   10fcc:	4d013d03          	ld	s10,1232(sp)
   10fd0:	4c813d83          	ld	s11,1224(sp)
   10fd4:	4bc12407          	flw	fs0,1212(sp)
   10fd8:	4b812487          	flw	fs1,1208(sp)
   10fdc:	4b412907          	flw	fs2,1204(sp)
   10fe0:	4b012987          	flw	fs3,1200(sp)
   10fe4:	4ac12a07          	flw	fs4,1196(sp)
   10fe8:	4a812a87          	flw	fs5,1192(sp)
   10fec:	4a412b07          	flw	fs6,1188(sp)
   10ff0:	4a012b87          	flw	fs7,1184(sp)
   10ff4:	49c12c07          	flw	fs8,1180(sp)
   10ff8:	49812c87          	flw	fs9,1176(sp)
   10ffc:	49412d07          	flw	fs10,1172(sp)
   11000:	49012d87          	flw	fs11,1168(sp)
	return hit_lod != ~0u;
   11004:	00a03533          	snez	a0,a0
   11008:	53010113          	add	sp,sp,1328
   1100c:	00008067          	ret
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++, temp_node_stack_size);
   11010:	0017831b          	addw	t1,a5,1
	for(; j != min; --j)
   11014:	00fd88e3          	beq	s11,a5,11824 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1404>
   11018:	01813e03          	ld	t3,24(sp)
   1101c:	0200006f          	j	1103c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xc1c>
		stack[j] = stack[j - 1];
   11020:	00062e83          	lw	t4,0(a2)
   11024:	01d5a023          	sw	t4,0(a1)
   11028:	00462e83          	lw	t4,4(a2)
   1102c:	01d5a223          	sw	t4,4(a1)
   11030:	00862e83          	lw	t4,8(a2)
   11034:	01d5a423          	sw	t4,8(a1)
	for(; j != min; --j)
   11038:	5bee0863          	beq	t3,t5,115e8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11c8>
		if(stack[j - 1].t >= entry.t) break;
   1103c:	fff78e9b          	addw	t4,a5,-1
   11040:	020e9593          	sll	a1,t4,0x20
   11044:	0205d593          	srl	a1,a1,0x20
   11048:	00159613          	sll	a2,a1,0x1
   1104c:	00b60633          	add	a2,a2,a1
   11050:	00261613          	sll	a2,a2,0x2
   11054:	0e010593          	add	a1,sp,224
   11058:	00c58633          	add	a2,a1,a2
   1105c:	00062787          	flw	fa5,0(a2)
   11060:	00078f1b          	sext.w	t5,a5
		stack[j] = stack[j - 1];
   11064:	020f1793          	sll	a5,t5,0x20
   11068:	0207d793          	srl	a5,a5,0x20
   1106c:	00179593          	sll	a1,a5,0x1
		if(stack[j - 1].t >= entry.t) break;
   11070:	a0f703d3          	fle.s	t2,fa4,fa5
		stack[j] = stack[j - 1];
   11074:	00f585b3          	add	a1,a1,a5
   11078:	00259593          	sll	a1,a1,0x2
   1107c:	0e010793          	add	a5,sp,224
   11080:	00b785b3          	add	a1,a5,a1
		if(stack[j - 1].t >= entry.t) break;
   11084:	000e879b          	sext.w	a5,t4
   11088:	f8038ce3          	beqz	t2,11020 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xc00>
   1108c:	01c13c23          	sd	t3,24(sp)
	stack[j] = entry;
   11090:	0126f7b3          	and	a5,a3,s2
   11094:	00f887bb          	addw	a5,a7,a5
   11098:	0127f7b3          	and	a5,a5,s2
   1109c:	00f867b3          	or	a5,a6,a5
   110a0:	01e6961b          	sllw	a2,a3,0x1e
   110a4:	00c7e7b3          	or	a5,a5,a2
   110a8:	00f5a223          	sw	a5,4(a1)
   110ac:	00e5a027          	fsw	fa4,0(a1)
   110b0:	0155a423          	sw	s5,8(a1)
   110b4:	00030793          	mv	a5,t1
}
   110b8:	e2dff06f          	j	10ee4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xac4>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   110bc:	0839f6d3          	fsub.s	fa3,fs3,ft3
   110c0:	0815f2d3          	fsub.s	ft5,fa1,ft1
   110c4:	08197653          	fsub.s	fa2,fs2,ft1
   110c8:	082573d3          	fsub.s	ft7,fa0,ft2
   110cc:	08307253          	fsub.s	ft4,ft0,ft3
   110d0:	09307853          	fsub.s	fa6,ft0,fs3
}

inline vec3 cross(const vec3 & a, const vec3 &b)
{
	return vec3(a[1] * b[2] - a[2] * b[1],
		(-(a[0] * b[2] - a[2] * b[0])),
   110d4:	1056f753          	fmul.s	fa4,fa3,ft5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   110d8:	0801f8d3          	fsub.s	fa7,ft3,ft0
		(-(a[0] * b[2] - a[2] * b[0])),
   110dc:	03012987          	flw	fs3,48(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   110e0:	0824f053          	fsub.s	ft0,fs1,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   110e4:	107671d3          	fmul.s	ft3,fa2,ft7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   110e8:	0925f953          	fsub.s	fs2,fa1,fs2
	return vec3(a[1] * b[2] - a[2] * b[1],
   110ec:	70467ec7          	fmsub.s	ft9,fa2,ft4,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   110f0:	08b0f5d3          	fsub.s	fa1,ft1,fa1
		(-(a[0] * b[2] - a[2] * b[0])),
   110f4:	1109f753          	fmul.s	fa4,fs3,fa6
   110f8:	02c12087          	flw	ft1,44(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   110fc:	18507f47          	fmsub.s	ft10,ft0,ft5,ft3
   11100:	02012287          	flw	ft5,32(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   11104:	1110f353          	fmul.s	ft6,ft1,fa7
	return vec3(a[1] * b[2] - a[2] * b[1],
   11108:	02412f87          	flw	ft11,36(sp)
   1110c:	7122f747          	fmsub.s	fa4,ft5,fs2,fa4
   11110:	02812287          	flw	ft5,40(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11114:	00812e07          	flw	ft8,8(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   11118:	10dbf0d3          	fmul.s	ft1,fs7,fa3
	return vec3(a[1] * b[2] - a[2] * b[1],
   1111c:	10b2f2d3          	fmul.s	ft5,ft5,fa1
   11120:	30bff5c7          	fmsub.s	fa1,ft11,fa1,ft6
   11124:	01412307          	flw	ft6,20(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11128:	089574d3          	fsub.s	fs1,fa0,fs1
		a[0] * b[1] - a[1] * b[0]);
   1112c:	10407253          	fmul.s	ft4,ft0,ft4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11130:	08a17553          	fsub.s	fa0,ft2,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11134:	11de71d3          	fmul.s	ft3,ft8,ft9
	return vec3(a[1] * b[2] - a[2] * b[1],
   11138:	01812107          	flw	ft2,24(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1113c:	00c12f87          	flw	ft11,12(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   11140:	10c37353          	fmul.s	ft6,ft6,fa2
   11144:	08c47647          	fmsub.s	fa2,fs0,fa2,ft1
   11148:	02c12087          	flw	ft1,44(sp)
   1114c:	11217153          	fmul.s	ft2,ft2,fs2
   11150:	2076f247          	fmsub.s	ft4,fa3,ft7,ft4
   11154:	28a0f0c7          	fmsub.s	ft1,ft1,fa0,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11158:	10be75d3          	fmul.s	fa1,ft8,fa1
		a[0] * b[1] - a[1] * b[0]);
   1115c:	02412287          	flw	ft5,36(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11160:	19eff1c3          	fmadd.s	ft3,ft11,ft10,ft3
		a[0] * b[1] - a[1] * b[0]);
   11164:	02012907          	flw	fs2,32(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   11168:	1099f3c7          	fmsub.s	ft7,fs3,fs1,ft2
		a[0] * b[1] - a[1] * b[0]);
   1116c:	10a2f553          	fmul.s	fa0,ft5,fa0
	return vec3(a[1] * b[2] - a[2] * b[1],
   11170:	300bf347          	fmsub.s	ft6,fs7,ft0,ft6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11174:	10ce7653          	fmul.s	fa2,ft8,fa2
		a[0] * b[1] - a[1] * b[0]);
   11178:	109974d3          	fmul.s	fs1,fs2,fs1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1117c:	10ee7753          	fmul.s	fa4,ft8,fa4
		a[0] * b[1] - a[1] * b[0]);
   11180:	10047053          	fmul.s	ft0,fs0,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11184:	581ff0c3          	fmadd.s	ft1,ft11,ft1,fa1
   11188:	184df1c3          	fmadd.s	ft3,fs11,ft4,ft3
	return vec3(a[1] * b[2] - a[2] * b[1],
   1118c:	01412587          	flw	fa1,20(sp)
   11190:	01812107          	flw	ft2,24(sp)
   11194:	02812287          	flw	ft5,40(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11198:	707ff743          	fmadd.s	fa4,ft11,ft7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   1119c:	00d5f6c7          	fmsub.s	fa3,fa1,fa3,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   111a0:	606ff343          	fmadd.s	ft6,ft11,ft6,fa2
	return vec3(a[1] * b[2] - a[2] * b[1],
   111a4:	49017147          	fmsub.s	ft2,ft2,fa6,fs1
   111a8:	5112f547          	fmsub.s	fa0,ft5,fa7,fa0
	if(gn_dot_d > 0.0f) bc = -bc;
   111ac:	a03797d3          	flt.s	a5,fa5,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   111b0:	702df5c3          	fmadd.s	fa1,fs11,ft2,fa4
   111b4:	08adf643          	fmadd.s	fa2,fs11,fa0,ft1
   111b8:	30ddf743          	fmadd.s	fa4,fs11,fa3,ft6
   111bc:	00078863          	beqz	a5,111cc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xdac>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   111c0:	20b595d3          	fneg.s	fa1,fa1
   111c4:	20c61653          	fneg.s	fa2,fa2
   111c8:	20e71753          	fneg.s	fa4,fa4
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   111cc:	f00007d3          	fmv.w.x	fa5,zero
   111d0:	a0f597d3          	flt.s	a5,fa1,fa5
   111d4:	06079263          	bnez	a5,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
   111d8:	a0f617d3          	flt.s	a5,fa2,fa5
   111dc:	04079e63          	bnez	a5,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
   111e0:	a0f717d3          	flt.s	a5,fa4,fa5
   111e4:	04079a63          	bnez	a5,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   111e8:	01412787          	flw	fa5,20(sp)
	if(t < ray.t_min || t > hit.t) return false;
   111ec:	00c42687          	flw	fa3,12(s0)
   111f0:	11d7fe53          	fmul.s	ft8,fa5,ft9
   111f4:	e1e47443          	fmadd.s	fs0,fs0,ft10,ft8
   111f8:	404bf7c3          	fmadd.s	fa5,fs7,ft4,fs0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   111fc:	1837f7d3          	fdiv.s	fa5,fa5,ft3
	if(t < ray.t_min || t > hit.t) return false;
   11200:	a0d797d3          	flt.s	a5,fa5,fa3
   11204:	02079a63          	bnez	a5,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
   11208:	a0fb17d3          	flt.s	a5,fs6,fa5
   1120c:	02079663          	bnez	a5,11238 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe18>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   11210:	00c5f6d3          	fadd.s	fa3,fa1,fa2
	hit.t = t ;
   11214:	00f4a027          	fsw	fa5,0(s1)
				hit.id = node_index;
   11218:	01e4a623          	sw	t5,12(s1)
				hit.patch_index = patch_index;
   1121c:	0144a823          	sw	s4,16(s1)
		uint32_t lod = current_node_entry.lod;
   11220:	000e8893          	mv	a7,t4
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   11224:	00e6f753          	fadd.s	fa4,fa3,fa4
	return vec2(a.e[0] * b.e[0], a.e[1] * b.e[1]);
}

inline vec2 operator/(const vec2 &a, const vec2 &b)
{
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   11228:	18e5f7d3          	fdiv.s	fa5,fa1,fa4
   1122c:	18e67653          	fdiv.s	fa2,fa2,fa4
	e[0] = v[0];
   11230:	00f4a227          	fsw	fa5,4(s1)
	e[1] = v[1];
   11234:	00c4a427          	fsw	fa2,8(s1)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11238:	00030e13          	mv	t3,t1
	} while(node_stack_size);
   1123c:	c60e1a63          	bnez	t3,106b0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x290>
   11240:	cbdff06f          	j	10efc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xadc>
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   11244:	3a069863          	bnez	a3,115f4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x11d4>
	inline float operator[](int i) const { return e[i]; }
   11248:	00072807          	flw	fa6,0(a4)
   1124c:	00472e07          	flw	ft8,4(a4)
   11250:	00872887          	flw	fa7,8(a4)
	e[2] = v[2];
   11254:	02c12307          	flw	ft6,44(sp)
	e[1] = v[1];
   11258:	02812387          	flw	ft7,40(sp)
	e[0] = v[0];
   1125c:	02412207          	flw	ft4,36(sp)
	e[2] = v[2];
   11260:	02012707          	flw	fa4,32(sp)
	e[1] = v[1];
   11264:	01412187          	flw	ft3,20(sp)
	e[0] = v[0];
   11268:	01012287          	flw	ft5,16(sp)
	return v / length(v);
}

inline vec3 min(const vec3& a, const vec3& b)
{
	return vec3(std::min(a[0], b[0]), std::min(a[1], b[1]), std::min(a[2], b[2]));
   1126c:	285207d3          	fmin.s	fa5,ft4,ft5
   11270:	29c18653          	fmin.s	fa2,ft3,ft8
   11274:	291706d3          	fmin.s	fa3,fa4,fa7
   11278:	285212d3          	fmax.s	ft5,ft4,ft5
   1127c:	29c19253          	fmax.s	ft4,ft3,ft8
   11280:	291711d3          	fmax.s	ft3,fa4,fa7
   11284:	f0038753          	fmv.w.x	fa4,t2
   11288:	28e787d3          	fmin.s	fa5,fa5,fa4
   1128c:	f0030753          	fmv.w.x	fa4,t1
   11290:	290787d3          	fmin.s	fa5,fa5,fa6
   11294:	28e60653          	fmin.s	fa2,fa2,fa4
   11298:	f00f0753          	fmv.w.x	fa4,t5
   1129c:	28760653          	fmin.s	fa2,fa2,ft7
   112a0:	28e686d3          	fmin.s	fa3,fa3,fa4
   112a4:	f0058753          	fmv.w.x	fa4,a1
   112a8:	286686d3          	fmin.s	fa3,fa3,ft6
}

inline vec3 max(const vec3& a, const vec3& b)
{
	return vec3(std::max(a[0], b[0]), std::max(a[1], b[1]), std::max(a[2], b[2]));
   112ac:	28e292d3          	fmax.s	ft5,ft5,fa4
   112b0:	f00e8753          	fmv.w.x	fa4,t4
   112b4:	290292d3          	fmax.s	ft5,ft5,fa6
   112b8:	28e21253          	fmax.s	ft4,ft4,fa4
   112bc:	f0060753          	fmv.w.x	fa4,a2
   112c0:	28721253          	fmax.s	ft4,ft4,ft7
   112c4:	28e191d3          	fmax.s	ft3,ft3,fa4
   112c8:	286191d3          	fmax.s	ft3,ft3,ft6
					for(uint32_t j = 0; j < 3; ++j)
   112cc:	ba5ff06f          	j	10e70 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xa50>
   112d0:	20a50bd3          	fmv.s	fs7,fa0
	e[0] = v[0];
   112d4:	20e70153          	fmv.s	ft2,fa4
	inline float operator[](int i) const { return e[i]; }
   112d8:	00072507          	flw	fa0,0(a4)
	e[2] = v[2];
   112dc:	20108753          	fmv.s	fa4,ft1
	inline float operator[](int i) const { return e[i]; }
   112e0:	00472607          	flw	fa2,4(a4)
   112e4:	00872787          	flw	fa5,8(a4)
	e[2] = v[2];
   112e8:	20b58fd3          	fmv.s	ft11,fa1
	e[1] = v[1];
   112ec:	01412087          	flw	ft1,20(sp)
	e[0] = v[0];
   112f0:	20000853          	fmv.s	fa6,ft0
	if(gn_dot_d > 0.0f) bc = -bc;
   112f4:	f0000453          	fmv.w.x	fs0,zero
			for(uint32_t i = 0; i < 4; ++i)
   112f8:	00000693          	li	a3,0
   112fc:	00400e13          	li	t3,4
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   11300:	00100e93          	li	t4,1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11304:	08a876d3          	fsub.s	fa3,fa6,fa0
   11308:	08fff953          	fsub.s	fs2,ft11,fa5
   1130c:	08f77053          	fsub.s	ft0,fa4,fa5
   11310:	08cbf4d3          	fsub.s	fs1,fs7,fa2
   11314:	08a171d3          	fsub.s	ft3,ft2,fa0
   11318:	09017ed3          	fsub.s	ft9,ft2,fa6
		(-(a[0] * b[2] - a[2] * b[0])),
   1131c:	1126f353          	fmul.s	ft6,fa3,fs2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11320:	09577253          	fsub.s	ft4,fa4,fs5
   11324:	08c0f2d3          	fsub.s	ft5,ft1,fa2
	return vec3(a[1] * b[2] - a[2] * b[1],
   11328:	10907b53          	fmul.s	fs6,ft0,fs1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1132c:	082579d3          	fsub.s	fs3,fa0,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   11330:	30307347          	fmsub.s	ft6,ft0,ft3,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11334:	08eff753          	fsub.s	fa4,ft11,fa4
   11338:	095fff53          	fsub.s	ft10,ft11,fs5
   1133c:	0957f8d3          	fsub.s	fa7,fa5,fs5
	return vec3(a[1] * b[2] - a[2] * b[1],
   11340:	104ef5d3          	fmul.s	fa1,ft9,ft4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11344:	09887853          	fsub.s	fa6,fa6,fs8
   11348:	0940fe53          	fsub.s	ft8,ft1,fs4
	return vec3(a[1] * b[2] - a[2] * b[1],
   1134c:	b122fb47          	fmsub.s	fs6,ft5,fs2,fs6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11350:	00812907          	flw	fs2,8(sp)
		a[0] * b[1] - a[1] * b[0]);
   11354:	1032f1d3          	fmul.s	ft3,ft5,ft3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11358:	09f7f7d3          	fsub.s	fa5,fa5,ft11
   1135c:	094673d3          	fsub.s	ft7,fa2,fs4
   11360:	094bffd3          	fsub.s	ft11,fs7,fs4
   11364:	09817153          	fsub.s	ft2,ft2,fs8
   11368:	09857553          	fsub.s	fa0,fa0,fs8
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1136c:	10697953          	fmul.s	fs2,fs2,ft6
		(-(a[0] * b[2] - a[2] * b[0])),
   11370:	01312c27          	fsw	fs3,24(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   11374:	02612c27          	fsw	ft6,56(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   11378:	11e9f9d3          	fmul.s	fs3,fs3,ft10
	return vec3(a[1] * b[2] - a[2] * b[1],
   1137c:	59077347          	fmsub.s	ft6,fa4,fa6,fa1
   11380:	1116f5d3          	fmul.s	fa1,fa3,fa7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11384:	081bf0d3          	fsub.s	ft1,fs7,ft1
   11388:	09767bd3          	fsub.s	fs7,fa2,fs7
	return vec3(a[1] * b[2] - a[2] * b[1],
   1138c:	11c77653          	fmul.s	fa2,fa4,ft8
   11390:	1896f1c7          	fmsub.s	ft3,fa3,fs1,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   11394:	00c12487          	flw	fs1,12(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   11398:	11f7f753          	fmul.s	fa4,fa5,ft11
   1139c:	9827f7c7          	fmsub.s	fa5,fa5,ft2,fs3
   113a0:	107079d3          	fmul.s	fs3,ft0,ft7
   113a4:	58a07047          	fmsub.s	ft0,ft0,fa0,fa1
   113a8:	6040f247          	fmsub.s	ft4,ft1,ft4,fa2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113ac:	9164f943          	fmadd.s	fs2,fs1,fs6,fs2
   113b0:	00812607          	flw	fa2,8(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   113b4:	71ebf747          	fmsub.s	fa4,fs7,ft10,fa4
   113b8:	9912f9c7          	fmsub.s	fs3,ft5,fa7,fs3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113bc:	10667353          	fmul.s	ft6,fa2,ft6
   113c0:	10f677d3          	fmul.s	fa5,fa2,fa5
   113c4:	10067053          	fmul.s	ft0,fa2,ft0
		a[0] * b[1] - a[1] * b[0]);
   113c8:	1100f0d3          	fmul.s	ft1,ft1,fa6
   113cc:	102bfbd3          	fmul.s	fs7,fs7,ft2
   113d0:	10a2f2d3          	fmul.s	ft5,ft5,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113d4:	903df943          	fmadd.s	fs2,fs11,ft3,fs2
	return vec3(a[1] * b[2] - a[2] * b[1],
   113d8:	01812607          	flw	fa2,24(sp)
   113dc:	09cef0c7          	fmsub.s	ft1,ft9,ft8,ft1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113e0:	3044f243          	fmadd.s	ft4,fs1,ft4,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   113e4:	b9f675c7          	fmsub.s	fa1,fa2,ft11,fs7
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113e8:	78e4f743          	fmadd.s	fa4,fs1,fa4,fa5
	return vec3(a[1] * b[2] - a[2] * b[1],
   113ec:	2876f6c7          	fmsub.s	fa3,fa3,ft7,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   113f0:	0134f9c3          	fmadd.s	fs3,fs1,fs3,ft0
   113f4:	a1241653          	flt.s	a2,fs0,fs2
   113f8:	201df0c3          	fmadd.s	ft1,fs11,ft1,ft4
   113fc:	70bdf5c3          	fmadd.s	fa1,fs11,fa1,fa4
   11400:	98ddf6c3          	fmadd.s	fa3,fs11,fa3,fs3
   11404:	00060863          	beqz	a2,11414 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xff4>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   11408:	201090d3          	fneg.s	ft1,ft1
   1140c:	20b595d3          	fneg.s	fa1,fa1
   11410:	20d696d3          	fneg.s	fa3,fa3
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   11414:	a0809653          	flt.s	a2,ft1,fs0
   11418:	06061663          	bnez	a2,11484 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1064>
   1141c:	a0859653          	flt.s	a2,fa1,fs0
   11420:	06061263          	bnez	a2,11484 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1064>
   11424:	a0869653          	flt.s	a2,fa3,fs0
   11428:	04061e63          	bnez	a2,11484 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1064>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1142c:	03812787          	flw	fa5,56(sp)
	if(t < ray.t_min || t > hit.t) return false;
   11430:	00c42707          	flw	fa4,12(s0)
   11434:	10f3f3d3          	fmul.s	ft7,ft7,fa5
   11438:	39657543          	fmadd.s	fa0,fa0,fs6,ft7
   1143c:	5038f7c3          	fmadd.s	fa5,fa7,ft3,fa0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   11440:	1927f7d3          	fdiv.s	fa5,fa5,fs2
	if(t < ray.t_min || t > hit.t) return false;
   11444:	a0e79653          	flt.s	a2,fa5,fa4
   11448:	02061e63          	bnez	a2,11484 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1064>
   1144c:	0004a707          	flw	fa4,0(s1)
   11450:	a0f71653          	flt.s	a2,fa4,fa5
   11454:	02061863          	bnez	a2,11484 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1064>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   11458:	00b0f753          	fadd.s	fa4,ft1,fa1
	hit.t = t ;
   1145c:	00f4a027          	fsw	fa5,0(s1)
					hit.id = first_child_index + i;
   11460:	00df063b          	addw	a2,t5,a3
   11464:	00c4a623          	sw	a2,12(s1)
					hit.patch_index = patch_index;
   11468:	0144a823          	sw	s4,16(s1)
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   1146c:	00d777d3          	fadd.s	fa5,fa4,fa3
	e[0] = v[0];
   11470:	00078893          	mv	a7,a5
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   11474:	18f0f0d3          	fdiv.s	ft1,ft1,fa5
   11478:	18f5f5d3          	fdiv.s	fa1,fa1,fa5
	e[0] = v[0];
   1147c:	0014a227          	fsw	ft1,4(s1)
	e[1] = v[1];
   11480:	00b4a427          	fsw	fa1,8(s1)
			for(uint32_t i = 0; i < 4; ++i)
   11484:	0016869b          	addw	a3,a3,1
   11488:	1dc68e63          	beq	a3,t3,11664 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1244>
   1148c:	21d68463          	beq	a3,t4,11694 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1274>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   11490:	00200613          	li	a2,2
   11494:	24c68463          	beq	a3,a2,116dc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12bc>
	e[2] = v[2];
   11498:	02012f87          	flw	ft11,32(sp)
	e[1] = v[1];
   1149c:	01412b87          	flw	fs7,20(sp)
	e[0] = v[0];
   114a0:	01012107          	flw	ft2,16(sp)
	e[2] = v[2];
   114a4:	02c12707          	flw	fa4,44(sp)
	e[1] = v[1];
   114a8:	02812087          	flw	ft1,40(sp)
	e[0] = v[0];
   114ac:	02412807          	flw	fa6,36(sp)
	e[2] = v[2];
   114b0:	04812787          	flw	fa5,72(sp)
	e[1] = v[1];
   114b4:	03412607          	flw	fa2,52(sp)
	e[0] = v[0];
   114b8:	03012507          	flw	fa0,48(sp)
	Triangle(const rtm::vec3& v0, const rtm::vec3& v1, const rtm::vec3& v2)
	{
		this->vrts[0] = v0;
		this->vrts[1] = v1;
		this->vrts[2] = v2;
	}
   114bc:	00300693          	li	a3,3
   114c0:	e45ff06f          	j	11304 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xee4>
			tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   114c4:	fffe891b          	addw	s2,t4,-1 # 3bffffff <__global_pointer$+0x3bfe6ef7>
   114c8:	02091913          	sll	s2,s2,0x20
   114cc:	02095913          	srl	s2,s2,0x20
   114d0:	02b905b3          	mul	a1,s2,a1
   114d4:	20010613          	add	a2,sp,512
		uint32_t tri_type = current_node_entry.tri_type;
   114d8:	0006899b          	sext.w	s3,a3
			tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   114dc:	02458393          	add	t2,a1,36
   114e0:	007603b3          	add	t2,a2,t2
   114e4:	00b605b3          	add	a1,a2,a1
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   114e8:	14069263          	bnez	a3,1162c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x120c>
	inline float operator[](int i) const { return e[i]; }
   114ec:	0005a687          	flw	fa3,0(a1)
   114f0:	0045a707          	flw	fa4,4(a1)
   114f4:	0085a787          	flw	fa5,8(a1)
   114f8:	0183a507          	flw	fa0,24(t2)
   114fc:	01c3a587          	flw	fa1,28(t2)
   11500:	0203a607          	flw	fa2,32(t2)
   11504:	00c3a107          	flw	ft2,12(t2)
   11508:	0103a087          	flw	ft1,16(t2)
   1150c:	0143a007          	flw	ft0,20(t2)
			tri_stack[lod].shared_edge = propagate_shared_edge(tri_stack[lod - 1u].shared_edge, tri_type);
   11510:	04c00693          	li	a3,76
   11514:	02d90933          	mul	s2,s2,a3
   11518:	0d010613          	add	a2,sp,208
	e[0] = v[0];
   1151c:	00d72027          	fsw	fa3,0(a4)
	e[1] = v[1];
   11520:	00e72227          	fsw	fa4,4(a4)
	e[2] = v[2];
   11524:	00f72427          	fsw	fa5,8(a4)
	e[0] = v[0];
   11528:	00a72627          	fsw	fa0,12(a4)
	e[1] = v[1];
   1152c:	00b72827          	fsw	fa1,16(a4)
	e[2] = v[2];
   11530:	00c72a27          	fsw	fa2,20(a4)
	e[0] = v[0];
   11534:	00272c27          	fsw	ft2,24(a4)
	e[1] = v[1];
   11538:	00172e27          	fsw	ft1,28(a4)
   1153c:	3c090693          	add	a3,s2,960
	e[2] = v[2];
   11540:	02072027          	fsw	ft0,32(a4)
   11544:	00c68933          	add	s2,a3,a2
   11548:	db894683          	lbu	a3,-584(s2)
	if(prnt_shrd_edg == 3 || tri_typ == 3 || prnt_shrd_edg == tri_typ) return 3;
   1154c:	00300593          	li	a1,3
   11550:	0006839b          	sext.w	t2,a3
   11554:	18b68063          	beq	a3,a1,116d4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12b4>
   11558:	16b98e63          	beq	s3,a1,116d4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12b4>
   1155c:	17338c63          	beq	t2,s3,116d4 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12b4>
   11560:	04c00593          	li	a1,76
   11564:	02be85b3          	mul	a1,t4,a1
   11568:	3c058613          	add	a2,a1,960
   1156c:	0d010593          	add	a1,sp,208
   11570:	00b605b3          	add	a1,a2,a1
   11574:	dad58c23          	sb	a3,-584(a1)
		bool edge_mask[3] = {patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 0, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 1, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 2};
   11578:	a9fa1c63          	bne	s4,t6,10810 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3f0>
   1157c:	00100a93          	li	s5,1
   11580:	00100593          	li	a1,1
   11584:	00100993          	li	s3,1
   11588:	ab4ff06f          	j	1083c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x41c>
	else             r[1] = std::min(     dlen[2],      dlen[0]) *      ray.drdt +      ray.radius;
   1158c:	28460253          	fmin.s	ft4,fa2,ft4
   11590:	02042287          	flw	ft5,32(s0)
   11594:	02442387          	flw	ft7,36(s0)
   11598:	3842f2c3          	fmadd.s	ft5,ft5,ft4,ft7
	if(edge_mask[2]) r[2] = std::min(last_dlen[0], last_dlen[1]) * last_ray.drdt + last_ray.radius;
   1159c:	c0099263          	bnez	s3,109a0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x580>
	else             r[2] = std::min(     dlen[0],      dlen[1]) *      ray.drdt +      ray.radius;
   115a0:	29060653          	fmin.s	fa2,fa2,fa6
   115a4:	02042387          	flw	ft7,32(s0)
   115a8:	02442207          	flw	ft4,36(s0)
   115ac:	20c3f643          	fmadd.s	fa2,ft7,fa2,ft4
   115b0:	c00ff06f          	j	109b0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x590>
	else             r[0] = std::min(     dlen[1],      dlen[2]) *      ray.drdt +      ray.radius;
   115b4:	28480353          	fmin.s	ft6,fa6,ft4
   115b8:	02042387          	flw	ft7,32(s0)
   115bc:	02442f07          	flw	ft10,36(s0)
   115c0:	f063f343          	fmadd.s	ft6,ft7,ft6,ft10
   115c4:	bc4ff06f          	j	10988 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x568>
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   115c8:	908c2707          	flw	fa4,-1784(s8)
   115cc:	d90ff06f          	j	10b5c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x73c>
   115d0:	908c2787          	flw	fa5,-1784(s8)
   115d4:	d54ff06f          	j	10b28 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x708>
   115d8:	908c2687          	flw	fa3,-1784(s8)
   115dc:	d10ff06f          	j	10aec <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x6cc>
   115e0:	908c2607          	flw	fa2,-1784(s8)
   115e4:	cd4ff06f          	j	10ab8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x698>
   115e8:	01c13c23          	sd	t3,24(sp)
   115ec:	00060593          	mv	a1,a2
   115f0:	aa1ff06f          	j	11090 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xc70>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   115f4:	00100e13          	li	t3,1
   115f8:	11c68663          	beq	a3,t3,11704 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12e4>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   115fc:	00200e13          	li	t3,2
   11600:	19c68263          	beq	a3,t3,11784 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1364>
   11604:	02012307          	flw	ft6,32(sp)
	e[1] = v[1];
   11608:	01412387          	flw	ft7,20(sp)
	e[0] = v[0];
   1160c:	01012207          	flw	ft4,16(sp)
	e[2] = v[2];
   11610:	02c12707          	flw	fa4,44(sp)
	e[1] = v[1];
   11614:	02812187          	flw	ft3,40(sp)
	e[0] = v[0];
   11618:	02412287          	flw	ft5,36(sp)
	e[2] = v[2];
   1161c:	04812887          	flw	fa7,72(sp)
	e[1] = v[1];
   11620:	03412e07          	flw	ft8,52(sp)
	e[0] = v[0];
   11624:	03012807          	flw	fa6,48(sp)
   11628:	c45ff06f          	j	1126c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe4c>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   1162c:	00100693          	li	a3,1
	inline float operator[](int i) const { return e[i]; }
   11630:	0003a687          	flw	fa3,0(t2)
   11634:	0043a707          	flw	fa4,4(t2)
   11638:	0083a787          	flw	fa5,8(t2)
   1163c:	0ed98c63          	beq	s3,a3,11734 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1314>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   11640:	00200693          	li	a3,2
   11644:	00c3a507          	flw	fa0,12(t2)
   11648:	0103a587          	flw	fa1,16(t2)
   1164c:	0143a607          	flw	fa2,20(t2)
   11650:	14d98e63          	beq	s3,a3,117ac <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x138c>
   11654:	0183a107          	flw	ft2,24(t2)
   11658:	01c3a087          	flw	ft1,28(t2)
   1165c:	0203a007          	flw	ft0,32(t2)
   11660:	eb1ff06f          	j	11510 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x10f0>
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11664:	00030793          	mv	a5,t1
   11668:	00078e13          	mv	t3,a5
   1166c:	88dff06f          	j	10ef8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xad8>
			else if(hit.bc.x + hit.bc.y < 1.0f)
   11670:	00d67053          	fadd.s	ft0,fa2,fa3
	e[0] *= v.e[0];
   11674:	20c607d3          	fmv.s	fa5,fa2
	e[1] *= v.e[1];
   11678:	20d68753          	fmv.s	fa4,fa3
				tri_type = 3;
   1167c:	00300693          	li	a3,3
			else if(hit.bc.x + hit.bc.y < 1.0f)
   11680:	a0a01553          	flt.s	a0,ft0,fa0
   11684:	0a051463          	bnez	a0,1172c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x130c>
	return vec2(a[0] - b[0], a[1] - b[1]);
   11688:	08c577d3          	fsub.s	fa5,fa0,fa2
   1168c:	08d57753          	fsub.s	fa4,fa0,fa3
	vec2(float e0, float e1) { e[0] = e0; e[1] = e1; }
   11690:	8adff06f          	j	10f3c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb1c>
   11694:	00c72807          	flw	fa6,12(a4)
   11698:	01072087          	flw	ft1,16(a4)
   1169c:	01472707          	flw	fa4,20(a4)
	e[2] = v[2];
   116a0:	04812f87          	flw	ft11,72(sp)
	e[1] = v[1];
   116a4:	03412b87          	flw	fs7,52(sp)
	e[0] = v[0];
   116a8:	03012107          	flw	ft2,48(sp)
	e[2] = v[2];
   116ac:	02012787          	flw	fa5,32(sp)
	e[1] = v[1];
   116b0:	01412607          	flw	fa2,20(sp)
	e[0] = v[0];
   116b4:	01012507          	flw	fa0,16(sp)
   116b8:	c4dff06f          	j	11304 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xee4>
	if(match_mask == 6) return 0;
   116bc:	08013683          	ld	a3,128(sp)
   116c0:	07813603          	ld	a2,120(sp)
   116c4:	1ec69463          	bne	a3,a2,118ac <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x148c>
			else                            tri_stack[0].shared_edge = 3;
   116c8:	00300693          	li	a3,3
   116cc:	24d10423          	sb	a3,584(sp)
   116d0:	93cff06f          	j	1080c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3ec>
   116d4:	00300693          	li	a3,3
   116d8:	e89ff06f          	j	11560 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1140>
	inline float operator[](int i) const { return e[i]; }
   116dc:	01872107          	flw	ft2,24(a4)
   116e0:	01c72b87          	flw	fs7,28(a4)
   116e4:	02072f87          	flw	ft11,32(a4)
	e[2] = v[2];
   116e8:	04812707          	flw	fa4,72(sp)
	e[1] = v[1];
   116ec:	03412087          	flw	ft1,52(sp)
	e[0] = v[0];
   116f0:	03012807          	flw	fa6,48(sp)
	e[2] = v[2];
   116f4:	02c12787          	flw	fa5,44(sp)
	e[1] = v[1];
   116f8:	02812607          	flw	fa2,40(sp)
	e[0] = v[0];
   116fc:	02412507          	flw	fa0,36(sp)
   11700:	c05ff06f          	j	11304 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xee4>
	inline float operator[](int i) const { return e[i]; }
   11704:	00c72287          	flw	ft5,12(a4)
   11708:	01072187          	flw	ft3,16(a4)
   1170c:	01472707          	flw	fa4,20(a4)
	e[2] = v[2];
   11710:	04812307          	flw	ft6,72(sp)
	e[1] = v[1];
   11714:	03412387          	flw	ft7,52(sp)
	e[0] = v[0];
   11718:	03012207          	flw	ft4,48(sp)
	e[2] = v[2];
   1171c:	02012887          	flw	fa7,32(sp)
	e[1] = v[1];
   11720:	01412e07          	flw	ft8,20(sp)
	e[0] = v[0];
   11724:	01012807          	flw	fa6,16(sp)
   11728:	b45ff06f          	j	1126c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe4c>
				tri_type = 2;
   1172c:	00200693          	li	a3,2
   11730:	80dff06f          	j	10f3c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xb1c>
	e[2] = v[2];
   11734:	20f78053          	fmv.s	ft0,fa5
	e[1] = v[1];
   11738:	20e700d3          	fmv.s	ft1,fa4
	e[0] = v[0];
   1173c:	20d68153          	fmv.s	ft2,fa3
	inline float operator[](int i) const { return e[i]; }
   11740:	00c5a507          	flw	fa0,12(a1)
   11744:	0105a587          	flw	fa1,16(a1)
   11748:	0145a607          	flw	fa2,20(a1)
	e[2] = v[2];
   1174c:	0203a787          	flw	fa5,32(t2)
	e[1] = v[1];
   11750:	01c3a707          	flw	fa4,28(t2)
	e[0] = v[0];
   11754:	0183a687          	flw	fa3,24(t2)
   11758:	db9ff06f          	j	11510 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x10f0>
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   1175c:	fffe859b          	addw	a1,t4,-1
   11760:	02059593          	sll	a1,a1,0x20
   11764:	0205d593          	srl	a1,a1,0x20
   11768:	04c00e93          	li	t4,76
   1176c:	03d585b3          	mul	a1,a1,t4
   11770:	3c058613          	add	a2,a1,960
   11774:	0d010593          	add	a1,sp,208
   11778:	00b605b3          	add	a1,a2,a1
   1177c:	db95c983          	lbu	s3,-583(a1)
   11780:	e20ff06f          	j	10da0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x980>
	inline float operator[](int i) const { return e[i]; }
   11784:	01872207          	flw	ft4,24(a4)
   11788:	01c72387          	flw	ft7,28(a4)
   1178c:	02072307          	flw	ft6,32(a4)
	e[2] = v[2];
   11790:	04812707          	flw	fa4,72(sp)
	e[1] = v[1];
   11794:	03412187          	flw	ft3,52(sp)
	e[0] = v[0];
   11798:	03012287          	flw	ft5,48(sp)
	e[2] = v[2];
   1179c:	02c12887          	flw	fa7,44(sp)
	e[1] = v[1];
   117a0:	02812e07          	flw	ft8,40(sp)
	e[0] = v[0];
   117a4:	02412807          	flw	fa6,36(sp)
   117a8:	ac5ff06f          	j	1126c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xe4c>
	inline float operator[](int i) const { return e[i]; }
   117ac:	20f782d3          	fmv.s	ft5,fa5
   117b0:	20e70253          	fmv.s	ft4,fa4
   117b4:	20d681d3          	fmv.s	ft3,fa3
	e[2] = v[2];
   117b8:	20c607d3          	fmv.s	fa5,fa2
	e[1] = v[1];
   117bc:	20b58753          	fmv.s	fa4,fa1
	e[0] = v[0];
   117c0:	20a506d3          	fmv.s	fa3,fa0
	inline float operator[](int i) const { return e[i]; }
   117c4:	0185a107          	flw	ft2,24(a1)
   117c8:	01c5a087          	flw	ft1,28(a1)
   117cc:	0205a007          	flw	ft0,32(a1)
	e[2] = v[2];
   117d0:	20528653          	fmv.s	fa2,ft5
	e[1] = v[1];
   117d4:	204205d3          	fmv.s	fa1,ft4
	e[0] = v[0];
   117d8:	20318553          	fmv.s	fa0,ft3
   117dc:	d35ff06f          	j	11510 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x10f0>
{
public:
	uint32_t e[3];

	uvec3() = default;
	uvec3(uint32_t i) { e[0] = i;  e[1] = i; e[2] = i; }
   117e0:	06013c23          	sd	zero,120(sp)
   117e4:	08013423          	sd	zero,136(sp)
   117e8:	04013c23          	sd	zero,88(sp)
   117ec:	e11fe06f          	j	105fc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1dc>
				match_mask |= 1 << i;
   117f0:	0c013683          	ld	a3,192(sp)
   117f4:	0026e593          	or	a1,a3,2
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   117f8:	05813683          	ld	a3,88(sp)
   117fc:	ecd800e3          	beq	a6,a3,116bc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x129c>
   11800:	08813683          	ld	a3,136(sp)
   11804:	ead80ce3          	beq	a6,a3,116bc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x129c>
   11808:	07813683          	ld	a3,120(sp)
   1180c:	08d80a63          	beq	a6,a3,118a0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1480>
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(header.vi, previous_patch_indices);
   11810:	00500693          	li	a3,5
   11814:	40b686bb          	subw	a3,a3,a1
   11818:	0ff6f693          	zext.b	a3,a3
			else                            tri_stack[0].shared_edge = 3;
   1181c:	24d10423          	sb	a3,584(sp)
   11820:	fedfe06f          	j	1080c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3ec>
	stack[j] = entry;
   11824:	020d9613          	sll	a2,s11,0x20
   11828:	02065613          	srl	a2,a2,0x20
   1182c:	00161793          	sll	a5,a2,0x1
   11830:	00c787b3          	add	a5,a5,a2
   11834:	00279793          	sll	a5,a5,0x2
   11838:	0e010613          	add	a2,sp,224
   1183c:	00f605b3          	add	a1,a2,a5
   11840:	851ff06f          	j	11090 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0xc70>
				match_mask |= 1 << i;
   11844:	0045e593          	or	a1,a1,4
	if(match_mask == 5) return 1; 
   11848:	00500393          	li	t2,5
   1184c:	00300693          	li	a3,3
   11850:	00758463          	beq	a1,t2,11858 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1438>
   11854:	fb5fe06f          	j	10808 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3e8>
   11858:	00100693          	li	a3,1
   1185c:	24d10423          	sb	a3,584(sp)
   11860:	fadfe06f          	j	1080c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3ec>
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   11864:	0b813683          	ld	a3,184(sp)
   11868:	05813603          	ld	a2,88(sp)
   1186c:	06c68663          	beq	a3,a2,118d8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x14b8>
   11870:	08813603          	ld	a2,136(sp)
   11874:	04c68263          	beq	a3,a2,118b8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1498>
   11878:	07813603          	ld	a2,120(sp)
				match_mask |= 1 << i;
   1187c:	00100593          	li	a1,1
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   11880:	00c68463          	beq	a3,a2,11888 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x1468>
   11884:	f5dfe06f          	j	107e0 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3c0>
   11888:	05813683          	ld	a3,88(sp)
   1188c:	e2d80ee3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   11890:	08813683          	ld	a3,136(sp)
   11894:	e2d80ae3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
				match_mask |= 1 << i;
   11898:	00300593          	li	a1,3
   1189c:	f6dff06f          	j	11808 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13e8>
	if(match_mask == 6) return 0;
   118a0:	0045e593          	or	a1,a1,4
   118a4:	00600693          	li	a3,6
   118a8:	e2d590e3          	bne	a1,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   118ac:	00000693          	li	a3,0
   118b0:	24d10423          	sb	a3,584(sp)
   118b4:	f59fe06f          	j	1080c <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x3ec>
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   118b8:	05813683          	ld	a3,88(sp)
   118bc:	e0d806e3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   118c0:	0b813683          	ld	a3,184(sp)
   118c4:	e0d802e3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   118c8:	07813683          	ld	a3,120(sp)
   118cc:	ded80ee3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
				match_mask |= 1 << i;
   118d0:	00300593          	li	a1,3
   118d4:	f3dff06f          	j	11810 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x13f0>
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   118d8:	ded808e3          	beq	a6,a3,116c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12a8>
   118dc:	08813683          	ld	a3,136(sp)
   118e0:	fed814e3          	bne	a6,a3,118c8 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x14a8>
   118e4:	00300693          	li	a3,3
   118e8:	de5ff06f          	j	116cc <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit+0x12ac>

00000000000118ec <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit>:


///////////////////////////////////secondary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

inline bool intersect(const uint32_t patch_index, const TesselationTree4SecondaryRayData& data, const Ray& ray, Hit& hit)
{
   118ec:	a4010113          	add	sp,sp,-1472
   118f0:	55b13c23          	sd	s11,1368(sp)
		bool child_transformed;
	}
	tri_stack[8];

	TesselationTree4::Header header;
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   118f4:	0005bd83          	ld	s11,0(a1)
{
   118f8:	57713c23          	sd	s7,1400(sp)
   118fc:	04b13423          	sd	a1,72(sp)
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   11900:	02051b93          	sll	s7,a0,0x20
		((uint64_t*)&dst)[i] = r;
   11904:	000db583          	ld	a1,0(s11)
{
   11908:	5a813823          	sd	s0,1456(sp)
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   1190c:	020bdb93          	srl	s7,s7,0x20
{
   11910:	4af10413          	add	s0,sp,1199
   11914:	fc047413          	and	s0,s0,-64
	move_to_stack(header, data.tes_tree.headers[patch_index]);
   11918:	006b9793          	sll	a5,s7,0x6
{
   1191c:	5a913423          	sd	s1,1448(sp)
   11920:	57913423          	sd	s9,1384(sp)
   11924:	00060493          	mv	s1,a2
   11928:	00f585b3          	add	a1,a1,a5
   1192c:	04000613          	li	a2,64
   11930:	00050c93          	mv	s9,a0
   11934:	04040513          	add	a0,s0,64
   11938:	5b213023          	sd	s2,1440(sp)
   1193c:	5a113c23          	sd	ra,1464(sp)
   11940:	00068913          	mv	s2,a3
   11944:	59313c23          	sd	s3,1432(sp)
   11948:	59413823          	sd	s4,1424(sp)
   1194c:	59513423          	sd	s5,1416(sp)
   11950:	59613023          	sd	s6,1408(sp)
   11954:	57813823          	sd	s8,1392(sp)
   11958:	57a13023          	sd	s10,1376(sp)
   1195c:	54812627          	fsw	fs0,1356(sp)
   11960:	54912427          	fsw	fs1,1352(sp)
   11964:	55212227          	fsw	fs2,1348(sp)
   11968:	55312027          	fsw	fs3,1344(sp)
   1196c:	53412e27          	fsw	fs4,1340(sp)
   11970:	53512c27          	fsw	fs5,1336(sp)
   11974:	53612a27          	fsw	fs6,1332(sp)
   11978:	53712827          	fsw	fs7,1328(sp)
   1197c:	53812627          	fsw	fs8,1324(sp)
   11980:	53912427          	fsw	fs9,1320(sp)
   11984:	53a12227          	fsw	fs10,1316(sp)
   11988:	53b12027          	fsw	fs11,1312(sp)
   1198c:	00006097          	auipc	ra,0x6
   11990:	920080e7          	jalr	-1760(ra) # 172ac <memcpy>

	glm::vec3 inv_d = glm::vec3(1.0f) / ray.d;
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   11994:	05042707          	flw	fa4,80(s0)
   11998:	0284a787          	flw	fa5,40(s1)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   1199c:	000197b7          	lui	a5,0x19
   119a0:	9087a687          	flw	fa3,-1784(a5) # 18908 <__DATA_BEGIN__>
   119a4:	10f777d3          	fmul.s	fa5,fa4,fa5
	inline float operator[](int i) const { return e[i]; }
   119a8:	0144a587          	flw	fa1,20(s1)
   119ac:	0104a607          	flw	fa2,16(s1)
   119b0:	0184a507          	flw	fa0,24(s1)
	const TesselationTree4::CompressedNode4* nodes = &data.tes_tree.nodes[header.root_node_offset];
   119b4:	008db603          	ld	a2,8(s11)
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   119b8:	04f12a27          	fsw	fa5,84(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   119bc:	18b6f7d3          	fdiv.s	fa5,fa3,fa1
	inline float operator[](int i) const { return e[i]; }
   119c0:	20c603d3          	fmv.s	ft7,fa2
	const TesselationTree4::CompressedNode4* nodes = &data.tes_tree.nodes[header.root_node_offset];
   119c4:	08c13c23          	sd	a2,152(sp)
   119c8:	05446603          	lwu	a2,84(s0)
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   119cc:	04045703          	lhu	a4,64(s0)
   119d0:	20b58353          	fmv.s	ft6,fa1
   119d4:	0ac13023          	sd	a2,160(sp)
	const CompactTri* triangles = &data.tes_tree.triangles[header.root_tri_offset];
   119d8:	010db603          	ld	a2,16(s11)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   119dc:	00f75693          	srl	a3,a4,0xf
   119e0:	20a502d3          	fmv.s	ft5,fa0
   119e4:	06c13823          	sd	a2,112(sp)
   119e8:	05846603          	lwu	a2,88(s0)
   119ec:	06c13c23          	sd	a2,120(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   119f0:	18c6f653          	fdiv.s	fa2,fa3,fa2
   119f4:	08f12a27          	fsw	fa5,148(sp)
   119f8:	18a6f7d3          	fdiv.s	fa5,fa3,fa0
   119fc:	0ac12427          	fsw	fa2,168(sp)
   11a00:	08f12827          	fsw	fa5,144(sp)
   11a04:	00068463          	beqz	a3,11a0c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x120>
   11a08:	6c80106f          	j	130d0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17e4>
   11a0c:	3f8006b7          	lui	a3,0x3f800
   11a10:	0087171b          	sllw	a4,a4,0x8
	return *((float*)&u);
   11a14:	00d76733          	or	a4,a4,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11a18:	f00707d3          	fmv.w.x	fa5,a4
   11a1c:	000196b7          	lui	a3,0x19
   11a20:	91c6a707          	flw	fa4,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
   11a24:	08d7f7d3          	fsub.s	fa5,fa5,fa3
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11a28:	04645683          	lhu	a3,70(s0)
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11a2c:	00019737          	lui	a4,0x19
   11a30:	91072687          	flw	fa3,-1776(a4) # 18910 <__DATA_BEGIN__+0x8>
   11a34:	00f6d613          	srl	a2,a3,0xf
   11a38:	70d7f6c3          	fmadd.s	fa3,fa5,fa3,fa4
   11a3c:	00060463          	beqz	a2,11a44 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x158>
   11a40:	6a40106f          	j	130e4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17f8>
   11a44:	3f800637          	lui	a2,0x3f800
   11a48:	0086969b          	sllw	a3,a3,0x8
	return *((float*)&u);
   11a4c:	00c6e6b3          	or	a3,a3,a2
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11a50:	f0068753          	fmv.w.x	fa4,a3
   11a54:	9087a787          	flw	fa5,-1784(a5)
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11a58:	000196b7          	lui	a3,0x19
   11a5c:	08f77053          	fsub.s	ft0,fa4,fa5
   11a60:	91c6a787          	flw	fa5,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11a64:	04245683          	lhu	a3,66(s0)
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11a68:	91072707          	flw	fa4,-1776(a4)
   11a6c:	00f6d613          	srl	a2,a3,0xf
   11a70:	78e07043          	fmadd.s	ft0,ft0,fa4,fa5
   11a74:	00060463          	beqz	a2,11a7c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x190>
   11a78:	6800106f          	j	130f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x180c>
   11a7c:	3f800637          	lui	a2,0x3f800
   11a80:	0086969b          	sllw	a3,a3,0x8
	return *((float*)&u);
   11a84:	00c6e6b3          	or	a3,a3,a2
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11a88:	9087a787          	flw	fa5,-1784(a5)
   11a8c:	f0068753          	fmv.w.x	fa4,a3
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11a90:	000196b7          	lui	a3,0x19
   11a94:	91072607          	flw	fa2,-1776(a4)
   11a98:	08f77753          	fsub.s	fa4,fa4,fa5
   11a9c:	91c6a787          	flw	fa5,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11aa0:	04845683          	lhu	a3,72(s0)
   11aa4:	00f6d613          	srl	a2,a3,0xf
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11aa8:	78c77743          	fmadd.s	fa4,fa4,fa2,fa5
   11aac:	00060463          	beqz	a2,11ab4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1c8>
   11ab0:	65c0106f          	j	1310c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1820>
   11ab4:	0086969b          	sllw	a3,a3,0x8
   11ab8:	3f800637          	lui	a2,0x3f800
	return *((float*)&u);
   11abc:	00c6e6b3          	or	a3,a3,a2
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11ac0:	f0068653          	fmv.w.x	fa2,a3
   11ac4:	9087a787          	flw	fa5,-1784(a5)
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11ac8:	000196b7          	lui	a3,0x19
   11acc:	08f675d3          	fsub.s	fa1,fa2,fa5
   11ad0:	91072607          	flw	fa2,-1776(a4)
   11ad4:	91c6a787          	flw	fa5,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
   11ad8:	78c5f5c3          	fmadd.s	fa1,fa1,fa2,fa5
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11adc:	04445683          	lhu	a3,68(s0)
   11ae0:	9087a787          	flw	fa5,-1784(a5)
   11ae4:	00f6d613          	srl	a2,a3,0xf
   11ae8:	02061463          	bnez	a2,11b10 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x224>
   11aec:	0086969b          	sllw	a3,a3,0x8
   11af0:	3f800637          	lui	a2,0x3f800
	return *((float*)&u);
   11af4:	00c6e6b3          	or	a3,a3,a2
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11af8:	f0068653          	fmv.w.x	fa2,a3
   11afc:	000196b7          	lui	a3,0x19
   11b00:	91072507          	flw	fa0,-1776(a4)
   11b04:	08f677d3          	fsub.s	fa5,fa2,fa5
   11b08:	91c6a607          	flw	fa2,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
   11b0c:	60a7f7c3          	fmadd.s	fa5,fa5,fa0,fa2
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   11b10:	04a45683          	lhu	a3,74(s0)
   11b14:	9087a607          	flw	fa2,-1784(a5)
   11b18:	00f6d613          	srl	a2,a3,0xf
   11b1c:	02061463          	bnez	a2,11b44 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x258>
   11b20:	0086969b          	sllw	a3,a3,0x8
   11b24:	3f800637          	lui	a2,0x3f800
	return *((float*)&u);
   11b28:	00c6e6b3          	or	a3,a3,a2
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   11b2c:	f0068553          	fmv.w.x	fa0,a3
   11b30:	000196b7          	lui	a3,0x19
   11b34:	91072087          	flw	ft1,-1776(a4)
   11b38:	08c57653          	fsub.s	fa2,fa0,fa2
   11b3c:	91c6a507          	flw	fa0,-1764(a3) # 1891c <__DATA_BEGIN__+0x14>
   11b40:	50167643          	fmadd.s	fa2,fa2,ft1,fa0
	inline float operator[](int i) const { return e[i]; }
   11b44:	0004ac87          	flw	fs9,0(s1)
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   11b48:	0a812507          	flw	fa0,168(sp)
	inline float operator[](int i) const { return e[i]; }
   11b4c:	0044aa07          	flw	fs4,4(s1)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11b50:	0996f6d3          	fsub.s	fa3,fa3,fs9
   11b54:	09907053          	fsub.s	ft0,ft0,fs9
	inline float operator[](int i) const { return e[i]; }
   11b58:	0084aa87          	flw	fs5,8(s1)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11b5c:	09477753          	fsub.s	fa4,fa4,fs4
   11b60:	0945f5d3          	fsub.s	fa1,fa1,fs4
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   11b64:	10a6f6d3          	fmul.s	fa3,fa3,fa0
   11b68:	10a07053          	fmul.s	ft0,ft0,fa0
   11b6c:	09412507          	flw	fa0,148(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11b70:	0957f7d3          	fsub.s	fa5,fa5,fs5
   11b74:	09567653          	fsub.s	fa2,fa2,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   11b78:	10a5f5d3          	fmul.s	fa1,fa1,fa0
   11b7c:	10a77753          	fmul.s	fa4,fa4,fa0
   11b80:	28068553          	fmin.s	fa0,fa3,ft0
	if (tmin > tmax) return ray.t_max;//no hit || behind
   11b84:	280696d3          	fmax.s	fa3,fa3,ft0
   11b88:	09012007          	flw	ft0,144(sp)
   11b8c:	00c4a107          	flw	ft2,12(s1)
   11b90:	01c4a087          	flw	ft1,28(s1)
   11b94:	1007f7d3          	fmul.s	fa5,fa5,ft0
   11b98:	10067653          	fmul.s	fa2,fa2,ft0
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   11b9c:	28251553          	fmax.s	fa0,fa0,ft2
   11ba0:	28b70053          	fmin.s	ft0,fa4,fa1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   11ba4:	281686d3          	fmin.s	fa3,fa3,ft1
   11ba8:	28b71753          	fmax.s	fa4,fa4,fa1
   11bac:	280515d3          	fmax.s	fa1,fa0,ft0
   11bb0:	28c78553          	fmin.s	fa0,fa5,fa2
   11bb4:	28e68753          	fmin.s	fa4,fa3,fa4
   11bb8:	28c797d3          	fmax.s	fa5,fa5,fa2
   11bbc:	28a596d3          	fmax.s	fa3,fa1,fa0
   11bc0:	28f707d3          	fmin.s	fa5,fa4,fa5
   11bc4:	a0d796d3          	flt.s	a3,fa5,fa3
   11bc8:	00069463          	bnez	a3,11bd0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x2e4>
	return tmin;
   11bcc:	20d680d3          	fmv.s	ft1,fa3
	node_stack[0].node_index = 0;
	node_stack[0].lod = 0;
	node_stack[0].tri_type = 0;

	glm::uvec3 previous_patch_indices(0);
	if(data.last_patch_index != ~0) previous_patch_indices  = data.tes_tree.vertex_indices[data.last_patch_index];
   11bd0:	04813603          	ld	a2,72(sp)
	node_stack[0].dbs = header.node.dbs;
   11bd4:	04c42683          	lw	a3,76(s0)
	node_stack[0].t = intersect(decompress(header.node.aabb), ray, inv_d);
   11bd8:	0e112827          	fsw	ft1,240(sp)
	if(data.last_patch_index != ~0) previous_patch_indices  = data.tes_tree.vertex_indices[data.last_patch_index];
   11bdc:	01062d03          	lw	s10,16(a2) # 3f800010 <__global_pointer$+0x3f7e6f08>
	node_stack[0].dbs = header.node.dbs;
   11be0:	0ed12c23          	sw	a3,248(sp)
	node_stack[0].node_index = 0;
   11be4:	0e012a23          	sw	zero,244(sp)
	if(data.last_patch_index != ~0) previous_patch_indices  = data.tes_tree.vertex_indices[data.last_patch_index];
   11be8:	fff00693          	li	a3,-1
   11bec:	00dd1463          	bne	s10,a3,11bf4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x308>
   11bf0:	5580106f          	j	13148 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x185c>
   11bf4:	020d1593          	sll	a1,s10,0x20
   11bf8:	0205d593          	srl	a1,a1,0x20
   11bfc:	018db683          	ld	a3,24(s11)
   11c00:	00159613          	sll	a2,a1,0x1
   11c04:	00b60633          	add	a2,a2,a1
   11c08:	00261613          	sll	a2,a2,0x2
   11c0c:	00c686b3          	add	a3,a3,a2
   11c10:	0006a603          	lw	a2,0(a3)
   11c14:	04c13c23          	sd	a2,88(sp)
   11c18:	0046a603          	lw	a2,4(a3)
   11c1c:	0086a683          	lw	a3,8(a3)
   11c20:	06c13023          	sd	a2,96(sp)
   11c24:	06d13423          	sd	a3,104(sp)
	uint64_t dw1 = ctri.data[1];
   11c28:	06843583          	ld	a1,104(s0)
	uint64_t dw2 = ctri.data[2];
   11c2c:	07043e03          	ld	t3,112(s0)
	uint64_t dw0 = ctri.data[0];
   11c30:	06043883          	ld	a7,96(s0)
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   11c34:	0385d513          	srl	a0,a1,0x38
   11c38:	008e161b          	sllw	a2,t3,0x8
   11c3c:	00c56533          	or	a0,a0,a2
	float f0 = u24_to_f32(dw0 & 0xffffff);
   11c40:	01000637          	lui	a2,0x1000
   11c44:	fff60613          	add	a2,a2,-1 # ffffff <__global_pointer$+0xfe6ef7>
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   11c48:	0308d813          	srl	a6,a7,0x30
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   11c4c:	0188df93          	srl	t6,a7,0x18
	float f0 = u24_to_f32(dw0 & 0xffffff);
   11c50:	0008889b          	sext.w	a7,a7
   11c54:	00c8f3b3          	and	t2,a7,a2
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   11c58:	0105931b          	sllw	t1,a1,0x10
	float f0 = u24_to_f32(dw0 & 0xffffff);
   11c5c:	00713823          	sd	t2,16(sp)
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   11c60:	00686833          	or	a6,a6,t1
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   11c64:	0085df13          	srl	t5,a1,0x8

		//if the next LOD is the leaf intersect othewise push the child nodes onto the stack
		uint32_t next_level = lod + 1;
		uint32_t first_child_index = node_index << 2; //compute first child idnex
		
		if(next_level == header.last_lod) //leaf node
   11c68:	05843303          	ld	t1,88(s0)
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   11c6c:	4205d593          	sra	a1,a1,0x20
   11c70:	00c5fa33          	and	s4,a1,a2
   11c74:	00b13423          	sd	a1,8(sp)
	return *((float*)&u);
   11c78:	01013583          	ld	a1,16(sp)
   11c7c:	0c613823          	sd	t1,208(sp)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11c80:	3f800337          	lui	t1,0x3f800
	return *((float*)&u);
   11c84:	0065e5b3          	or	a1,a1,t1
   11c88:	00b13823          	sd	a1,16(sp)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11c8c:	000196b7          	lui	a3,0x19
   11c90:	91072707          	flw	fa4,-1776(a4)
   11c94:	9146a787          	flw	fa5,-1772(a3) # 18914 <__DATA_BEGIN__+0xc>
   11c98:	01012687          	flw	fa3,16(sp)
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   11c9c:	000f8f9b          	sext.w	t6,t6
   11ca0:	00cffc33          	and	s8,t6,a2
	return *((float*)&u);
   11ca4:	006c6c33          	or	s8,s8,t1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11ca8:	78e6f1c3          	fmadd.s	ft3,fa3,fa4,fa5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   11cac:	0008081b          	sext.w	a6,a6
   11cb0:	f00c06d3          	fmv.w.x	fa3,s8
   11cb4:	00c87b33          	and	s6,a6,a2
	return *((float*)&u);
   11cb8:	006b6b33          	or	s6,s6,t1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11cbc:	78e6f143          	fmadd.s	ft2,fa3,fa4,fa5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   11cc0:	000f0f1b          	sext.w	t5,t5
   11cc4:	f00b06d3          	fmv.w.x	fa3,s6
   11cc8:	00cf7ab3          	and	s5,t5,a2
	return *((float*)&u);
   11ccc:	006aeab3          	or	s5,s5,t1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11cd0:	78e6f0c3          	fmadd.s	ft1,fa3,fa4,fa5
   11cd4:	f00a86d3          	fmv.w.x	fa3,s5
	return *((float*)&u);
   11cd8:	006a6a33          	or	s4,s4,t1
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   11cdc:	0005051b          	sext.w	a0,a0
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11ce0:	78e6f043          	fmadd.s	ft0,fa3,fa4,fa5
   11ce4:	f00a06d3          	fmv.w.x	fa3,s4
   11ce8:	00c579b3          	and	s3,a0,a2
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   11cec:	010e5e93          	srl	t4,t3,0x10
	return *((float*)&u);
   11cf0:	0069e9b3          	or	s3,s3,t1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11cf4:	78e6f543          	fmadd.s	fa0,fa3,fa4,fa5
   11cf8:	000e8e9b          	sext.w	t4,t4
   11cfc:	f00986d3          	fmv.w.x	fa3,s3
   11d00:	00cef3b3          	and	t2,t4,a2
	float f8 = u24_to_f32(dw3 & 0xffffff);
   11d04:	07842283          	lw	t0,120(s0)
	return *((float*)&u);
   11d08:	0063e3b3          	or	t2,t2,t1
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   11d0c:	028e5e13          	srl	t3,t3,0x28
   11d10:	006e65b3          	or	a1,t3,t1
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11d14:	78e6f5c3          	fmadd.s	fa1,fa3,fa4,fa5
   11d18:	f00386d3          	fmv.w.x	fa3,t2
	return *((float*)&u);
   11d1c:	00b13c23          	sd	a1,24(sp)
	float f8 = u24_to_f32(dw3 & 0xffffff);
   11d20:	00c2f633          	and	a2,t0,a2
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(data.tes_tree.vertex_indices[patch_index], previous_patch_indices);
   11d24:	001b9593          	sll	a1,s7,0x1
   11d28:	00666633          	or	a2,a2,t1
   11d2c:	01758333          	add	t1,a1,s7
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   11d30:	78e6f643          	fmadd.s	fa2,fa3,fa4,fa5
   11d34:	f0060253          	fmv.w.x	ft4,a2
   11d38:	01812687          	flw	fa3,24(sp)
   11d3c:	00231613          	sll	a2,t1,0x2
		if(next_level == header.last_lod) //leaf node
   11d40:	0d013303          	ld	t1,208(sp)
   11d44:	0178d893          	srl	a7,a7,0x17
   11d48:	0018f893          	and	a7,a7,1
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(data.tes_tree.vertex_indices[patch_index], previous_patch_indices);
   11d4c:	0cc13c23          	sd	a2,216(sp)
   11d50:	78e6f6c3          	fmadd.s	fa3,fa3,fa4,fa5
		if(next_level == header.last_lod) //leaf node
   11d54:	03c35c13          	srl	s8,t1,0x3c
   11d58:	78e277c3          	fmadd.s	fa5,ft4,fa4,fa5
   11d5c:	00088463          	beqz	a7,11d64 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x478>
   11d60:	33c0106f          	j	1309c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17b0>
   11d64:	0a312627          	fsw	ft3,172(sp)
   11d68:	017fdf93          	srl	t6,t6,0x17
   11d6c:	001fff93          	and	t6,t6,1
   11d70:	000f8463          	beqz	t6,11d78 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x48c>
   11d74:	31c0106f          	j	13090 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17a4>
   11d78:	0a212827          	fsw	ft2,176(sp)
   11d7c:	01785813          	srl	a6,a6,0x17
   11d80:	00187813          	and	a6,a6,1
   11d84:	00080463          	beqz	a6,11d8c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4a0>
   11d88:	2fc0106f          	j	13084 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1798>
   11d8c:	0a112a27          	fsw	ft1,180(sp)
   11d90:	017f5f13          	srl	t5,t5,0x17
   11d94:	001f7f13          	and	t5,t5,1
   11d98:	000f0463          	beqz	t5,11da0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4b4>
   11d9c:	2dc0106f          	j	13078 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x178c>
   11da0:	0a012c27          	fsw	ft0,184(sp)
   11da4:	00813603          	ld	a2,8(sp)
   11da8:	01765593          	srl	a1,a2,0x17
   11dac:	0015f593          	and	a1,a1,1
   11db0:	00058463          	beqz	a1,11db8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4cc>
   11db4:	2b80106f          	j	1306c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1780>
   11db8:	0aa12e27          	fsw	fa0,188(sp)
   11dbc:	01755513          	srl	a0,a0,0x17
   11dc0:	00157513          	and	a0,a0,1
   11dc4:	00050463          	beqz	a0,11dcc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4e0>
   11dc8:	2980106f          	j	13060 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1774>
   11dcc:	0cb12027          	fsw	fa1,192(sp)
   11dd0:	017ede93          	srl	t4,t4,0x17
   11dd4:	001efe93          	and	t4,t4,1
   11dd8:	000e8463          	beqz	t4,11de0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4f4>
   11ddc:	2780106f          	j	13054 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1768>
   11de0:	0cc12227          	fsw	fa2,196(sp)
   11de4:	017e5e13          	srl	t3,t3,0x17
   11de8:	000e0463          	beqz	t3,11df0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x504>
   11dec:	25c0106f          	j	13048 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x175c>
   11df0:	0cd12427          	fsw	fa3,200(sp)
   11df4:	0172d293          	srl	t0,t0,0x17
   11df8:	0012f293          	and	t0,t0,1
   11dfc:	00028463          	beqz	t0,11e04 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x518>
   11e00:	9087a787          	flw	fa5,-1784(a5)
	e[0] *= v[0];
   11e04:	00019637          	lui	a2,0x19
   11e08:	0cf12627          	fsw	fa5,204(sp)
   11e0c:	90c62787          	flw	fa5,-1780(a2) # 1890c <__DATA_BEGIN__+0x4>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11e10:	00019637          	lui	a2,0x19
   11e14:	20528dd3          	fmv.s	fs11,ft5
	e[0] *= v[0];
   11e18:	08f12027          	fsw	fa5,128(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11e1c:	91862787          	flw	fa5,-1768(a2) # 18918 <__DATA_BEGIN__+0x10>
   11e20:	00019637          	lui	a2,0x19
   11e24:	20630b53          	fmv.s	fs6,ft6
   11e28:	08f12227          	fsw	fa5,132(sp)
   11e2c:	92062787          	flw	fa5,-1760(a2) # 18920 <__DATA_BEGIN__+0x18>
   11e30:	00019637          	lui	a2,0x19
   11e34:	20738c53          	fmv.s	fs8,ft7
   11e38:	08f12427          	fsw	fa5,136(sp)
   11e3c:	92462787          	flw	fa5,-1756(a2) # 18924 <__DATA_BEGIN__+0x1c>
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   11e40:	000193b7          	lui	t2,0x19
   11e44:	fff00313          	li	t1,-1
   11e48:	08f12627          	fsw	fa5,140(sp)
   11e4c:	00100e93          	li	t4,1
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11e50:	fffe8f9b          	addw	t6,t4,-1
   11e54:	020f9593          	sll	a1,t6,0x20
   11e58:	0205d593          	srl	a1,a1,0x20
   11e5c:	00159613          	sll	a2,a1,0x1
   11e60:	00b60633          	add	a2,a2,a1
   11e64:	00261613          	sll	a2,a2,0x2
   11e68:	0e010593          	add	a1,sp,224
   11e6c:	44060613          	add	a2,a2,1088
   11e70:	00b60633          	add	a2,a2,a1
   11e74:	bd062583          	lw	a1,-1072(a2)
		if(current_node_entry.t >= hit.t) continue;
   11e78:	00092b87          	flw	fs7,0(s2)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11e7c:	bd462503          	lw	a0,-1068(a2)
		if(current_node_entry.t >= hit.t) continue;
   11e80:	f00587d3          	fmv.w.x	fa5,a1
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11e84:	bd862803          	lw	a6,-1064(a2)
   11e88:	0eb12023          	sw	a1,224(sp)
		if(current_node_entry.t >= hit.t) continue;
   11e8c:	a0fb8653          	fle.s	a2,fs7,fa5
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   11e90:	0ea12223          	sw	a0,228(sp)
   11e94:	0f012423          	sw	a6,232(sp)
		if(current_node_entry.t >= hit.t) continue;
   11e98:	4a0610e3          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
		uint32_t node_index = current_node_entry.node_index;
   11e9c:	0e013503          	ld	a0,224(sp)
		uint32_t dbs = current_node_entry.dbs;
   11ea0:	0008061b          	sext.w	a2,a6
		uint32_t lod = current_node_entry.lod;
   11ea4:	03a55e13          	srl	t3,a0,0x3a
		uint32_t node_index = current_node_entry.node_index;
   11ea8:	00651293          	sll	t0,a0,0x6
		uint32_t lod = current_node_entry.lod;
   11eac:	00fe7a93          	and	s5,t3,15
		uint32_t node_index = current_node_entry.node_index;
   11eb0:	0262d293          	srl	t0,t0,0x26
		uint32_t lod = current_node_entry.lod;
   11eb4:	000a8e13          	mv	t3,s5
		uint32_t tri_type = current_node_entry.tri_type;
   11eb8:	03e55513          	srl	a0,a0,0x3e
		if(lod == 0)
   11ebc:	6a0a94e3          	bnez	s5,12d64 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1478>
	e[0] = v[0];
   11ec0:	0ac12787          	flw	fa5,172(sp)
			if(data.last_patch_index != ~0) tri_stack[0].shared_edge = find_shared_edge(data.tes_tree.vertex_indices[patch_index], previous_patch_indices);
   11ec4:	fff00593          	li	a1,-1
   11ec8:	20f12827          	fsw	fa5,528(sp)
	e[1] = v[1];
   11ecc:	0b012787          	flw	fa5,176(sp)
   11ed0:	20f12a27          	fsw	fa5,532(sp)
	e[2] = v[2];
   11ed4:	0b412787          	flw	fa5,180(sp)
   11ed8:	20f12c27          	fsw	fa5,536(sp)
	e[0] = v[0];
   11edc:	0b812787          	flw	fa5,184(sp)
   11ee0:	20f12e27          	fsw	fa5,540(sp)
	e[1] = v[1];
   11ee4:	0bc12787          	flw	fa5,188(sp)
   11ee8:	22f12027          	fsw	fa5,544(sp)
	e[2] = v[2];
   11eec:	0c012787          	flw	fa5,192(sp)
   11ef0:	22f12227          	fsw	fa5,548(sp)
	e[0] = v[0];
   11ef4:	0c412787          	flw	fa5,196(sp)
   11ef8:	22f12427          	fsw	fa5,552(sp)
	e[1] = v[1];
   11efc:	0c812787          	flw	fa5,200(sp)
   11f00:	22f12627          	fsw	fa5,556(sp)
	e[2] = v[2];
   11f04:	0cc12787          	flw	fa5,204(sp)
   11f08:	22f12827          	fsw	fa5,560(sp)
   11f0c:	00bd1463          	bne	s10,a1,11f14 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x628>
   11f10:	0600106f          	j	12f70 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1684>
   11f14:	0d813583          	ld	a1,216(sp)
   11f18:	018db503          	ld	a0,24(s11)
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   11f1c:	05813803          	ld	a6,88(sp)
   11f20:	00b50533          	add	a0,a0,a1
	uvec3(uint32_t i, uint32_t j, uint32_t k) { e[0] = i; e[1] = j;  e[2] = k; }

	uint32_t operator[](int i) const { return e[i]; }
   11f24:	00052583          	lw	a1,0(a0)
   11f28:	00b81463          	bne	a6,a1,11f30 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x644>
   11f2c:	2a40106f          	j	131d0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18e4>
   11f30:	06013803          	ld	a6,96(sp)
   11f34:	00b81463          	bne	a6,a1,11f3c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x650>
   11f38:	2dc0106f          	j	13214 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1928>
   11f3c:	06813883          	ld	a7,104(sp)
   11f40:	00452803          	lw	a6,4(a0)
   11f44:	00852503          	lw	a0,8(a0)
   11f48:	40b885b3          	sub	a1,a7,a1
   11f4c:	05813883          	ld	a7,88(sp)
   11f50:	0015b593          	seqz	a1,a1
   11f54:	01089463          	bne	a7,a6,11f5c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x670>
   11f58:	2000106f          	j	13158 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x186c>
   11f5c:	06013883          	ld	a7,96(sp)
   11f60:	01089463          	bne	a7,a6,11f68 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x67c>
   11f64:	1f40106f          	j	13158 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x186c>
   11f68:	06813883          	ld	a7,104(sp)
   11f6c:	01089463          	bne	a7,a6,11f74 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x688>
   11f70:	1e80106f          	j	13158 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x186c>
   11f74:	05813803          	ld	a6,88(sp)
   11f78:	00a81463          	bne	a6,a0,11f80 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x694>
   11f7c:	2380106f          	j	131b4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18c8>
   11f80:	06013803          	ld	a6,96(sp)
   11f84:	00a81463          	bne	a6,a0,11f8c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a0>
   11f88:	22c0106f          	j	131b4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18c8>
   11f8c:	00a89463          	bne	a7,a0,11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   11f90:	2240106f          	j	131b4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18c8>
   11f94:	00300813          	li	a6,3
   11f98:	21010593          	add	a1,sp,528
   11f9c:	25010c23          	sb	a6,600(sp)
   11fa0:	00058513          	mv	a0,a1
   11fa4:	00000e13          	li	t3,0
		bool edge_mask[3] = {patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 0, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 1, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 2};
   11fa8:	699d00e3          	beq	s10,s9,12e28 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x153c>
   11fac:	04c00813          	li	a6,76
   11fb0:	030a8833          	mul	a6,s5,a6
   11fb4:	0e010893          	add	a7,sp,224
   11fb8:	44080813          	add	a6,a6,1088
   11fbc:	01180833          	add	a6,a6,a7
   11fc0:	d3884883          	lbu	a7,-712(a6)
   11fc4:	fff88b13          	add	s6,a7,-1
   11fc8:	ffe88a13          	add	s4,a7,-2
   11fcc:	001b3b13          	seqz	s6,s6
   11fd0:	0018b893          	seqz	a7,a7
   11fd4:	001a3a13          	seqz	s4,s4
		glm::vec3 edge_states = evalute_deformation_bounds(dbs, max_db_over_max_error, tri_stack[lod].tri, data.last_ray, ray, edge_mask);
   11fd8:	04813803          	ld	a6,72(sp)
	inline float operator[](int i) const { return e[i]; }
   11fdc:	00452e07          	flw	ft8,4(a0)
   11fe0:	01052587          	flw	fa1,16(a0)
   11fe4:	00883803          	ld	a6,8(a6)
   11fe8:	01c52087          	flw	ft1,28(a0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11fec:	0945f253          	fsub.s	ft4,fa1,fs4
	inline float operator[](int i) const { return e[i]; }
   11ff0:	00482787          	flw	fa5,4(a6)
   11ff4:	01482607          	flw	fa2,20(a6)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   11ff8:	0940f353          	fsub.s	ft6,ft1,fs4
   11ffc:	08fe72d3          	fsub.s	ft5,ft8,fa5
	inline float operator[](int i) const { return e[i]; }
   12000:	00082707          	flw	fa4,0(a6)
   12004:	00052e87          	flw	ft9,0(a0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12008:	094e7053          	fsub.s	ft0,ft8,fs4
   1200c:	08f5f6d3          	fsub.s	fa3,fa1,fa5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12010:	10c2f2d3          	fmul.s	ft5,ft5,fa2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12014:	08eef453          	fsub.s	fs0,ft9,fa4
   12018:	08f0f7d3          	fsub.s	fa5,ft1,fa5
	inline float operator[](int i) const { return e[i]; }
   1201c:	00882387          	flw	ft7,8(a6)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12020:	104b7853          	fmul.s	fa6,fs6,ft4
	inline float operator[](int i) const { return e[i]; }
   12024:	01452f07          	flw	ft10,20(a0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12028:	02412c27          	fsw	ft4,56(sp)
   1202c:	02612427          	fsw	ft6,40(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12030:	106b7253          	fmul.s	ft4,fs6,ft6
	inline float operator[](int i) const { return e[i]; }
   12034:	01082307          	flw	ft6,16(a6)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12038:	099effd3          	fsub.s	ft11,ft9,fs9
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1203c:	100b71d3          	fmul.s	ft3,fs6,ft0
	inline float operator[](int i) const { return e[i]; }
   12040:	00c52507          	flw	fa0,12(a0)
   12044:	01852107          	flw	ft2,24(a0)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12048:	28647443          	fmadd.s	fs0,fs0,ft6,ft5
   1204c:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   12050:	10c7f7d3          	fmul.s	fa5,fa5,fa2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12054:	087f72d3          	fsub.s	ft5,ft10,ft7
	inline float operator[](int i) const { return e[i]; }
   12058:	00852607          	flw	fa2,8(a0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1205c:	099574d3          	fsub.s	fs1,fa0,fs9
   12060:	09917d53          	fsub.s	fs10,ft2,fs9
   12064:	08e578d3          	fsub.s	fa7,fa0,fa4
   12068:	08e17753          	fsub.s	fa4,ft2,fa4
   1206c:	19fc71c3          	fmadd.s	ft3,fs8,ft11,ft3
   12070:	00012c27          	fsw	ft0,24(sp)
   12074:	01f12827          	fsw	ft11,16(sp)
	inline float operator[](int i) const { return e[i]; }
   12078:	02052007          	flw	ft0,32(a0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1207c:	08767fd3          	fsub.s	ft11,fa2,ft7
   12080:	00512427          	fsw	ft5,8(sp)
	inline float operator[](int i) const { return e[i]; }
   12084:	01882287          	flw	ft5,24(a6)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12088:	691378c3          	fmadd.s	fa7,ft6,fa7,fa3
   1208c:	809c7843          	fmadd.s	fa6,fs8,fs1,fa6
   12090:	78e37343          	fmadd.s	ft6,ft6,fa4,fa5
   12094:	21ac7243          	fmadd.s	ft4,fs8,fs10,ft4
	glm::vec3 fdbs((float)(qdb >> 00 & 0x3ff), (float)(qdb >> 10 & 0x3ff), (float)(qdb >> 20 & 0x3ff));
   12098:	00a6599b          	srlw	s3,a2,0xa
   1209c:	01465f1b          	srlw	t5,a2,0x14
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   120a0:	095679d3          	fsub.s	fs3,fa2,fs5
   120a4:	095f7953          	fsub.s	fs2,ft10,fs5
   120a8:	087073d3          	fsub.s	ft7,ft0,ft7
   120ac:	02912227          	fsw	fs1,36(sp)
   120b0:	095074d3          	fsub.s	fs1,ft0,fs5
   120b4:	3ff67613          	and	a2,a2,1023
   120b8:	3ff9f993          	and	s3,s3,1023
   120bc:	3fff7f13          	and	t5,t5,1023
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   120c0:	405fffc3          	fmadd.s	ft11,ft11,ft5,fs0
   120c4:	d00676d3          	fcvt.s.w	fa3,a2
   120c8:	d009f753          	fcvt.s.w	fa4,s3
   120cc:	d00f77d3          	fcvt.s.w	fa5,t5
   120d0:	00812407          	flw	fs0,8(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   120d4:	03a12027          	fsw	fs10,32(sp)
	e[0] *= v[0];
   120d8:	08012d07          	flw	fs10,128(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   120dc:	8882f8c3          	fmadd.s	fa7,ft5,fs0,fa7
   120e0:	193df1c3          	fmadd.s	ft3,fs11,fs3,ft3
	e[0] *= v[0];
   120e4:	11a6f6d3          	fmul.s	fa3,fa3,fs10
	e[1] *= v[1];
   120e8:	11a77753          	fmul.s	fa4,fa4,fs10
	e[2] *= v[2];
   120ec:	11a7f7d3          	fmul.s	fa5,fa5,fs10
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   120f0:	812df843          	fmadd.s	fa6,fs11,fs2,fa6
   120f4:	209df243          	fmadd.s	ft4,fs11,fs1,ft4
   120f8:	3072f2c3          	fmadd.s	ft5,ft5,ft7,ft6
	if(edge_mask[0]) r[0] = std::min(last_dlen[1], last_dlen[2]) * last_ray.drdt + last_ray.radius;
   120fc:	52088ee3          	beqz	a7,12e38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x154c>
   12100:	28588353          	fmin.s	ft6,fa7,ft5
   12104:	02082387          	flw	ft7,32(a6)
   12108:	02482407          	flw	fs0,36(a6)
   1210c:	4063f343          	fmadd.s	ft6,ft7,ft6,fs0
	if(edge_mask[1]) r[1] = std::min(last_dlen[2], last_dlen[0]) * last_ray.drdt + last_ray.radius;
   12110:	420b06e3          	beqz	s6,12d3c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1450>
   12114:	285f82d3          	fmin.s	ft5,ft11,ft5
   12118:	02082207          	flw	ft4,32(a6)
   1211c:	02482387          	flw	ft7,36(a6)
   12120:	385272c3          	fmadd.s	ft5,ft4,ft5,ft7
	if(edge_mask[2]) r[2] = std::min(last_dlen[0], last_dlen[1]) * last_ray.drdt + last_ray.radius;
   12124:	420a06e3          	beqz	s4,12d50 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1464>
   12128:	291f8fd3          	fmin.s	ft11,ft11,fa7
   1212c:	02082187          	flw	ft3,32(a6)
   12130:	02482387          	flw	ft7,36(a6)
   12134:	39f1f3c3          	fmadd.s	ft7,ft3,ft11,ft7
	asm volatile("frcp.s %0,%1\n\t" 
   12138:	60037353          	frcp.s	ft6,ft6
   1213c:	6002f2d3          	frcp.s	ft5,ft5
   12140:	6003f3d3          	frcp.s	ft7,ft7
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   12144:	10d6f6d3          	fmul.s	fa3,fa3,fa3
   12148:	05412807          	flw	fa6,84(sp)
   1214c:	10e77753          	fmul.s	fa4,fa4,fa4
   12150:	10f7f7d3          	fmul.s	fa5,fa5,fa5
      if (__a < __b)
   12154:	9087a207          	flw	ft4,-1784(a5)
   12158:	1106f6d3          	fmul.s	fa3,fa3,fa6
   1215c:	f00001d3          	fmv.w.x	ft3,zero
   12160:	11077753          	fmul.s	fa4,fa4,fa6
   12164:	1107f7d3          	fmul.s	fa5,fa5,fa6
   12168:	1066f6d3          	fmul.s	fa3,fa3,ft6
   1216c:	10577753          	fmul.s	fa4,fa4,ft5
   12170:	1077f7d3          	fmul.s	fa5,fa5,ft7
   12174:	a0469653          	flt.s	a2,fa3,ft4
   12178:	00061663          	bnez	a2,12184 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x898>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1217c:	0846f1d3          	fsub.s	ft3,fa3,ft4
   12180:	284181d3          	fmin.s	ft3,ft3,ft4
   12184:	9087a207          	flw	ft4,-1784(a5)
   12188:	f00006d3          	fmv.w.x	fa3,zero
   1218c:	a0471653          	flt.s	a2,fa4,ft4
   12190:	00061663          	bnez	a2,1219c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x8b0>
   12194:	084776d3          	fsub.s	fa3,fa4,ft4
   12198:	284686d3          	fmin.s	fa3,fa3,ft4
   1219c:	9087a207          	flw	ft4,-1784(a5)
   121a0:	f0000753          	fmv.w.x	fa4,zero
   121a4:	a0479653          	flt.s	a2,fa5,ft4
   121a8:	00061663          	bnez	a2,121b4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x8c8>
   121ac:	0847f753          	fsub.s	fa4,fa5,ft4
   121b0:	28470753          	fmin.s	fa4,fa4,ft4
		if(edge_states[0] <= 0.0f && edge_states[1] <= 0.0f && edge_states[2] <= 0.0f)
   121b4:	f00007d3          	fmv.w.x	fa5,zero
   121b8:	a0f18653          	fle.s	a2,ft3,fa5
   121bc:	00060a63          	beqz	a2,121d0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x8e4>
   121c0:	a0f68653          	fle.s	a2,fa3,fa5
   121c4:	00060663          	beqz	a2,121d0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x8e4>
   121c8:	a0f70653          	fle.s	a2,fa4,fa5
   121cc:	7e061e63          	bnez	a2,129c8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x10dc>
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   121d0:	00017637          	lui	a2,0x17
   121d4:	002a9813          	sll	a6,s5,0x2
   121d8:	45060613          	add	a2,a2,1104 # 17450 <_ZL15lod_node_offset>
   121dc:	01060633          	add	a2,a2,a6
   121e0:	00062883          	lw	a7,0(a2)
   121e4:	07813603          	ld	a2,120(sp)
   121e8:	020a9b13          	sll	s6,s5,0x20
   121ec:	005888bb          	addw	a7,a7,t0
		move_to_stack(new_tri, triangles[absoulte_node_index]);
   121f0:	02089893          	sll	a7,a7,0x20
   121f4:	0208d893          	srl	a7,a7,0x20
   121f8:	01160f33          	add	t5,a2,a7
		uint64_t r = ((uint64_t*)&src)[i];
   121fc:	07013603          	ld	a2,112(sp)
   12200:	005f1f13          	sll	t5,t5,0x5
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   12204:	020b5b13          	srl	s6,s6,0x20
   12208:	01e60f33          	add	t5,a2,t5
   1220c:	000f3803          	ld	a6,0(t5)
   12210:	008f3603          	ld	a2,8(t5)
   12214:	010f3a03          	ld	s4,16(t5)
	float f0 = u24_to_f32(dw0 & 0xffffff);
   12218:	0008099b          	sext.w	s3,a6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1221c:	0179db93          	srl	s7,s3,0x17
   12220:	001bfb93          	and	s7,s7,1
		uint64_t r = ((uint64_t*)&src)[i];
   12224:	018f3f03          	ld	t5,24(t5)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   12228:	460b92e3          	bnez	s7,12e8c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x15a0>
   1222c:	02899993          	sll	s3,s3,0x28
   12230:	0289d993          	srl	s3,s3,0x28
   12234:	3f800bb7          	lui	s7,0x3f800
	return *((float*)&u);
   12238:	0179e9b3          	or	s3,s3,s7
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1223c:	91072207          	flw	ft4,-1776(a4)
   12240:	9146a787          	flw	fa5,-1772(a3)
   12244:	f00982d3          	fmv.w.x	ft5,s3
   12248:	7842ffc3          	fmadd.s	ft11,ft5,ft4,fa5
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   1224c:	01885993          	srl	s3,a6,0x18
   12250:	0009899b          	sext.w	s3,s3
   12254:	0179db93          	srl	s7,s3,0x17
   12258:	001bfb93          	and	s7,s7,1
   1225c:	420b94e3          	bnez	s7,12e84 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1598>
   12260:	02899993          	sll	s3,s3,0x28
   12264:	0289d993          	srl	s3,s3,0x28
   12268:	3f800bb7          	lui	s7,0x3f800
	return *((float*)&u);
   1226c:	0179e9b3          	or	s3,s3,s7
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   12270:	91072207          	flw	ft4,-1776(a4)
   12274:	9146a787          	flw	fa5,-1772(a3)
   12278:	f00982d3          	fmv.w.x	ft5,s3
   1227c:	7842f843          	fmadd.s	fa6,ft5,ft4,fa5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   12280:	0106199b          	sllw	s3,a2,0x10
   12284:	03085813          	srl	a6,a6,0x30
   12288:	01386833          	or	a6,a6,s3
   1228c:	0008081b          	sext.w	a6,a6
   12290:	01785993          	srl	s3,a6,0x17
   12294:	0019f993          	and	s3,s3,1
   12298:	3e0992e3          	bnez	s3,12e7c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1590>
   1229c:	02881813          	sll	a6,a6,0x28
   122a0:	02885813          	srl	a6,a6,0x28
   122a4:	3f8009b7          	lui	s3,0x3f800
	return *((float*)&u);
   122a8:	01386833          	or	a6,a6,s3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   122ac:	91072207          	flw	ft4,-1776(a4)
   122b0:	9146a787          	flw	fa5,-1772(a3)
   122b4:	f00802d3          	fmv.w.x	ft5,a6
   122b8:	7842f243          	fmadd.s	ft4,ft5,ft4,fa5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   122bc:	00865813          	srl	a6,a2,0x8
   122c0:	0008081b          	sext.w	a6,a6
   122c4:	01785993          	srl	s3,a6,0x17
   122c8:	0019f993          	and	s3,s3,1
   122cc:	3a0994e3          	bnez	s3,12e74 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1588>
   122d0:	02881813          	sll	a6,a6,0x28
   122d4:	02885813          	srl	a6,a6,0x28
   122d8:	3f8009b7          	lui	s3,0x3f800
	return *((float*)&u);
   122dc:	01386833          	or	a6,a6,s3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   122e0:	91072287          	flw	ft5,-1776(a4)
   122e4:	9146a787          	flw	fa5,-1772(a3)
   122e8:	f0080353          	fmv.w.x	ft6,a6
   122ec:	785373c3          	fmadd.s	ft7,ft6,ft5,fa5
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   122f0:	42065813          	sra	a6,a2,0x20
   122f4:	01785993          	srl	s3,a6,0x17
   122f8:	0019f993          	and	s3,s3,1
   122fc:	360998e3          	bnez	s3,12e6c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1580>
   12300:	02881813          	sll	a6,a6,0x28
   12304:	02885813          	srl	a6,a6,0x28
   12308:	3f8009b7          	lui	s3,0x3f800
	return *((float*)&u);
   1230c:	01386833          	or	a6,a6,s3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   12310:	91072287          	flw	ft5,-1776(a4)
   12314:	9146a787          	flw	fa5,-1772(a3)
   12318:	f0080353          	fmv.w.x	ft6,a6
   1231c:	785378c3          	fmadd.s	fa7,ft6,ft5,fa5
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   12320:	008a181b          	sllw	a6,s4,0x8
   12324:	03865613          	srl	a2,a2,0x38
   12328:	01066633          	or	a2,a2,a6
   1232c:	0006061b          	sext.w	a2,a2
   12330:	01765813          	srl	a6,a2,0x17
   12334:	00187813          	and	a6,a6,1
   12338:	320816e3          	bnez	a6,12e64 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1578>
   1233c:	02861613          	sll	a2,a2,0x28
   12340:	02865613          	srl	a2,a2,0x28
   12344:	3f800837          	lui	a6,0x3f800
	return *((float*)&u);
   12348:	01066633          	or	a2,a2,a6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1234c:	91072287          	flw	ft5,-1776(a4)
   12350:	9146a787          	flw	fa5,-1772(a3)
   12354:	f0060353          	fmv.w.x	ft6,a2
   12358:	785377c3          	fmadd.s	fa5,ft6,ft5,fa5
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   1235c:	010a5613          	srl	a2,s4,0x10
   12360:	0006061b          	sext.w	a2,a2
   12364:	01765813          	srl	a6,a2,0x17
   12368:	00187813          	and	a6,a6,1
   1236c:	2e0818e3          	bnez	a6,12e5c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1570>
   12370:	02861613          	sll	a2,a2,0x28
   12374:	02865613          	srl	a2,a2,0x28
   12378:	3f800837          	lui	a6,0x3f800
	return *((float*)&u);
   1237c:	01066633          	or	a2,a2,a6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   12380:	91072307          	flw	ft6,-1776(a4)
   12384:	9146a287          	flw	ft5,-1772(a3)
   12388:	f0060453          	fmv.w.x	fs0,a2
   1238c:	28647343          	fmadd.s	ft6,fs0,ft6,ft5
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   12390:	028a5613          	srl	a2,s4,0x28
   12394:	2c0a40e3          	bltz	s4,12e54 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1568>
   12398:	3f800837          	lui	a6,0x3f800
	return *((float*)&u);
   1239c:	01066633          	or	a2,a2,a6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   123a0:	91072407          	flw	fs0,-1776(a4)
   123a4:	9146a287          	flw	ft5,-1772(a3)
   123a8:	f00604d3          	fmv.w.x	fs1,a2
   123ac:	2884f443          	fmadd.s	fs0,fs1,fs0,ft5
	float f8 = u24_to_f32(dw3 & 0xffffff);
   123b0:	000f0f1b          	sext.w	t5,t5
   123b4:	017f5613          	srl	a2,t5,0x17
   123b8:	00167613          	and	a2,a2,1
   123bc:	280618e3          	bnez	a2,12e4c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1560>
   123c0:	028f1f13          	sll	t5,t5,0x28
   123c4:	028f5f13          	srl	t5,t5,0x28
   123c8:	3f800637          	lui	a2,0x3f800
	return *((float*)&u);
   123cc:	00cf6f33          	or	t5,t5,a2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   123d0:	91072487          	flw	fs1,-1776(a4)
   123d4:	9146a287          	flw	ft5,-1772(a3)
   123d8:	f00f0953          	fmv.w.x	fs2,t5
   123dc:	289972c3          	fmadd.s	ft5,fs2,fs1,ft5
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   123e0:	002579d3          	fadd.s	fs3,fa0,ft2
   123e4:	0015f953          	fadd.s	fs2,fa1,ft1
   123e8:	000f74d3          	fadd.s	fs1,ft10,ft0
   123ec:	002ef153          	fadd.s	ft2,ft9,ft2
   123f0:	001e70d3          	fadd.s	ft1,ft8,ft1
   123f4:	00067053          	fadd.s	ft0,fa2,ft0
   123f8:	00aef553          	fadd.s	fa0,ft9,fa0
   123fc:	00be75d3          	fadd.s	fa1,ft8,fa1
   12400:	01e67653          	fadd.s	fa2,fa2,ft10
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12404:	08412e87          	flw	ft9,132(sp)
class Triangle
   12408:	024e0e13          	add	t3,t3,36
   1240c:	01c585b3          	add	a1,a1,t3
   12410:	39d173cb          	fnmsub.s	ft7,ft2,ft9,ft7
   12414:	89d0f8cb          	fnmsub.s	fa7,ft1,ft9,fa7
   12418:	31d5734b          	fnmsub.s	ft6,fa0,ft9,ft6
   1241c:	41d5f44b          	fnmsub.s	fs0,fa1,ft9,fs0
   12420:	29d672cb          	fnmsub.s	ft5,fa2,ft9,ft5
   12424:	f9d9ffcb          	fnmsub.s	ft11,fs3,ft9,ft11
   12428:	81d9784b          	fnmsub.s	fa6,fs2,ft9,fa6
   1242c:	21d4f24b          	fnmsub.s	ft4,fs1,ft9,ft4
   12430:	79d077cb          	fnmsub.s	fa5,ft0,ft9,fa5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   12434:	10d8f8d3          	fmul.s	fa7,fa7,fa3
   12438:	103fffd3          	fmul.s	ft11,ft11,ft3
   1243c:	10387853          	fmul.s	fa6,fa6,ft3
   12440:	10327253          	fmul.s	ft4,ft4,ft3
   12444:	10d7f7d3          	fmul.s	fa5,fa5,fa3
   12448:	10d3f3d3          	fmul.s	ft7,ft7,fa3
   1244c:	10e47453          	fmul.s	fs0,fs0,fa4
   12450:	10e2f2d3          	fmul.s	ft5,ft5,fa4
   12454:	10e37353          	fmul.s	ft6,ft6,fa4
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   12458:	f9d9fe43          	fmadd.s	ft8,fs3,ft9,ft11
   1245c:	81d97843          	fmadd.s	fa6,fs2,ft9,fa6
   12460:	21d4f243          	fmadd.s	ft4,fs1,ft9,ft4
   12464:	39d17143          	fmadd.s	ft2,ft2,ft9,ft7
   12468:	89d0f0c3          	fmadd.s	ft1,ft1,ft9,fa7
   1246c:	79d077c3          	fmadd.s	fa5,ft0,ft9,fa5
   12470:	31d57543          	fmadd.s	fa0,fa0,ft9,ft6
   12474:	41d5f5c3          	fmadd.s	fa1,fa1,ft9,fs0
   12478:	29d67643          	fmadd.s	fa2,fa2,ft9,ft5
   1247c:	03c12e27          	fsw	ft8,60(sp)
   12480:	05012027          	fsw	fa6,64(sp)
   12484:	04412227          	fsw	ft4,68(sp)
   12488:	02212027          	fsw	ft2,32(sp)
   1248c:	02112227          	fsw	ft1,36(sp)
   12490:	02f12c27          	fsw	fa5,56(sp)
   12494:	00a12427          	fsw	fa0,8(sp)
   12498:	00b12827          	fsw	fa1,16(sp)
   1249c:	00c12c27          	fsw	fa2,24(sp)
	e[0] = v[0];
   124a0:	01c5a027          	fsw	ft8,0(a1)
	e[1] = v[1];
   124a4:	0105a227          	fsw	fa6,4(a1)
	e[2] = v[2];
   124a8:	0045a427          	fsw	ft4,8(a1)
	e[0] = v[0];
   124ac:	0025a627          	fsw	ft2,12(a1)
	e[1] = v[1];
   124b0:	0015a827          	fsw	ft1,16(a1)
	e[2] = v[2];
   124b4:	00f5aa27          	fsw	fa5,20(a1)
	e[0] = v[0];
   124b8:	00a5ac27          	fsw	fa0,24(a1)
	e[1] = v[1];
   124bc:	00b5ae27          	fsw	fa1,28(a1)
	e[2] = v[2];
   124c0:	02c5a027          	fsw	fa2,32(a1)
		uint32_t next_level = lod + 1;
   124c4:	001a8a13          	add	s4,s5,1
		uint32_t first_child_index = node_index << 2; //compute first child idnex
   124c8:	00229293          	sll	t0,t0,0x2
		if(next_level == header.last_lod) //leaf node
   124cc:	674c0c63          	beq	s8,s4,12b44 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1258>
				}
			}
		}
		else //interior node
		{
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   124d0:	9087a787          	flw	fa5,-1784(a5)
   124d4:	00100993          	li	s3,1
   124d8:	a0f19653          	flt.s	a2,ft3,fa5
   124dc:	00061e63          	bnez	a2,124f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xc0c>
   124e0:	a0f69653          	flt.s	a2,fa3,fa5
   124e4:	00061a63          	bnez	a2,124f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xc0c>
   124e8:	a0f71653          	flt.s	a2,fa4,fa5
   124ec:	00061663          	bnez	a2,124f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xc0c>
   124f0:	00000993          	li	s3,0
   124f4:	3a0a9ae3          	bnez	s5,130a8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17bc>
   124f8:	04c00593          	li	a1,76
   124fc:	02bb05b3          	mul	a1,s6,a1
		uint64_t r = ((uint64_t*)&src)[i];
   12500:	0a013603          	ld	a2,160(sp)
   12504:	09813803          	ld	a6,152(sp)
   12508:	00c4a207          	flw	ft4,12(s1)
   1250c:	01160633          	add	a2,a2,a7
   12510:	00661613          	sll	a2,a2,0x6
   12514:	00c80633          	add	a2,a6,a2
   12518:	00863b83          	ld	s7,8(a2) # 3f800008 <__global_pointer$+0x3f7e6f00>
   1251c:	01063b03          	ld	s6,16(a2)
   12520:	01863a83          	ld	s5,24(a2)
   12524:	03063883          	ld	a7,48(a2)
   12528:	03863803          	ld	a6,56(a2)
   1252c:	02063f03          	ld	t5,32(a2)
   12530:	02863e03          	ld	t3,40(a2)
		((uint64_t*)&dst)[i] = r;
   12534:	00063603          	ld	a2,0(a2)
   12538:	44058593          	add	a1,a1,1088
      if (__b < __a)
   1253c:	01c4a187          	flw	ft3,28(s1)
   12540:	00c13023          	sd	a2,0(sp)
   12544:	0e010613          	add	a2,sp,224
   12548:	00c585b3          	add	a1,a1,a2
   1254c:	00013603          	ld	a2,0(sp)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   12550:	9087a007          	flw	ft0,-1784(a5)
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   12554:	91072107          	flw	ft2,-1776(a4)
   12558:	91c3a087          	flw	ft1,-1764(t2) # 1891c <__DATA_BEGIN__+0x14>
   1255c:	09012287          	flw	ft5,144(sp)
   12560:	09412307          	flw	ft6,148(sp)
   12564:	0a812387          	flw	ft7,168(sp)
   12568:	01812987          	flw	fs3,24(sp)
		((uint64_t*)&dst)[i] = r;
   1256c:	01743423          	sd	s7,8(s0)
   12570:	01643823          	sd	s6,16(s0)
   12574:	01543c23          	sd	s5,24(s0)
   12578:	03143823          	sd	a7,48(s0)
   1257c:	03043c23          	sd	a6,56(s0)
   12580:	d3358ca3          	sb	s3,-711(a1)
   12584:	00c43023          	sd	a2,0(s0)
   12588:	03e43023          	sd	t5,32(s0)
   1258c:	03c43423          	sd	t3,40(s0)
   12590:	00040813          	mv	a6,s0
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   12594:	000f8b93          	mv	s7,t6
   12598:	00000893          	li	a7,0
   1259c:	03b13423          	sd	s11,40(sp)
   125a0:	03a13823          	sd	s10,48(sp)
   125a4:	000a0b13          	mv	s6,s4
   125a8:	00028a93          	mv	s5,t0
   125ac:	00085603          	lhu	a2,0(a6) # 3f800000 <__global_pointer$+0x3f7e6ef8>
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   125b0:	200007d3          	fmv.s	fa5,ft0
   125b4:	00f65593          	srl	a1,a2,0xf
   125b8:	00059e63          	bnez	a1,125d4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xce8>
   125bc:	0086161b          	sllw	a2,a2,0x8
   125c0:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   125c4:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   125c8:	f00607d3          	fmv.w.x	fa5,a2
   125cc:	0807f7d3          	fsub.s	fa5,fa5,ft0
   125d0:	0827f7c3          	fmadd.s	fa5,fa5,ft2,ft1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   125d4:	00685603          	lhu	a2,6(a6)
   125d8:	20000553          	fmv.s	fa0,ft0
   125dc:	00f65593          	srl	a1,a2,0xf
   125e0:	00059e63          	bnez	a1,125fc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xd10>
   125e4:	0086161b          	sllw	a2,a2,0x8
   125e8:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   125ec:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   125f0:	f0060753          	fmv.w.x	fa4,a2
   125f4:	08077753          	fsub.s	fa4,fa4,ft0
   125f8:	08277543          	fmadd.s	fa0,fa4,ft2,ft1
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   125fc:	00285603          	lhu	a2,2(a6)
   12600:	20000653          	fmv.s	fa2,ft0
   12604:	00f65593          	srl	a1,a2,0xf
   12608:	00059e63          	bnez	a1,12624 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xd38>
   1260c:	0086161b          	sllw	a2,a2,0x8
   12610:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   12614:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   12618:	f0060753          	fmv.w.x	fa4,a2
   1261c:	08077753          	fsub.s	fa4,fa4,ft0
   12620:	08277643          	fmadd.s	fa2,fa4,ft2,ft1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   12624:	00885603          	lhu	a2,8(a6)
   12628:	00019e37          	lui	t3,0x19
   1262c:	908e2587          	flw	fa1,-1784(t3) # 18908 <__DATA_BEGIN__>
   12630:	00f65593          	srl	a1,a2,0xf
   12634:	02059663          	bnez	a1,12660 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xd74>
   12638:	3f8005b7          	lui	a1,0x3f800
   1263c:	0086161b          	sllw	a2,a2,0x8
	return *((float*)&u);
   12640:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   12644:	f0060753          	fmv.w.x	fa4,a2
   12648:	000195b7          	lui	a1,0x19
   1264c:	00019637          	lui	a2,0x19
   12650:	08b77753          	fsub.s	fa4,fa4,fa1
   12654:	91062687          	flw	fa3,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   12658:	91c5a587          	flw	fa1,-1764(a1) # 1891c <__DATA_BEGIN__+0x14>
   1265c:	58d775c3          	fmadd.s	fa1,fa4,fa3,fa1
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   12660:	00485603          	lhu	a2,4(a6)
   12664:	00019e37          	lui	t3,0x19
   12668:	908e2687          	flw	fa3,-1784(t3) # 18908 <__DATA_BEGIN__>
   1266c:	00f65593          	srl	a1,a2,0xf
   12670:	02059263          	bnez	a1,12694 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xda8>
   12674:	0086161b          	sllw	a2,a2,0x8
   12678:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   1267c:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   12680:	f0060753          	fmv.w.x	fa4,a2
   12684:	91c3a807          	flw	fa6,-1764(t2)
   12688:	08d77753          	fsub.s	fa4,fa4,fa3
   1268c:	91072687          	flw	fa3,-1776(a4)
   12690:	80d776c3          	fmadd.s	fa3,fa4,fa3,fa6
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   12694:	00a85603          	lhu	a2,10(a6)
   12698:	9087a707          	flw	fa4,-1784(a5)
   1269c:	00f65593          	srl	a1,a2,0xf
   126a0:	02059263          	bnez	a1,126c4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xdd8>
   126a4:	0086161b          	sllw	a2,a2,0x8
   126a8:	3f8005b7          	lui	a1,0x3f800
	return *((float*)&u);
   126ac:	00b66633          	or	a2,a2,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   126b0:	f0060853          	fmv.w.x	fa6,a2
   126b4:	91072887          	flw	fa7,-1776(a4)
   126b8:	08e87753          	fsub.s	fa4,fa6,fa4
   126bc:	91c3a807          	flw	fa6,-1764(t2)
   126c0:	81177743          	fmadd.s	fa4,fa4,fa7,fa6
			move_to_stack(node4, nodes[absoulte_node_index]);
			
			for(uint32_t i = 0; i < 4; ++i)
			{
				AABB aabb = decompress(node4.nodes[i].aabb);
				if(tri_stack[lod].child_transformed)
   126c4:	26099863          	bnez	s3,12934 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1048>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   126c8:	0997f7d3          	fsub.s	fa5,fa5,fs9
   126cc:	09467653          	fsub.s	fa2,fa2,fs4
   126d0:	09957553          	fsub.s	fa0,fa0,fs9
   126d4:	0945f5d3          	fsub.s	fa1,fa1,fs4
   126d8:	09577853          	fsub.s	fa6,fa4,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   126dc:	1077f7d3          	fmul.s	fa5,fa5,ft7
   126e0:	10667653          	fmul.s	fa2,fa2,ft6
   126e4:	10757553          	fmul.s	fa0,fa0,ft7
   126e8:	1065f5d3          	fmul.s	fa1,fa1,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   126ec:	0956f6d3          	fsub.s	fa3,fa3,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   126f0:	10587853          	fmul.s	fa6,fa6,ft5
   126f4:	28a78753          	fmin.s	fa4,fa5,fa0
   126f8:	28b608d3          	fmin.s	fa7,fa2,fa1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   126fc:	28a797d3          	fmax.s	fa5,fa5,fa0
   12700:	28b61653          	fmax.s	fa2,fa2,fa1
   12704:	1056f6d3          	fmul.s	fa3,fa3,ft5
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   12708:	29171753          	fmax.s	fa4,fa4,fa7
	if (tmin > tmax) return ray.t_max;//no hit || behind
   1270c:	28c787d3          	fmin.s	fa5,fa5,fa2
   12710:	28471753          	fmax.s	fa4,fa4,ft4
   12714:	29068653          	fmin.s	fa2,fa3,fa6
   12718:	283787d3          	fmin.s	fa5,fa5,ft3
   1271c:	290696d3          	fmax.s	fa3,fa3,fa6
   12720:	28c71753          	fmax.s	fa4,fa4,fa2
   12724:	28d787d3          	fmin.s	fa5,fa5,fa3
   12728:	a0e79653          	flt.s	a2,fa5,fa4
   1272c:	00060463          	beqz	a2,12734 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xe48>
   12730:	20318753          	fmv.s	fa4,ft3
				entry.t = intersect(aabb, ray, inv_d);
				entry.node_index = first_child_index + i;
				entry.lod = next_level;
				entry.tri_type = i;
				entry.dbs = node4.nodes[i].dbs;
				if(entry.t < hit.t) insert(entry, node_stack, node_stack_size++, temp_node_stack_size);
   12734:	a1771653          	flt.s	a2,fa4,fs7
   12738:	14061063          	bnez	a2,12878 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xf8c>
			for(uint32_t i = 0; i < 4; ++i)
   1273c:	00188893          	add	a7,a7,1
   12740:	00400613          	li	a2,4
   12744:	01080813          	add	a6,a6,16
   12748:	e6c892e3          	bne	a7,a2,125ac <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xcc0>
   1274c:	000b8e93          	mv	t4,s7
			}
		}
	} while(node_stack_size);
   12750:	02813d83          	ld	s11,40(sp)
   12754:	03013d03          	ld	s10,48(sp)
   12758:	ee0e9c63          	bnez	t4,11e50 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x564>

	//if we found a hit convert barycentric coords to max lod
	if(hit_lod != ~0u)
   1275c:	fff00713          	li	a4,-1
   12760:	0ae30263          	beq	t1,a4,12804 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xf18>
	{
	#if 1
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   12764:	0d013703          	ld	a4,208(sp)
   12768:	03c75593          	srl	a1,a4,0x3c
   1276c:	00c92703          	lw	a4,12(s2)
   12770:	08b37063          	bgeu	t1,a1,127f0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xf04>
		{
			uint32_t tri_type;
			hit.bc *= glm::vec2(2.0f);

			if(hit.bc.x > 1.0f)
   12774:	000196b7          	lui	a3,0x19
   12778:	9186a587          	flw	fa1,-1768(a3) # 18918 <__DATA_BEGIN__+0x10>
   1277c:	00892707          	flw	fa4,8(s2)
   12780:	00492787          	flw	fa5,4(s2)
			else if(hit.bc.y > 1.0f)
			{
				tri_type = 1;
				hit.bc -= glm::vec2(0.0f, 1.0f);
			}
			else if(hit.bc.x + hit.bc.y < 1.0f)
   12784:	9087a507          	flw	fa0,-1784(a5)
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   12788:	00030693          	mv	a3,t1
   1278c:	0240006f          	j	127b0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xec4>
	e[0] -= v[0];
   12790:	08a677d3          	fsub.s	fa5,fa2,fa0
	e[1] *= v.e[1];
   12794:	20d68753          	fmv.s	fa4,fa3
				tri_type = 0;
   12798:	00000793          	li	a5,0
			{
				tri_type = 3;
				hit.bc = glm::vec2(1.0f, 1.0f) - hit.bc;
			}

			hit.id <<= 2;
   1279c:	0027171b          	sllw	a4,a4,0x2
			hit.id |= tri_type;
   127a0:	00e7e7b3          	or	a5,a5,a4
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   127a4:	0016869b          	addw	a3,a3,1
			hit.id |= tri_type;
   127a8:	0007871b          	sext.w	a4,a5
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   127ac:	02d58e63          	beq	a1,a3,127e8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xefc>
			if(hit.bc.x > 1.0f)
   127b0:	a0f597d3          	flt.s	a5,fa1,fa5
	e[0] *= v.e[0];
   127b4:	00f7f653          	fadd.s	fa2,fa5,fa5
	e[1] *= v.e[1];
   127b8:	00e776d3          	fadd.s	fa3,fa4,fa4
			else if(hit.bc.y > 1.0f)
   127bc:	a0e59653          	flt.s	a2,fa1,fa4
			if(hit.bc.x > 1.0f)
   127c0:	fc0798e3          	bnez	a5,12790 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xea4>
			else if(hit.bc.y > 1.0f)
   127c4:	76060063          	beqz	a2,12f24 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1638>
			hit.id <<= 2;
   127c8:	0027171b          	sllw	a4,a4,0x2
				tri_type = 1;
   127cc:	00100793          	li	a5,1
			hit.id |= tri_type;
   127d0:	00e7e7b3          	or	a5,a5,a4
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   127d4:	0016869b          	addw	a3,a3,1
	e[1] -= v[1];
   127d8:	08a6f753          	fsub.s	fa4,fa3,fa0
	e[0] *= v.e[0];
   127dc:	20c607d3          	fmv.s	fa5,fa2
			hit.id |= tri_type;
   127e0:	0007871b          	sext.w	a4,a5
		for(uint32_t i = hit_lod; i <  header.last_lod; ++i)
   127e4:	fcd596e3          	bne	a1,a3,127b0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xec4>
   127e8:	00e92427          	fsw	fa4,8(s2)
   127ec:	00f92227          	fsw	fa5,4(s2)
		}
	#endif
		hit.id += header.id_offset;
   127f0:	0d013783          	ld	a5,208(sp)
   127f4:	00479793          	sll	a5,a5,0x4
   127f8:	0247d793          	srl	a5,a5,0x24
   127fc:	00e787bb          	addw	a5,a5,a4
   12800:	00f92623          	sw	a5,12(s2)
	}

	return hit_lod != ~0u;
   12804:	5b813083          	ld	ra,1464(sp)
   12808:	5b013403          	ld	s0,1456(sp)
	return hit_lod != ~0u;
   1280c:	00130513          	add	a0,t1,1 # 3f800001 <__global_pointer$+0x3f7e6ef9>
   12810:	5a813483          	ld	s1,1448(sp)
   12814:	5a013903          	ld	s2,1440(sp)
   12818:	59813983          	ld	s3,1432(sp)
   1281c:	59013a03          	ld	s4,1424(sp)
   12820:	58813a83          	ld	s5,1416(sp)
   12824:	58013b03          	ld	s6,1408(sp)
   12828:	57813b83          	ld	s7,1400(sp)
   1282c:	57013c03          	ld	s8,1392(sp)
   12830:	56813c83          	ld	s9,1384(sp)
   12834:	56013d03          	ld	s10,1376(sp)
   12838:	55813d83          	ld	s11,1368(sp)
   1283c:	54c12407          	flw	fs0,1356(sp)
   12840:	54812487          	flw	fs1,1352(sp)
   12844:	54412907          	flw	fs2,1348(sp)
   12848:	54012987          	flw	fs3,1344(sp)
   1284c:	53c12a07          	flw	fs4,1340(sp)
   12850:	53812a87          	flw	fs5,1336(sp)
   12854:	53412b07          	flw	fs6,1332(sp)
   12858:	53012b87          	flw	fs7,1328(sp)
   1285c:	52c12c07          	flw	fs8,1324(sp)
   12860:	52812c87          	flw	fs9,1320(sp)
   12864:	52412d07          	flw	fs10,1316(sp)
   12868:	52012d87          	flw	fs11,1312(sp)
	return hit_lod != ~0u;
   1286c:	00a03533          	snez	a0,a0
   12870:	5c010113          	add	sp,sp,1472
   12874:	00008067          	ret
				entry.dbs = node4.nodes[i].dbs;
   12878:	00c82f03          	lw	t5,12(a6)
				if(entry.t < hit.t) insert(entry, node_stack, node_stack_size++, temp_node_stack_size);
   1287c:	001b8e1b          	addw	t3,s7,1 # 3f800001 <__global_pointer$+0x3f7e6ef9>
	for(; j != min; --j)
   12880:	117f8ae3          	beq	t6,s7,13194 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18a8>
   12884:	0f010293          	add	t0,sp,240
   12888:	0200006f          	j	128a8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xfbc>
		stack[j] = stack[j - 1];
   1288c:	00062a03          	lw	s4,0(a2)
   12890:	0145a023          	sw	s4,0(a1) # 3f800000 <__global_pointer$+0x3f7e6ef8>
   12894:	00462a03          	lw	s4,4(a2)
   12898:	0145a223          	sw	s4,4(a1)
   1289c:	00862a03          	lw	s4,8(a2)
   128a0:	0145a423          	sw	s4,8(a1)
	for(; j != min; --j)
   128a4:	63ae8463          	beq	t4,s10,12ecc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x15e0>
		if(stack[j - 1].t >= entry.t) break;
   128a8:	fffb8a1b          	addw	s4,s7,-1
   128ac:	020a1593          	sll	a1,s4,0x20
   128b0:	0205d593          	srl	a1,a1,0x20
   128b4:	00159613          	sll	a2,a1,0x1
   128b8:	00b60633          	add	a2,a2,a1
   128bc:	00261613          	sll	a2,a2,0x2
   128c0:	00c28633          	add	a2,t0,a2
   128c4:	00062787          	flw	fa5,0(a2)
   128c8:	000b8d1b          	sext.w	s10,s7
		stack[j] = stack[j - 1];
   128cc:	020d1b93          	sll	s7,s10,0x20
   128d0:	020bdb93          	srl	s7,s7,0x20
   128d4:	001b9593          	sll	a1,s7,0x1
		if(stack[j - 1].t >= entry.t) break;
   128d8:	a0f70dd3          	fle.s	s11,fa4,fa5
		stack[j] = stack[j - 1];
   128dc:	017585b3          	add	a1,a1,s7
   128e0:	00259593          	sll	a1,a1,0x2
   128e4:	00b285b3          	add	a1,t0,a1
		if(stack[j - 1].t >= entry.t) break;
   128e8:	000a0b9b          	sext.w	s7,s4
   128ec:	fa0d80e3          	beqz	s11,1288c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xfa0>
	stack[j] = entry;
   128f0:	04000a37          	lui	s4,0x4000
   128f4:	fffa0a13          	add	s4,s4,-1 # 3ffffff <__global_pointer$+0x3fe6ef7>
   128f8:	0148fbb3          	and	s7,a7,s4
   128fc:	014af2b3          	and	t0,s5,s4
   12900:	017282bb          	addw	t0,t0,s7
   12904:	01ab161b          	sllw	a2,s6,0x1a
   12908:	3c000bb7          	lui	s7,0x3c000
   1290c:	01767633          	and	a2,a2,s7
   12910:	0142f2b3          	and	t0,t0,s4
   12914:	00566633          	or	a2,a2,t0
   12918:	01e8929b          	sllw	t0,a7,0x1e
   1291c:	00566633          	or	a2,a2,t0
   12920:	00e5a027          	fsw	fa4,0(a1)
   12924:	00c5a223          	sw	a2,4(a1)
   12928:	01e5a423          	sw	t5,8(a1)
   1292c:	000e0b93          	mv	s7,t3
}
   12930:	e0dff06f          	j	1273c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xe50>
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   12934:	56089063          	bnez	a7,12e94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x15a8>
	inline float operator[](int i) const { return e[i]; }
   12938:	00052907          	flw	fs2,0(a0)
   1293c:	00452487          	flw	fs1,4(a0)
   12940:	00852407          	flw	fs0,8(a0)
	e[2] = v[2];
   12944:	03812807          	flw	fa6,56(sp)
	e[1] = v[1];
   12948:	02412887          	flw	fa7,36(sp)
	e[0] = v[0];
   1294c:	02012e07          	flw	ft8,32(sp)
	e[2] = v[2];
   12950:	21398ed3          	fmv.s	ft9,fs3
	e[1] = v[1];
   12954:	01012f07          	flw	ft10,16(sp)
	e[0] = v[0];
   12958:	00812f87          	flw	ft11,8(sp)
	return vec3(std::min(a[0], b[0]), std::min(a[1], b[1]), std::min(a[2], b[2]));
   1295c:	08812d07          	flw	fs10,136(sp)
   12960:	29a787d3          	fmin.s	fa5,fa5,fs10
   12964:	29a60653          	fmin.s	fa2,fa2,fs10
   12968:	29a686d3          	fmin.s	fa3,fa3,fs10
   1296c:	08c12d07          	flw	fs10,140(sp)
   12970:	292787d3          	fmin.s	fa5,fa5,fs2
   12974:	28960653          	fmin.s	fa2,fa2,fs1
   12978:	29a51553          	fmax.s	fa0,fa0,fs10
   1297c:	29a595d3          	fmax.s	fa1,fa1,fs10
   12980:	29a71753          	fmax.s	fa4,fa4,fs10
   12984:	288686d3          	fmin.s	fa3,fa3,fs0
   12988:	29251553          	fmax.s	fa0,fa0,fs2
   1298c:	289595d3          	fmax.s	fa1,fa1,fs1
   12990:	28871753          	fmax.s	fa4,fa4,fs0
   12994:	29f787d3          	fmin.s	fa5,fa5,ft11
   12998:	29e60653          	fmin.s	fa2,fa2,ft10
   1299c:	29d686d3          	fmin.s	fa3,fa3,ft9
   129a0:	29f51553          	fmax.s	fa0,fa0,ft11
   129a4:	29e595d3          	fmax.s	fa1,fa1,ft10
   129a8:	29d71753          	fmax.s	fa4,fa4,ft9
   129ac:	29c787d3          	fmin.s	fa5,fa5,ft8
   129b0:	29160653          	fmin.s	fa2,fa2,fa7
   129b4:	290686d3          	fmin.s	fa3,fa3,fa6
	return vec3(std::max(a[0], b[0]), std::max(a[1], b[1]), std::max(a[2], b[2]));
   129b8:	29c51553          	fmax.s	fa0,fa0,ft8
   129bc:	291595d3          	fmax.s	fa1,fa1,fa7
   129c0:	29071753          	fmax.s	fa4,fa4,fa6
	return *this;
   129c4:	d05ff06f          	j	126c8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xddc>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   129c8:	09d571d3          	fsub.s	ft3,fa0,ft9
   129cc:	08c072d3          	fsub.s	ft5,ft0,fa2
   129d0:	08cf7753          	fsub.s	fa4,ft10,fa2
   129d4:	09d176d3          	fsub.s	fa3,ft2,ft9
   129d8:	09c0f253          	fsub.s	ft4,ft1,ft8
   129dc:	08a17553          	fsub.s	fa0,ft2,fa0
		(-(a[0] * b[2] - a[2] * b[0])),
   129e0:	1051f353          	fmul.s	ft6,ft3,ft5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   129e4:	082efed3          	fsub.s	ft9,ft9,ft2
   129e8:	09e07f53          	fsub.s	ft10,ft0,ft10
   129ec:	09c5f153          	fsub.s	ft2,fa1,ft8
	return vec3(a[1] * b[2] - a[2] * b[1],
   129f0:	104773d3          	fmul.s	ft7,fa4,ft4
   129f4:	30d778c7          	fmsub.s	fa7,fa4,fa3,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   129f8:	08067653          	fsub.s	fa2,fa2,ft0
		(-(a[0] * b[2] - a[2] * b[0])),
   129fc:	10a97053          	fmul.s	ft0,fs2,fa0
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a00:	03812407          	flw	fs0,56(sp)
   12a04:	02412d07          	flw	fs10,36(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   12a08:	11d4f853          	fmul.s	fa6,fs1,ft9
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a0c:	38517fc7          	fmsub.s	ft11,ft2,ft5,ft7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12a10:	08b0f5d3          	fsub.s	fa1,ft1,fa1
   12a14:	081e7e53          	fsub.s	ft8,ft8,ft1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a18:	111b72d3          	fmul.s	ft5,fs6,fa7
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a1c:	11e470d3          	fmul.s	ft1,fs0,ft10
   12a20:	01ed7047          	fmsub.s	ft0,fs10,ft10,ft0
   12a24:	01112427          	fsw	fa7,8(sp)
   12a28:	02812f07          	flw	ft10,40(sp)
   12a2c:	02012887          	flw	fa7,32(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   12a30:	1039f353          	fmul.s	ft6,fs3,ft3
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a34:	10cf73d3          	fmul.s	ft7,ft10,fa2
   12a38:	80c8f647          	fmsub.s	fa2,fa7,fa2,fa6
   12a3c:	01012887          	flw	fa7,16(sp)
   12a40:	01812807          	flw	fa6,24(sp)
		a[0] * b[1] - a[1] * b[0]);
   12a44:	10d176d3          	fmul.s	fa3,ft2,fa3
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a48:	39c4f4c7          	fmsub.s	fs1,fs1,ft8,ft7
   12a4c:	10e87853          	fmul.s	fa6,fa6,fa4
   12a50:	30e8f747          	fmsub.s	fa4,fa7,fa4,ft6
		a[0] * b[1] - a[1] * b[0]);
   12a54:	02012887          	flw	fa7,32(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a58:	6841f6c7          	fmsub.s	fa3,ft3,ft4,fa3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a5c:	10cb7653          	fmul.s	fa2,fs6,fa2
		a[0] * b[1] - a[1] * b[0]);
   12a60:	11c8fe53          	fmul.s	ft8,fa7,ft8
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a64:	29fc72c3          	fmadd.s	ft5,fs8,ft11,ft5
		a[0] * b[1] - a[1] * b[0]);
   12a68:	01012887          	flw	fa7,16(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a6c:	08b97947          	fmsub.s	fs2,fs2,fa1,ft1
   12a70:	8029f847          	fmsub.s	fa6,fs3,ft2,fa6
		a[0] * b[1] - a[1] * b[0]);
   12a74:	10bd75d3          	fmul.s	fa1,fs10,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a78:	100b7053          	fmul.s	ft0,fs6,ft0
		a[0] * b[1] - a[1] * b[0]);
   12a7c:	1028f153          	fmul.s	ft2,fa7,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a80:	10eb7753          	fmul.s	fa4,fs6,fa4
   12a84:	609c74c3          	fmadd.s	fs1,fs8,fs1,fa2
   12a88:	28ddf2c3          	fmadd.s	ft5,fs11,fa3,ft5
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a8c:	01812607          	flw	fa2,24(sp)
   12a90:	58a475c7          	fmsub.s	fa1,fs0,fa0,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12a94:	012c7943          	fmadd.s	fs2,fs8,fs2,ft0
	return vec3(a[1] * b[2] - a[2] * b[1],
   12a98:	e1df7547          	fmsub.s	fa0,ft10,ft9,ft8
   12a9c:	103671c7          	fmsub.s	ft3,fa2,ft3,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12aa0:	710c7843          	fmadd.s	fa6,fs8,fa6,fa4
	if(gn_dot_d > 0.0f) bc = -bc;
   12aa4:	a0579653          	flt.s	a2,fa5,ft5
   12aa8:	90bdf5c3          	fmadd.s	fa1,fs11,fa1,fs2
   12aac:	48adf4c3          	fmadd.s	fs1,fs11,fa0,fs1
   12ab0:	803df843          	fmadd.s	fa6,fs11,ft3,fa6
   12ab4:	00060863          	beqz	a2,12ac4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x11d8>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   12ab8:	20b595d3          	fneg.s	fa1,fa1
   12abc:	209494d3          	fneg.s	fs1,fs1
   12ac0:	21081853          	fneg.s	fa6,fa6
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   12ac4:	f00007d3          	fmv.w.x	fa5,zero
   12ac8:	a0f59653          	flt.s	a2,fa1,fa5
   12acc:	06061663          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
   12ad0:	a0f49653          	flt.s	a2,fs1,fa5
   12ad4:	06061263          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
   12ad8:	a0f81653          	flt.s	a2,fa6,fa5
   12adc:	04061e63          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12ae0:	00812707          	flw	fa4,8(sp)
   12ae4:	01812787          	flw	fa5,24(sp)
   12ae8:	01012607          	flw	fa2,16(sp)
   12aec:	10e7f7d3          	fmul.s	fa5,fa5,fa4
	if(t < ray.t_min || t > hit.t) return false;
   12af0:	00c4a707          	flw	fa4,12(s1)
   12af4:	79f677c3          	fmadd.s	fa5,fa2,ft11,fa5
   12af8:	78d9f7c3          	fmadd.s	fa5,fs3,fa3,fa5
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   12afc:	1857f7d3          	fdiv.s	fa5,fa5,ft5
	if(t < ray.t_min || t > hit.t) return false;
   12b00:	a0e79653          	flt.s	a2,fa5,fa4
   12b04:	02061a63          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
   12b08:	a0fb9653          	flt.s	a2,fs7,fa5
   12b0c:	02061663          	bnez	a2,12b38 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x124c>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   12b10:	0095f753          	fadd.s	fa4,fa1,fs1
	hit.t = t ;
   12b14:	00f92027          	fsw	fa5,0(s2)
				hit.id = node_index;
   12b18:	00592623          	sw	t0,12(s2)
				hit.patch_index = patch_index;
   12b1c:	01992823          	sw	s9,16(s2)
		uint32_t lod = current_node_entry.lod;
   12b20:	000a8313          	mv	t1,s5
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   12b24:	010777d3          	fadd.s	fa5,fa4,fa6
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   12b28:	18f5f5d3          	fdiv.s	fa1,fa1,fa5
   12b2c:	18f4f4d3          	fdiv.s	fs1,fs1,fa5
	e[0] = v[0];
   12b30:	00b92227          	fsw	fa1,4(s2)
	e[1] = v[1];
   12b34:	00992427          	fsw	fs1,8(s2)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   12b38:	000f8e93          	mv	t4,t6
	} while(node_stack_size);
   12b3c:	b00e9a63          	bnez	t4,11e50 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x564>
   12b40:	c1dff06f          	j	1275c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xe70>
   12b44:	20f78fd3          	fmv.s	ft11,fa5
	e[0] = v[0];
   12b48:	202101d3          	fmv.s	ft3,ft2
	inline float operator[](int i) const { return e[i]; }
   12b4c:	00052007          	flw	ft0,0(a0)
   12b50:	00452587          	flw	fa1,4(a0)
   12b54:	00852787          	flw	fa5,8(a0)
	e[2] = v[2];
   12b58:	20c60753          	fmv.s	fa4,fa2
	e[1] = v[1];
   12b5c:	01012107          	flw	ft2,16(sp)
	e[0] = v[0];
   12b60:	20a50853          	fmv.s	fa6,fa0
	if(gn_dot_d > 0.0f) bc = -bc;
   12b64:	f0000453          	fmv.w.x	fs0,zero
   12b68:	214a04d3          	fmv.s	fs1,fs4
   12b6c:	215a8953          	fmv.s	fs2,fs5
   12b70:	201088d3          	fmv.s	fa7,ft1
			for(uint32_t i = 0; i < 4; ++i)
   12b74:	00000613          	li	a2,0
   12b78:	00400813          	li	a6,4
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   12b7c:	00100893          	li	a7,1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12b80:	080876d3          	fsub.s	fa3,fa6,ft0
   12b84:	08fffed3          	fsub.s	ft9,ft11,fa5
   12b88:	08f770d3          	fsub.s	ft1,fa4,fa5
   12b8c:	0801f253          	fsub.s	ft4,ft3,ft0
   12b90:	08b8fad3          	fsub.s	fs5,fa7,fa1
   12b94:	0901f653          	fsub.s	fa2,ft3,fa6
		(-(a[0] * b[2] - a[2] * b[0])),
   12b98:	11d6ff53          	fmul.s	ft10,fa3,ft9
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12b9c:	08307553          	fsub.s	fa0,ft0,ft3
   12ba0:	09277a53          	fsub.s	fs4,fa4,fs2
   12ba4:	092ff9d3          	fsub.s	fs3,ft11,fs2
   12ba8:	0927fe53          	fsub.s	ft8,fa5,fs2
   12bac:	089173d3          	fsub.s	ft7,ft2,fs1
   12bb0:	08b172d3          	fsub.s	ft5,ft2,fa1
	return vec3(a[1] * b[2] - a[2] * b[1],
   12bb4:	f040fd47          	fmsub.s	fs10,ft1,ft4,ft10
   12bb8:	1150f353          	fmul.s	ft6,ft1,fs5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12bbc:	08eff753          	fsub.s	fa4,ft11,fa4
   12bc0:	09f7f7d3          	fsub.s	fa5,fa5,ft11
   12bc4:	0898ff53          	fsub.s	ft10,fa7,fs1
   12bc8:	0895ffd3          	fsub.s	ft11,fa1,fs1
		(-(a[0] * b[2] - a[2] * b[0])),
   12bcc:	11357bd3          	fmul.s	fs7,fa0,fs3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12bd0:	09987853          	fsub.s	fa6,fa6,fs9
   12bd4:	0991f1d3          	fsub.s	ft3,ft3,fs9
   12bd8:	09907053          	fsub.s	ft0,ft0,fs9
   12bdc:	02712827          	fsw	ft7,48(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   12be0:	02c12427          	fsw	fa2,40(sp)
   12be4:	114673d3          	fmul.s	ft7,fa2,fs4
   12be8:	11c6f653          	fmul.s	fa2,fa3,ft8
	return vec3(a[1] * b[2] - a[2] * b[1],
   12bec:	31d2fec7          	fmsub.s	ft9,ft5,ft9,ft6
		a[0] * b[1] - a[1] * b[0]);
   12bf0:	1042f253          	fmul.s	ft4,ft5,ft4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12bf4:	11ab7353          	fmul.s	ft6,fs6,fs10
	return vec3(a[1] * b[2] - a[2] * b[1],
   12bf8:	05a12827          	fsw	fs10,80(sp)
   12bfc:	03012d07          	flw	fs10,48(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   12c00:	0828f153          	fsub.s	ft2,fa7,ft2
   12c04:	0915f5d3          	fsub.s	fa1,fa1,fa7
	return vec3(a[1] * b[2] - a[2] * b[1],
   12c08:	11a778d3          	fmul.s	fa7,fa4,fs10
   12c0c:	39077747          	fmsub.s	fa4,fa4,fa6,ft7
   12c10:	11e7f3d3          	fmul.s	ft7,fa5,ft10
   12c14:	b837f7c7          	fmsub.s	fa5,fa5,ft3,fs7
   12c18:	11f0fbd3          	fmul.s	fs7,ft1,ft11
   12c1c:	6000f0c7          	fmsub.s	ft1,ft1,ft0,fa2
   12c20:	2156f247          	fmsub.s	ft4,fa3,fs5,ft4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c24:	31dc7343          	fmadd.s	ft6,fs8,ft9,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   12c28:	894178c7          	fmsub.s	fa7,ft2,fs4,fa7
   12c2c:	3935f3c7          	fmsub.s	ft7,fa1,fs3,ft7
   12c30:	b9c2fbc7          	fmsub.s	fs7,ft5,ft8,fs7
		a[0] * b[1] - a[1] * b[0]);
   12c34:	11017153          	fmul.s	ft2,ft2,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c38:	10eb7753          	fmul.s	fa4,fs6,fa4
		a[0] * b[1] - a[1] * b[0]);
   12c3c:	1035f5d3          	fmul.s	fa1,fa1,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c40:	10fb77d3          	fmul.s	fa5,fs6,fa5
		a[0] * b[1] - a[1] * b[0]);
   12c44:	1002f2d3          	fmul.s	ft5,ft5,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c48:	101b70d3          	fmul.s	ft1,fs6,ft1
   12c4c:	304df343          	fmadd.s	ft6,fs11,ft4,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   12c50:	02812607          	flw	fa2,40(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c54:	711c78c3          	fmadd.s	fa7,fs8,fa7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   12c58:	59e57547          	fmsub.s	fa0,fa0,ft10,fa1
   12c5c:	11a67647          	fmsub.s	fa2,fa2,fs10,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c60:	787c73c3          	fmadd.s	ft7,fs8,ft7,fa5
	return vec3(a[1] * b[2] - a[2] * b[1],
   12c64:	29f6f6c7          	fmsub.s	fa3,fa3,ft11,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12c68:	097c7bc3          	fmadd.s	fs7,fs8,fs7,ft1
   12c6c:	a06415d3          	flt.s	a1,fs0,ft6
   12c70:	88cdf643          	fmadd.s	fa2,fs11,fa2,fa7
   12c74:	38adf543          	fmadd.s	fa0,fs11,fa0,ft7
   12c78:	b8ddf6c3          	fmadd.s	fa3,fs11,fa3,fs7
   12c7c:	00058863          	beqz	a1,12c8c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x13a0>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   12c80:	20c61653          	fneg.s	fa2,fa2
   12c84:	20a51553          	fneg.s	fa0,fa0
   12c88:	20d696d3          	fneg.s	fa3,fa3
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   12c8c:	a08615d3          	flt.s	a1,fa2,fs0
   12c90:	06059663          	bnez	a1,12cfc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1410>
   12c94:	a08515d3          	flt.s	a1,fa0,fs0
   12c98:	06059263          	bnez	a1,12cfc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1410>
   12c9c:	a08695d3          	flt.s	a1,fa3,fs0
   12ca0:	04059e63          	bnez	a1,12cfc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1410>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   12ca4:	05012787          	flw	fa5,80(sp)
   12ca8:	10ffffd3          	fmul.s	ft11,ft11,fa5
	if(t < ray.t_min || t > hit.t) return false;
   12cac:	00c4a787          	flw	fa5,12(s1)
   12cb0:	f9d07043          	fmadd.s	ft0,ft0,ft9,ft11
   12cb4:	004e7e43          	fmadd.s	ft8,ft8,ft4,ft0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   12cb8:	186e7e53          	fdiv.s	ft8,ft8,ft6
	if(t < ray.t_min || t > hit.t) return false;
   12cbc:	a0fe15d3          	flt.s	a1,ft8,fa5
   12cc0:	02059e63          	bnez	a1,12cfc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1410>
   12cc4:	00092787          	flw	fa5,0(s2)
   12cc8:	a1c795d3          	flt.s	a1,fa5,ft8
   12ccc:	02059863          	bnez	a1,12cfc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1410>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   12cd0:	00a677d3          	fadd.s	fa5,fa2,fa0
					hit.id = first_child_index + i;
   12cd4:	00c285bb          	addw	a1,t0,a2
	hit.t = t ;
   12cd8:	01c92027          	fsw	ft8,0(s2)
   12cdc:	00b92623          	sw	a1,12(s2)
					hit.patch_index = patch_index;
   12ce0:	01992823          	sw	s9,16(s2)
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   12ce4:	00d7f7d3          	fadd.s	fa5,fa5,fa3
	e[0] = v[0];
   12ce8:	000a0313          	mv	t1,s4
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   12cec:	18f67653          	fdiv.s	fa2,fa2,fa5
   12cf0:	18f57553          	fdiv.s	fa0,fa0,fa5
	e[0] = v[0];
   12cf4:	00c92227          	fsw	fa2,4(s2)
	e[1] = v[1];
   12cf8:	00a92427          	fsw	fa0,8(s2)
			for(uint32_t i = 0; i < 4; ++i)
   12cfc:	0016061b          	addw	a2,a2,1
   12d00:	21060663          	beq	a2,a6,12f0c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1620>
   12d04:	25160263          	beq	a2,a7,12f48 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x165c>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   12d08:	00200593          	li	a1,2
   12d0c:	28b60a63          	beq	a2,a1,12fa0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x16b4>
	e[2] = v[2];
   12d10:	01812f87          	flw	ft11,24(sp)
	e[1] = v[1];
   12d14:	01012887          	flw	fa7,16(sp)
	e[0] = v[0];
   12d18:	00812187          	flw	ft3,8(sp)
	e[2] = v[2];
   12d1c:	03812707          	flw	fa4,56(sp)
	e[1] = v[1];
   12d20:	02412107          	flw	ft2,36(sp)
	e[0] = v[0];
   12d24:	02012807          	flw	fa6,32(sp)
	e[2] = v[2];
   12d28:	04412787          	flw	fa5,68(sp)
	e[1] = v[1];
   12d2c:	04012587          	flw	fa1,64(sp)
	e[0] = v[0];
   12d30:	03c12007          	flw	ft0,60(sp)
	}
   12d34:	00300613          	li	a2,3
   12d38:	e49ff06f          	j	12b80 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1294>
	else             r[1] = std::min(     dlen[2],      dlen[0]) *      ray.drdt +      ray.radius;
   12d3c:	28418253          	fmin.s	ft4,ft3,ft4
   12d40:	0204a287          	flw	ft5,32(s1)
   12d44:	0244a387          	flw	ft7,36(s1)
   12d48:	3842f2c3          	fmadd.s	ft5,ft5,ft4,ft7
	if(edge_mask[2]) r[2] = std::min(last_dlen[0], last_dlen[1]) * last_ray.drdt + last_ray.radius;
   12d4c:	bc0a1e63          	bnez	s4,12128 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x83c>
	else             r[2] = std::min(     dlen[0],      dlen[1]) *      ray.drdt +      ray.radius;
   12d50:	290181d3          	fmin.s	ft3,ft3,fa6
   12d54:	0204a207          	flw	ft4,32(s1)
   12d58:	0244a387          	flw	ft7,36(s1)
   12d5c:	383273c3          	fmadd.s	ft7,ft4,ft3,ft7
   12d60:	bd8ff06f          	j	12138 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x84c>
			tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   12d64:	fffa8f1b          	addw	t5,s5,-1
   12d68:	020f1f13          	sll	t5,t5,0x20
   12d6c:	020f5f13          	srl	t5,t5,0x20
   12d70:	04c00993          	li	s3,76
   12d74:	033f09b3          	mul	s3,t5,s3
   12d78:	21010593          	add	a1,sp,528
		uint32_t tri_type = current_node_entry.tri_type;
   12d7c:	0005089b          	sext.w	a7,a0
			tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   12d80:	02498813          	add	a6,s3,36 # 3f800024 <__global_pointer$+0x3f7e6f1c>
   12d84:	01058833          	add	a6,a1,a6
   12d88:	013589b3          	add	s3,a1,s3
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   12d8c:	14051463          	bnez	a0,12ed4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x15e8>
	inline float operator[](int i) const { return e[i]; }
   12d90:	0009a687          	flw	fa3,0(s3)
   12d94:	0049a707          	flw	fa4,4(s3)
   12d98:	0089a787          	flw	fa5,8(s3)
   12d9c:	01882507          	flw	fa0,24(a6)
   12da0:	01c82587          	flw	fa1,28(a6)
   12da4:	02082607          	flw	fa2,32(a6)
   12da8:	00c82107          	flw	ft2,12(a6)
   12dac:	01082087          	flw	ft1,16(a6)
   12db0:	01482007          	flw	ft0,20(a6)
	return *this;
   12db4:	04c00513          	li	a0,76
			tri_stack[lod].shared_edge = propagate_shared_edge(tri_stack[lod - 1u].shared_edge, tri_type);
   12db8:	02af0f33          	mul	t5,t5,a0
	if(prnt_shrd_edg == 3 || tri_typ == 3 || prnt_shrd_edg == tri_typ) return 3;
   12dbc:	00300993          	li	s3,3
   12dc0:	02ae0e33          	mul	t3,t3,a0
   12dc4:	440f0813          	add	a6,t5,1088
   12dc8:	0e010f13          	add	t5,sp,224
   12dcc:	01e80f33          	add	t5,a6,t5
class Triangle
   12dd0:	01c58533          	add	a0,a1,t3
	e[0] = v[0];
   12dd4:	00d52027          	fsw	fa3,0(a0)
	e[1] = v[1];
   12dd8:	00e52227          	fsw	fa4,4(a0)
	e[2] = v[2];
   12ddc:	00f52427          	fsw	fa5,8(a0)
	e[0] = v[0];
   12de0:	00a52627          	fsw	fa0,12(a0)
	e[1] = v[1];
   12de4:	00b52827          	fsw	fa1,16(a0)
	e[2] = v[2];
   12de8:	00c52a27          	fsw	fa2,20(a0)
	e[0] = v[0];
   12dec:	00252c27          	fsw	ft2,24(a0)
	e[1] = v[1];
   12df0:	00152e27          	fsw	ft1,28(a0)
	e[2] = v[2];
   12df4:	02052027          	fsw	ft0,32(a0)
   12df8:	d38f4803          	lbu	a6,-712(t5)
   12dfc:	00080f1b          	sext.w	t5,a6
   12e00:	19380c63          	beq	a6,s3,12f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x16ac>
   12e04:	19388a63          	beq	a7,s3,12f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x16ac>
   12e08:	191f0863          	beq	t5,a7,12f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x16ac>
   12e0c:	04c00893          	li	a7,76
   12e10:	031a88b3          	mul	a7,s5,a7
   12e14:	0e010f13          	add	t5,sp,224
   12e18:	44088893          	add	a7,a7,1088
   12e1c:	01e888b3          	add	a7,a7,t5
   12e20:	d3088c23          	sb	a6,-712(a7)
		bool edge_mask[3] = {patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 0, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 1, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 2};
   12e24:	999d1463          	bne	s10,s9,11fac <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6c0>
   12e28:	00100b13          	li	s6,1
   12e2c:	00100893          	li	a7,1
   12e30:	00100a13          	li	s4,1
   12e34:	9a4ff06f          	j	11fd8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ec>
	else             r[0] = std::min(     dlen[1],      dlen[2]) *      ray.drdt +      ray.radius;
   12e38:	28480353          	fmin.s	ft6,fa6,ft4
   12e3c:	0204a387          	flw	ft7,32(s1)
   12e40:	0244a407          	flw	fs0,36(s1)
   12e44:	4063f343          	fmadd.s	ft6,ft7,ft6,fs0
   12e48:	ac8ff06f          	j	12110 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x824>
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   12e4c:	9087a287          	flw	ft5,-1784(a5)
   12e50:	d90ff06f          	j	123e0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xaf4>
   12e54:	9087a407          	flw	fs0,-1784(a5)
   12e58:	d58ff06f          	j	123b0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xac4>
   12e5c:	9087a307          	flw	ft6,-1784(a5)
   12e60:	d30ff06f          	j	12390 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xaa4>
   12e64:	9087a787          	flw	fa5,-1784(a5)
   12e68:	cf4ff06f          	j	1235c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xa70>
   12e6c:	9087a887          	flw	fa7,-1784(a5)
   12e70:	cb0ff06f          	j	12320 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xa34>
   12e74:	9087a387          	flw	ft7,-1784(a5)
   12e78:	c78ff06f          	j	122f0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xa04>
   12e7c:	9087a207          	flw	ft4,-1784(a5)
   12e80:	c3cff06f          	j	122bc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x9d0>
   12e84:	9087a807          	flw	fa6,-1784(a5)
   12e88:	bf8ff06f          	j	12280 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x994>
   12e8c:	9087af87          	flw	ft11,-1784(a5)
   12e90:	bbcff06f          	j	1224c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x960>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   12e94:	00100613          	li	a2,1
   12e98:	12c88863          	beq	a7,a2,12fc8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x16dc>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   12e9c:	00200613          	li	a2,2
   12ea0:	14c88c63          	beq	a7,a2,12ff8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x170c>
   12ea4:	21398853          	fmv.s	fa6,fs3
	e[1] = v[1];
   12ea8:	01012887          	flw	fa7,16(sp)
	e[0] = v[0];
   12eac:	00812e07          	flw	ft8,8(sp)
	e[2] = v[2];
   12eb0:	03812e87          	flw	ft9,56(sp)
	e[1] = v[1];
   12eb4:	02412f07          	flw	ft10,36(sp)
	e[0] = v[0];
   12eb8:	02012f87          	flw	ft11,32(sp)
	e[2] = v[2];
   12ebc:	04412407          	flw	fs0,68(sp)
	e[1] = v[1];
   12ec0:	04012487          	flw	fs1,64(sp)
	e[0] = v[0];
   12ec4:	03c12907          	flw	fs2,60(sp)
   12ec8:	a95ff06f          	j	1295c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1070>
   12ecc:	00060593          	mv	a1,a2
   12ed0:	a21ff06f          	j	128f0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1004>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   12ed4:	00100513          	li	a0,1
	inline float operator[](int i) const { return e[i]; }
   12ed8:	00082687          	flw	fa3,0(a6)
   12edc:	00482707          	flw	fa4,4(a6)
   12ee0:	00882787          	flw	fa5,8(a6)
   12ee4:	12a88e63          	beq	a7,a0,13020 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1734>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   12ee8:	00200513          	li	a0,2
   12eec:	00c82507          	flw	fa0,12(a6)
   12ef0:	01082587          	flw	fa1,16(a6)
   12ef4:	01482607          	flw	fa2,20(a6)
   12ef8:	20a88e63          	beq	a7,a0,13114 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1828>
   12efc:	01882107          	flw	ft2,24(a6)
   12f00:	01c82087          	flw	ft1,28(a6)
   12f04:	02082007          	flw	ft0,32(a6)
	}
   12f08:	eadff06f          	j	12db4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x14c8>
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   12f0c:	000f8e93          	mv	t4,t6
   12f10:	20948a53          	fmv.s	fs4,fs1
   12f14:	21290ad3          	fmv.s	fs5,fs2
	} while(node_stack_size);
   12f18:	000e8463          	beqz	t4,12f20 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1634>
   12f1c:	f35fe06f          	j	11e50 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x564>
   12f20:	83dff06f          	j	1275c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xe70>
			else if(hit.bc.x + hit.bc.y < 1.0f)
   12f24:	00c6f053          	fadd.s	ft0,fa3,fa2
	e[0] *= v.e[0];
   12f28:	20c607d3          	fmv.s	fa5,fa2
	e[1] *= v.e[1];
   12f2c:	20d68753          	fmv.s	fa4,fa3
				tri_type = 3;
   12f30:	00300793          	li	a5,3
			else if(hit.bc.x + hit.bc.y < 1.0f)
   12f34:	a0a01653          	flt.s	a2,ft0,fa0
   12f38:	0a061c63          	bnez	a2,12ff0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1704>
	return vec2(a[0] - b[0], a[1] - b[1]);
   12f3c:	08c577d3          	fsub.s	fa5,fa0,fa2
   12f40:	08d57753          	fsub.s	fa4,fa0,fa3
	vec2(float e0, float e1) { e[0] = e0; e[1] = e1; }
   12f44:	859ff06f          	j	1279c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xeb0>
   12f48:	00c52807          	flw	fa6,12(a0)
   12f4c:	01052107          	flw	ft2,16(a0)
   12f50:	01452707          	flw	fa4,20(a0)
	e[2] = v[2];
   12f54:	04412f87          	flw	ft11,68(sp)
	e[1] = v[1];
   12f58:	04012887          	flw	fa7,64(sp)
	e[0] = v[0];
   12f5c:	03c12187          	flw	ft3,60(sp)
	e[2] = v[2];
   12f60:	01812787          	flw	fa5,24(sp)
	e[1] = v[1];
   12f64:	01012587          	flw	fa1,16(sp)
	e[0] = v[0];
   12f68:	00812007          	flw	ft0,8(sp)
   12f6c:	c15ff06f          	j	12b80 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1294>
			else                            tri_stack[0].shared_edge = 3;
   12f70:	00300593          	li	a1,3
   12f74:	24b10c23          	sb	a1,600(sp)
		bool edge_mask[3] = {patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 0, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 1, patch_index == data.last_patch_index || tri_stack[lod].shared_edge == 2};
   12f78:	21010593          	add	a1,sp,528
   12f7c:	00058513          	mv	a0,a1
   12f80:	00000e13          	li	t3,0
   12f84:	83ac9463          	bne	s9,s10,11fac <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6c0>
   12f88:	00100b13          	li	s6,1
   12f8c:	00100893          	li	a7,1
   12f90:	00100a13          	li	s4,1
   12f94:	844ff06f          	j	11fd8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ec>
   12f98:	00300813          	li	a6,3
   12f9c:	e71ff06f          	j	12e0c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1520>
	inline float operator[](int i) const { return e[i]; }
   12fa0:	01852187          	flw	ft3,24(a0)
   12fa4:	01c52887          	flw	fa7,28(a0)
   12fa8:	02052f87          	flw	ft11,32(a0)
	e[2] = v[2];
   12fac:	04412707          	flw	fa4,68(sp)
	e[1] = v[1];
   12fb0:	04012107          	flw	ft2,64(sp)
	e[0] = v[0];
   12fb4:	03c12807          	flw	fa6,60(sp)
	e[2] = v[2];
   12fb8:	03812787          	flw	fa5,56(sp)
	e[1] = v[1];
   12fbc:	02412587          	flw	fa1,36(sp)
	e[0] = v[0];
   12fc0:	02012007          	flw	ft0,32(sp)
   12fc4:	bbdff06f          	j	12b80 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1294>
	inline float operator[](int i) const { return e[i]; }
   12fc8:	00c52f87          	flw	ft11,12(a0)
   12fcc:	01052f07          	flw	ft10,16(a0)
   12fd0:	01452e87          	flw	ft9,20(a0)
	e[2] = v[2];
   12fd4:	04412807          	flw	fa6,68(sp)
	e[1] = v[1];
   12fd8:	04012887          	flw	fa7,64(sp)
	e[0] = v[0];
   12fdc:	03c12e07          	flw	ft8,60(sp)
	e[2] = v[2];
   12fe0:	21398453          	fmv.s	fs0,fs3
	e[1] = v[1];
   12fe4:	01012487          	flw	fs1,16(sp)
	e[0] = v[0];
   12fe8:	00812907          	flw	fs2,8(sp)
   12fec:	971ff06f          	j	1295c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1070>
				tri_type = 2;
   12ff0:	00200793          	li	a5,2
   12ff4:	fa8ff06f          	j	1279c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xeb0>
	inline float operator[](int i) const { return e[i]; }
   12ff8:	01852e07          	flw	ft8,24(a0)
   12ffc:	01c52887          	flw	fa7,28(a0)
   13000:	02052807          	flw	fa6,32(a0)
	e[2] = v[2];
   13004:	04412e87          	flw	ft9,68(sp)
	e[1] = v[1];
   13008:	04012f07          	flw	ft10,64(sp)
	e[0] = v[0];
   1300c:	03c12f87          	flw	ft11,60(sp)
	e[2] = v[2];
   13010:	03812407          	flw	fs0,56(sp)
	e[1] = v[1];
   13014:	02412487          	flw	fs1,36(sp)
	e[0] = v[0];
   13018:	02012907          	flw	fs2,32(sp)
   1301c:	941ff06f          	j	1295c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1070>
	e[2] = v[2];
   13020:	20f78053          	fmv.s	ft0,fa5
	e[1] = v[1];
   13024:	20e700d3          	fmv.s	ft1,fa4
	e[0] = v[0];
   13028:	20d68153          	fmv.s	ft2,fa3
	inline float operator[](int i) const { return e[i]; }
   1302c:	00c9a507          	flw	fa0,12(s3)
   13030:	0109a587          	flw	fa1,16(s3)
   13034:	0149a607          	flw	fa2,20(s3)
	e[2] = v[2];
   13038:	02082787          	flw	fa5,32(a6)
	e[1] = v[1];
   1303c:	01c82707          	flw	fa4,28(a6)
	e[0] = v[0];
   13040:	01882687          	flw	fa3,24(a6)
   13044:	d71ff06f          	j	12db4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x14c8>
   13048:	9087a707          	flw	fa4,-1784(a5)
   1304c:	0ce12427          	fsw	fa4,200(sp)
   13050:	da5fe06f          	j	11df4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x508>
   13054:	9087a707          	flw	fa4,-1784(a5)
   13058:	0ce12227          	fsw	fa4,196(sp)
   1305c:	d89fe06f          	j	11de4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4f8>
   13060:	9087a707          	flw	fa4,-1784(a5)
   13064:	0ce12027          	fsw	fa4,192(sp)
   13068:	d69fe06f          	j	11dd0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4e4>
   1306c:	9087a707          	flw	fa4,-1784(a5)
   13070:	0ae12e27          	fsw	fa4,188(sp)
   13074:	d49fe06f          	j	11dbc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4d0>
   13078:	9087a707          	flw	fa4,-1784(a5)
   1307c:	0ae12c27          	fsw	fa4,184(sp)
   13080:	d25fe06f          	j	11da4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4b8>
   13084:	9087a707          	flw	fa4,-1784(a5)
   13088:	0ae12a27          	fsw	fa4,180(sp)
   1308c:	d05fe06f          	j	11d90 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x4a4>
   13090:	9087a707          	flw	fa4,-1784(a5)
   13094:	0ae12827          	fsw	fa4,176(sp)
   13098:	ce5fe06f          	j	11d7c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x490>
   1309c:	9087a707          	flw	fa4,-1784(a5)
   130a0:	0ae12627          	fsw	fa4,172(sp)
   130a4:	cc5fe06f          	j	11d68 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x47c>
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   130a8:	fffa861b          	addw	a2,s5,-1
   130ac:	02061613          	sll	a2,a2,0x20
   130b0:	04c00593          	li	a1,76
   130b4:	02065613          	srl	a2,a2,0x20
   130b8:	02b60633          	mul	a2,a2,a1
   130bc:	0e010593          	add	a1,sp,224
   130c0:	44060613          	add	a2,a2,1088
   130c4:	00b60633          	add	a2,a2,a1
   130c8:	d3964983          	lbu	s3,-711(a2)
   130cc:	c2cff06f          	j	124f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0xc0c>
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   130d0:	04645683          	lhu	a3,70(s0)
   130d4:	00019737          	lui	a4,0x19
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   130d8:	00f6d613          	srl	a2,a3,0xf
   130dc:	00061463          	bnez	a2,130e4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x17f8>
   130e0:	965fe06f          	j	11a44 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x158>
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   130e4:	04245683          	lhu	a3,66(s0)
   130e8:	9087a007          	flw	ft0,-1784(a5)
   130ec:	00f6d613          	srl	a2,a3,0xf
   130f0:	00061463          	bnez	a2,130f8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x180c>
   130f4:	989fe06f          	j	11a7c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x190>
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   130f8:	04845683          	lhu	a3,72(s0)
   130fc:	9087a707          	flw	fa4,-1784(a5)
   13100:	00f6d613          	srl	a2,a3,0xf
   13104:	00061463          	bnez	a2,1310c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1820>
   13108:	9adfe06f          	j	11ab4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1c8>
   1310c:	9087a587          	flw	fa1,-1784(a5)
   13110:	9cdfe06f          	j	11adc <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1f0>
	inline float operator[](int i) const { return e[i]; }
   13114:	20f782d3          	fmv.s	ft5,fa5
   13118:	20e70253          	fmv.s	ft4,fa4
   1311c:	20d681d3          	fmv.s	ft3,fa3
	e[2] = v[2];
   13120:	20c607d3          	fmv.s	fa5,fa2
	e[1] = v[1];
   13124:	20b58753          	fmv.s	fa4,fa1
	e[0] = v[0];
   13128:	20a506d3          	fmv.s	fa3,fa0
	inline float operator[](int i) const { return e[i]; }
   1312c:	0189a107          	flw	ft2,24(s3)
   13130:	01c9a087          	flw	ft1,28(s3)
   13134:	0209a007          	flw	ft0,32(s3)
	e[2] = v[2];
   13138:	20528653          	fmv.s	fa2,ft5
	e[1] = v[1];
   1313c:	204205d3          	fmv.s	fa1,ft4
	e[0] = v[0];
   13140:	20318553          	fmv.s	fa0,ft3
   13144:	c71ff06f          	j	12db4 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x14c8>
	uvec3(uint32_t i) { e[0] = i;  e[1] = i; e[2] = i; }
   13148:	06013423          	sd	zero,104(sp)
   1314c:	06013023          	sd	zero,96(sp)
   13150:	04013c23          	sd	zero,88(sp)
   13154:	ad5fe06f          	j	11c28 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x33c>
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   13158:	05813803          	ld	a6,88(sp)
				match_mask |= 1 << i;
   1315c:	0025e893          	or	a7,a1,2
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   13160:	0ea80a63          	beq	a6,a0,13254 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1968>
   13164:	06013803          	ld	a6,96(sp)
   13168:	00a80e63          	beq	a6,a0,13184 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1898>
	uint32_t operator[](int i) const { return e[i]; }
   1316c:	00500813          	li	a6,5
   13170:	4118083b          	subw	a6,a6,a7
   13174:	06813883          	ld	a7,104(sp)
   13178:	0ff87813          	zext.b	a6,a6
   1317c:	00a88463          	beq	a7,a0,13184 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1898>
   13180:	e19fe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
	if(match_mask == 6) return 0;
   13184:	00058463          	beqz	a1,1318c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18a0>
   13188:	e0dfe06f          	j	11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   1318c:	00000813          	li	a6,0
   13190:	e09fe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
	stack[j] = entry;
   13194:	020f9613          	sll	a2,t6,0x20
   13198:	02065613          	srl	a2,a2,0x20
   1319c:	00161593          	sll	a1,a2,0x1
   131a0:	00c585b3          	add	a1,a1,a2
   131a4:	0f010293          	add	t0,sp,240
   131a8:	00259593          	sll	a1,a1,0x2
   131ac:	00b285b3          	add	a1,t0,a1
   131b0:	f40ff06f          	j	128f0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1004>
				match_mask |= 1 << i;
   131b4:	0045e593          	or	a1,a1,4
	if(match_mask == 5) return 1; 
   131b8:	00500513          	li	a0,5
   131bc:	00300813          	li	a6,3
   131c0:	00a58463          	beq	a1,a0,131c8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18dc>
   131c4:	dd5fe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
   131c8:	00100813          	li	a6,1
   131cc:	dcdfe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
   131d0:	00080893          	mv	a7,a6
   131d4:	00452803          	lw	a6,4(a0)
				match_mask |= 1 << i;
   131d8:	00100593          	li	a1,1
   131dc:	00852503          	lw	a0,8(a0)
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   131e0:	01180463          	beq	a6,a7,131e8 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x18fc>
   131e4:	d79fe06f          	j	11f5c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x670>
   131e8:	01151463          	bne	a0,a7,131f0 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1904>
   131ec:	da9fe06f          	j	11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   131f0:	06013583          	ld	a1,96(sp)
   131f4:	00300813          	li	a6,3
   131f8:	00b51463          	bne	a0,a1,13200 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1914>
   131fc:	d9dfe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
   13200:	06813583          	ld	a1,104(sp)
   13204:	00200813          	li	a6,2
   13208:	00b50463          	beq	a0,a1,13210 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1924>
   1320c:	d8dfe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
   13210:	d85fe06f          	j	11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   13214:	00452803          	lw	a6,4(a0)
   13218:	05813883          	ld	a7,88(sp)
   1321c:	00852503          	lw	a0,8(a0)
				match_mask |= 1 << i;
   13220:	00100593          	li	a1,1
			if(crnt_ptch_inds[i] == prev_ptch_inds[j])
   13224:	01088463          	beq	a7,a6,1322c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1940>
   13228:	d35fe06f          	j	11f5c <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x670>
   1322c:	01151463          	bne	a0,a7,13234 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1948>
   13230:	d65fe06f          	j	11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   13234:	06013583          	ld	a1,96(sp)
   13238:	00b51463          	bne	a0,a1,13240 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x1954>
   1323c:	d59fe06f          	j	11f94 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6a8>
   13240:	06813583          	ld	a1,104(sp)
   13244:	40b50533          	sub	a0,a0,a1
   13248:	00153813          	seqz	a6,a0
   1324c:	00280813          	add	a6,a6,2
   13250:	d49fe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>
	if(match_mask == 6) return 0;
   13254:	40b00833          	neg	a6,a1
   13258:	00387813          	and	a6,a6,3
   1325c:	d3dfe06f          	j	11f98 <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit+0x6ac>

0000000000013260 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>:
	while(node_stack_size);
	return found_hit;
}

template<typename T>
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   13260:	c1010113          	add	sp,sp,-1008
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13264:	00019337          	lui	t1,0x19
   13268:	90832787          	flw	fa5,-1784(t1) # 18908 <__DATA_BEGIN__>
   1326c:	3d212227          	fsw	fs2,964(sp)
	inline float operator[](int i) const { return e[i]; }
   13270:	01062907          	flw	fs2,16(a2)
   13274:	3b412e27          	fsw	fs4,956(sp)
   13278:	3ba12227          	fsw	fs10,932(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   1327c:	1927f0d3          	fdiv.s	ft1,fa5,fs2
	node_stack[3 * 32];

	rtm::vec3 inv_d = rtm::vec3(1.0f) / ray.d;

	uint32_t node_stack_size = 1u;
	node_stack[0].t = ray.t_min;
   13280:	00c62787          	flw	fa5,12(a2)
	inline float operator[](int i) const { return e[i]; }
   13284:	01462a07          	flw	fs4,20(a2)
   13288:	01862d07          	flw	fs10,24(a2)
   1328c:	00f12627          	fsw	fa5,12(sp)
   13290:	02f12827          	fsw	fa5,48(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13294:	90832787          	flw	fa5,-1784(t1)
   13298:	000197b7          	lui	a5,0x19
   1329c:	91c7a707          	flw	fa4,-1764(a5) # 1891c <__DATA_BEGIN__+0x14>
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   132a0:	36f10713          	add	a4,sp,879
	node_stack[0].data.is_leaf = false;
   132a4:	00600793          	li	a5,6
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   132a8:	00050813          	mv	a6,a0
   132ac:	3e813423          	sd	s0,1000(sp)
   132b0:	3e913023          	sd	s1,992(sp)
   132b4:	3d213c23          	sd	s2,984(sp)
   132b8:	3d313823          	sd	s3,976(sp)
   132bc:	3c812627          	fsw	fs0,972(sp)
   132c0:	3c912427          	fsw	fs1,968(sp)
   132c4:	3d312027          	fsw	fs3,960(sp)
   132c8:	3b512c27          	fsw	fs5,952(sp)
   132cc:	1947f153          	fdiv.s	ft2,fa5,fs4
   132d0:	3b612a27          	fsw	fs6,948(sp)
   132d4:	3b712827          	fsw	fs7,944(sp)
   132d8:	3b812627          	fsw	fs8,940(sp)
   132dc:	3b912427          	fsw	fs9,936(sp)
   132e0:	3bb12027          	fsw	fs11,928(sp)
   132e4:	000198b7          	lui	a7,0x19
   132e8:	00e12e27          	fsw	fa4,28(sp)
   132ec:	fc077713          	and	a4,a4,-64
	node_stack[0].data.is_leaf = false;
   132f0:	02f12a23          	sw	a5,52(sp)
	node_stack[0].data.fst_chld_ind = 0;
	node_stack[0].data.lst_chld_ofst = 3;

	bool found_hit = false;
   132f4:	00000513          	li	a0,0
	uint32_t node_stack_size = 1u;
   132f8:	00100e13          	li	t3,1
   132fc:	19a7f6d3          	fdiv.s	fa3,fa5,fs10
   13300:	20210e53          	fmv.s	ft8,ft2
   13304:	20108153          	fmv.s	ft2,ft1
   13308:	20d688d3          	fmv.s	fa7,fa3
	do
	{
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   1330c:	fffe0e1b          	addw	t3,t3,-1
   13310:	020e1e93          	sll	t4,t3,0x20
   13314:	01ded793          	srl	a5,t4,0x1d
   13318:	38078793          	add	a5,a5,896
   1331c:	02010e93          	add	t4,sp,32
   13320:	01d787b3          	add	a5,a5,t4
   13324:	c907b783          	ld	a5,-880(a5)
		if(current_entry.t >= hit.t) return found_hit;
   13328:	0006a507          	flw	fa0,0(a3)
   1332c:	f00787d3          	fmv.w.x	fa5,a5
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   13330:	02f13023          	sd	a5,32(sp)
		if(current_entry.t >= hit.t) return found_hit;
   13334:	a0f50ed3          	fle.s	t4,fa0,fa5
   13338:	240e9a63          	bnez	t4,1358c <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x32c>

		if(!current_entry.data.is_leaf)
   1333c:	02412e83          	lw	t4,36(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
			}
		}
		else
		{
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   13340:	0217d413          	srl	s0,a5,0x21
	inline float operator[](int i) const { return e[i]; }
   13344:	00062e87          	flw	ft9,0(a2)
		if(!current_entry.data.is_leaf)
   13348:	001efe93          	and	t4,t4,1
   1334c:	00462487          	flw	fs1,4(a2)
   13350:	00862c87          	flw	fs9,8(a2)
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   13354:	0247d793          	srl	a5,a5,0x24
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   13358:	00747413          	and	s0,s0,7
		if(!current_entry.data.is_leaf)
   1335c:	260e8c63          	beqz	t4,135d4 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x374>
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   13360:	00078e93          	mv	t4,a5
   13364:	0005bf03          	ld	t5,0(a1)
   13368:	00179793          	sll	a5,a5,0x1
   1336c:	01d787b3          	add	a5,a5,t4
   13370:	00279793          	sll	a5,a5,0x2
   13374:	0085bf83          	ld	t6,8(a1)
	if(gn_dot_d > 0.0f) bc = -bc;
   13378:	f0000453          	fmv.w.x	fs0,zero
   1337c:	00ff0f33          	add	t5,t5,a5
   13380:	01d40433          	add	s0,s0,t4
   13384:	00212827          	fsw	ft2,16(sp)
   13388:	01c12a27          	fsw	ft8,20(sp)
   1338c:	01112c27          	fsw	fa7,24(sp)
   13390:	0080006f          	j	13398 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x138>
   13394:	00078e93          	mv	t4,a5
	const Triangle tri(mesh.vertices[vi[0]], mesh.vertices[vi[1]], mesh.vertices[vi[2]]);
   13398:	004f6383          	lwu	t2,4(t5)
   1339c:	008f6283          	lwu	t0,8(t5)
   133a0:	000f6483          	lwu	s1,0(t5)
   133a4:	00139793          	sll	a5,t2,0x1
   133a8:	00129993          	sll	s3,t0,0x1
   133ac:	00149913          	sll	s2,s1,0x1
   133b0:	007787b3          	add	a5,a5,t2
   133b4:	009904b3          	add	s1,s2,s1
   133b8:	005983b3          	add	t2,s3,t0
   133bc:	00279793          	sll	a5,a5,0x2
   133c0:	00249293          	sll	t0,s1,0x2
   133c4:	00239393          	sll	t2,t2,0x2
   133c8:	00ff87b3          	add	a5,t6,a5
   133cc:	005f82b3          	add	t0,t6,t0
   133d0:	007f83b3          	add	t2,t6,t2
   133d4:	0083ae07          	flw	ft8,8(t2)
   133d8:	0002a507          	flw	fa0,0(t0)
   133dc:	0082a687          	flw	fa3,8(t0)
   133e0:	0007a287          	flw	ft5,0(a5)
   133e4:	0003a087          	flw	ft1,0(t2)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   133e8:	08de7853          	fsub.s	fa6,ft8,fa3
   133ec:	08a2f653          	fsub.s	fa2,ft5,fa0
	inline float operator[](int i) const { return e[i]; }
   133f0:	0043ab87          	flw	fs7,4(t2)
   133f4:	0042a587          	flw	fa1,4(t0)
   133f8:	0087a707          	flw	fa4,8(a5)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   133fc:	08a0f153          	fsub.s	ft2,ft1,fa0
   13400:	0850f9d3          	fsub.s	fs3,ft1,ft5
   13404:	08157c53          	fsub.s	fs8,fa0,ft1
   13408:	09d0f0d3          	fsub.s	ft1,ft1,ft9
   1340c:	08d77053          	fsub.s	ft0,fa4,fa3
   13410:	08bbfad3          	fsub.s	fs5,fs7,fa1
		(-(a[0] * b[2] - a[2] * b[0])),
   13414:	11067f53          	fmul.s	ft10,fa2,fa6
	inline float operator[](int i) const { return e[i]; }
   13418:	0047a787          	flw	fa5,4(a5)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1341c:	099778d3          	fsub.s	fa7,fa4,fs9
   13420:	00112227          	fsw	ft1,4(sp)
   13424:	089bf0d3          	fsub.s	ft1,fs7,fs1
   13428:	08b7f253          	fsub.s	ft4,fa5,fa1
	return vec3(a[1] * b[2] - a[2] * b[1],
   1342c:	f0207f47          	fmsub.s	ft10,ft0,ft2,ft10
   13430:	11507353          	fmul.s	ft6,ft0,fs5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13434:	099e71d3          	fsub.s	ft3,ft8,fs9
   13438:	0996f3d3          	fsub.s	ft7,fa3,fs9
   1343c:	08ee7753          	fsub.s	fa4,ft8,fa4
   13440:	0897ffd3          	fsub.s	ft11,fa5,fs1
   13444:	09c6f6d3          	fsub.s	fa3,fa3,ft8
		(-(a[0] * b[2] - a[2] * b[0])),
   13448:	1119fb53          	fmul.s	fs6,fs3,fa7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1344c:	09d2f2d3          	fsub.s	ft5,ft5,ft9
   13450:	00112027          	fsw	ft1,0(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   13454:	31027847          	fmsub.s	fa6,ft4,fa6,ft6
   13458:	01e12427          	fsw	ft10,8(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1345c:	11ea7353          	fmul.s	ft6,fs4,ft10
	return vec3(a[1] * b[2] - a[2] * b[1],
   13460:	00012f07          	flw	ft10,0(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13464:	0895fe53          	fsub.s	ft8,fa1,fs1
		(-(a[0] * b[2] - a[2] * b[0])),
   13468:	103c7dd3          	fmul.s	fs11,fs8,ft3
   1346c:	107670d3          	fmul.s	ft1,fa2,ft7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13470:	09d57553          	fsub.s	fa0,fa0,ft9
   13474:	08fbf7d3          	fsub.s	fa5,fs7,fa5
   13478:	0975f5d3          	fsub.s	fa1,fa1,fs7
		a[0] * b[1] - a[1] * b[0]);
   1347c:	10227153          	fmul.s	ft2,ft4,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   13480:	11f77bd3          	fmul.s	fs7,fa4,ft11
   13484:	b0577747          	fmsub.s	fa4,fa4,ft5,fs6
   13488:	11e6fb53          	fmul.s	fs6,fa3,ft10
   1348c:	00412f07          	flw	ft10,4(sp)
   13490:	11567147          	fmsub.s	ft2,fa2,fs5,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   13494:	31097343          	fmadd.s	ft6,fs2,fa6,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   13498:	d9e6f6c7          	fmsub.s	fa3,fa3,ft10,fs11
   1349c:	11c07dd3          	fmul.s	fs11,ft0,ft8
   134a0:	08a07047          	fmsub.s	ft0,ft0,fa0,ft1
   134a4:	b917f8c7          	fmsub.s	fa7,fa5,fa7,fs7
   134a8:	b035f1c7          	fmsub.s	ft3,fa1,ft3,fs6
		a[0] * b[1] - a[1] * b[0]);
   134ac:	1057f7d3          	fmul.s	fa5,fa5,ft5
	return vec3(a[1] * b[2] - a[2] * b[1],
   134b0:	d8727dc7          	fmsub.s	fs11,ft4,ft7,fs11
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134b4:	10ea7753          	fmul.s	fa4,fs4,fa4
		a[0] * b[1] - a[1] * b[0]);
   134b8:	11e5f5d3          	fmul.s	fa1,fa1,ft10
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134bc:	10da76d3          	fmul.s	fa3,fs4,fa3
		a[0] * b[1] - a[1] * b[0]);
   134c0:	10a27253          	fmul.s	ft4,ft4,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134c4:	100a7053          	fmul.s	ft0,fs4,ft0
   134c8:	302d7343          	fmadd.s	ft6,fs10,ft2,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   134cc:	00012087          	flw	ft1,0(sp)
   134d0:	79f9f7c7          	fmsub.s	fa5,fs3,ft11,fa5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134d4:	71197743          	fmadd.s	fa4,fs2,fa7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   134d8:	581c75c7          	fmsub.s	fa1,fs8,ft1,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134dc:	683971c3          	fmadd.s	ft3,fs2,ft3,fa3
	return vec3(a[1] * b[2] - a[2] * b[1],
   134e0:	21c67647          	fmsub.s	fa2,fa2,ft8,ft4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   134e4:	01b97dc3          	fmadd.s	fs11,fs2,fs11,ft0
	if(gn_dot_d > 0.0f) bc = -bc;
   134e8:	a06417d3          	flt.s	a5,fs0,ft6
   134ec:	70fd77c3          	fmadd.s	fa5,fs10,fa5,fa4
   134f0:	18bd71c3          	fmadd.s	ft3,fs10,fa1,ft3
   134f4:	d8cd7643          	fmadd.s	fa2,fs10,fa2,fs11
   134f8:	00078863          	beqz	a5,13508 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2a8>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   134fc:	20f797d3          	fneg.s	fa5,fa5
   13500:	203191d3          	fneg.s	ft3,ft3
   13504:	20c61653          	fneg.s	fa2,fa2
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   13508:	a08797d3          	flt.s	a5,fa5,fs0
   1350c:	06079263          	bnez	a5,13570 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x310>
   13510:	a08197d3          	flt.s	a5,ft3,fs0
   13514:	04079e63          	bnez	a5,13570 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x310>
   13518:	a08617d3          	flt.s	a5,fa2,fs0
   1351c:	04079a63          	bnez	a5,13570 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x310>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   13520:	00812707          	flw	fa4,8(sp)
   13524:	10ee7e53          	fmul.s	ft8,ft8,fa4
	if(t < ray.t_min || t > hit.t) return false;
   13528:	00c12707          	flw	fa4,12(sp)
   1352c:	e1057543          	fmadd.s	fa0,fa0,fa6,ft8
   13530:	5023f3c3          	fmadd.s	ft7,ft7,ft2,fa0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   13534:	1863f3d3          	fdiv.s	ft7,ft7,ft6
	if(t < ray.t_min || t > hit.t) return false;
   13538:	a0e397d3          	flt.s	a5,ft7,fa4
   1353c:	02079a63          	bnez	a5,13570 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x310>
   13540:	0006a707          	flw	fa4,0(a3)
   13544:	a07717d3          	flt.s	a5,fa4,ft7
   13548:	02079463          	bnez	a5,13570 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x310>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   1354c:	0037f753          	fadd.s	fa4,fa5,ft3
	hit.t = t ;
   13550:	0076a027          	fsw	ft7,0(a3)
		hit.id = face_index;
   13554:	01d6a623          	sw	t4,12(a3)
		return true;
   13558:	00100513          	li	a0,1
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   1355c:	00c77753          	fadd.s	fa4,fa4,fa2
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   13560:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   13564:	18e1f1d3          	fdiv.s	ft3,ft3,fa4
	e[0] = v[0];
   13568:	00f6a227          	fsw	fa5,4(a3)
	e[1] = v[1];
   1356c:	0036a427          	fsw	ft3,8(a3)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   13570:	00cf0f13          	add	t5,t5,12
   13574:	001e879b          	addw	a5,t4,1
   13578:	e1d41ee3          	bne	s0,t4,13394 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x134>
   1357c:	01012107          	flw	ft2,16(sp)
   13580:	01412e07          	flw	ft8,20(sp)
   13584:	01812887          	flw	fa7,24(sp)
		}
	}
	while(node_stack_size);
   13588:	d80e12e3          	bnez	t3,1330c <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xac>
	return found_hit;
   1358c:	3e813403          	ld	s0,1000(sp)
   13590:	3e013483          	ld	s1,992(sp)
   13594:	3d813903          	ld	s2,984(sp)
   13598:	3d013983          	ld	s3,976(sp)
   1359c:	3cc12407          	flw	fs0,972(sp)
   135a0:	3c812487          	flw	fs1,968(sp)
   135a4:	3c412907          	flw	fs2,964(sp)
   135a8:	3c012987          	flw	fs3,960(sp)
   135ac:	3bc12a07          	flw	fs4,956(sp)
   135b0:	3b812a87          	flw	fs5,952(sp)
   135b4:	3b412b07          	flw	fs6,948(sp)
   135b8:	3b012b87          	flw	fs7,944(sp)
   135bc:	3ac12c07          	flw	fs8,940(sp)
   135c0:	3a812c87          	flw	fs9,936(sp)
   135c4:	3a412d07          	flw	fs10,932(sp)
   135c8:	3a012d87          	flw	fs11,928(sp)
   135cc:	3f010113          	add	sp,sp,1008
   135d0:	00008067          	ret
	for(uint i = 0; i < sizeof(T) / sizeof(uint64_t); ++i)
   135d4:	01c12787          	flw	fa5,28(sp)
			move_to_stack(node4, blas[current_entry.data.fst_chld_ind]);
   135d8:	00679793          	sll	a5,a5,0x6
		uint64_t r = ((uint64_t*)&src)[i];
   135dc:	00f807b3          	add	a5,a6,a5
   135e0:	09d7fed3          	fsub.s	ft9,fa5,ft9
   135e4:	0897f5d3          	fsub.s	fa1,fa5,fs1
   135e8:	0997f653          	fsub.s	fa2,fa5,fs9
   135ec:	0287bf83          	ld	t6,40(a5)
   135f0:	0307bf03          	ld	t5,48(a5)
   135f4:	0387be83          	ld	t4,56(a5)
   135f8:	0087b983          	ld	s3,8(a5)
   135fc:	0107b903          	ld	s2,16(a5)
   13600:	0187b483          	ld	s1,24(a5)
   13604:	0207b383          	ld	t2,32(a5)
		((uint64_t*)&dst)[i] = r;
   13608:	0007b783          	ld	a5,0(a5)
      if (__a < __b)
   1360c:	00c62187          	flw	ft3,12(a2)
      if (__b < __a)
   13610:	01c62007          	flw	ft0,28(a2)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13614:	9108a087          	flw	ft1,-1776(a7) # 18910 <__DATA_BEGIN__+0x8>
   13618:	90832207          	flw	ft4,-1784(t1)
   1361c:	01070293          	add	t0,a4,16 # 19010 <__BSS_END__+0x6d8>
   13620:	00441413          	sll	s0,s0,0x4
		((uint64_t*)&dst)[i] = r;
   13624:	03f73423          	sd	t6,40(a4)
   13628:	03e73823          	sd	t5,48(a4)
   1362c:	03d73c23          	sd	t4,56(a4)
   13630:	00f73023          	sd	a5,0(a4)
   13634:	01373423          	sd	s3,8(a4)
   13638:	01273823          	sd	s2,16(a4)
   1363c:	00973c23          	sd	s1,24(a4)
   13640:	02773023          	sd	t2,32(a4)
   13644:	00070e93          	mv	t4,a4
   13648:	008282b3          	add	t0,t0,s0
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   1364c:	3f800f37          	lui	t5,0x3f800
   13650:	03010f93          	add	t6,sp,48
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   13654:	000ed783          	lhu	a5,0(t4)
   13658:	201087d3          	fmv.s	fa5,ft1
   1365c:	00f7d393          	srl	t2,a5,0xf
   13660:	00039c63          	bnez	t2,13678 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x418>
   13664:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   13668:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   1366c:	f00787d3          	fmv.w.x	fa5,a5
   13670:	0847f7d3          	fsub.s	fa5,fa5,ft4
   13674:	00f7f7d3          	fadd.s	fa5,fa5,fa5
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   13678:	006ed783          	lhu	a5,6(t4)
   1367c:	000193b7          	lui	t2,0x19
   13680:	9103a807          	flw	fa6,-1776(t2) # 18910 <__DATA_BEGIN__+0x8>
   13684:	00f7d393          	srl	t2,a5,0xf
   13688:	02039063          	bnez	t2,136a8 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x448>
   1368c:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   13690:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13694:	000193b7          	lui	t2,0x19
   13698:	f0078753          	fmv.w.x	fa4,a5
   1369c:	9083a687          	flw	fa3,-1784(t2) # 18908 <__DATA_BEGIN__>
   136a0:	08d77853          	fsub.s	fa6,fa4,fa3
   136a4:	01087853          	fadd.s	fa6,fa6,fa6
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   136a8:	002ed783          	lhu	a5,2(t4)
   136ac:	000193b7          	lui	t2,0x19
   136b0:	9103a687          	flw	fa3,-1776(t2) # 18910 <__DATA_BEGIN__+0x8>
   136b4:	00f7d393          	srl	t2,a5,0xf
   136b8:	02039063          	bnez	t2,136d8 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x478>
   136bc:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   136c0:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   136c4:	000193b7          	lui	t2,0x19
   136c8:	f0078753          	fmv.w.x	fa4,a5
   136cc:	9083a687          	flw	fa3,-1784(t2) # 18908 <__DATA_BEGIN__>
   136d0:	08d776d3          	fsub.s	fa3,fa4,fa3
   136d4:	00d6f6d3          	fadd.s	fa3,fa3,fa3
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   136d8:	008ed783          	lhu	a5,8(t4)
   136dc:	000193b7          	lui	t2,0x19
   136e0:	9103a387          	flw	ft7,-1776(t2) # 18910 <__DATA_BEGIN__+0x8>
   136e4:	00f7d393          	srl	t2,a5,0xf
   136e8:	02039063          	bnez	t2,13708 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x4a8>
   136ec:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   136f0:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   136f4:	000193b7          	lui	t2,0x19
   136f8:	f0078753          	fmv.w.x	fa4,a5
   136fc:	9083a287          	flw	ft5,-1784(t2) # 18908 <__DATA_BEGIN__>
   13700:	085773d3          	fsub.s	ft7,fa4,ft5
   13704:	0073f3d3          	fadd.s	ft7,ft7,ft7
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   13708:	004ed783          	lhu	a5,4(t4)
   1370c:	000193b7          	lui	t2,0x19
   13710:	9103a707          	flw	fa4,-1776(t2) # 18910 <__DATA_BEGIN__+0x8>
   13714:	00f7d393          	srl	t2,a5,0xf
   13718:	02039063          	bnez	t2,13738 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x4d8>
   1371c:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   13720:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13724:	000193b7          	lui	t2,0x19
   13728:	f0078753          	fmv.w.x	fa4,a5
   1372c:	9083a287          	flw	ft5,-1784(t2) # 18908 <__DATA_BEGIN__>
   13730:	08577753          	fsub.s	fa4,fa4,ft5
   13734:	00e77753          	fadd.s	fa4,fa4,fa4
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   13738:	00aed783          	lhu	a5,10(t4)
   1373c:	000193b7          	lui	t2,0x19
   13740:	9103a307          	flw	ft6,-1776(t2) # 18910 <__DATA_BEGIN__+0x8>
   13744:	00f7d393          	srl	t2,a5,0xf
   13748:	02039063          	bnez	t2,13768 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x508>
   1374c:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   13750:	01e7e7b3          	or	a5,a5,t5
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13754:	000193b7          	lui	t2,0x19
   13758:	f00782d3          	fmv.w.x	ft5,a5
   1375c:	9083a307          	flw	ft6,-1784(t2) # 18908 <__DATA_BEGIN__>
   13760:	0862f353          	fsub.s	ft6,ft5,ft6
   13764:	00637353          	fadd.s	ft6,ft6,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13768:	00fef7d3          	fadd.s	fa5,ft9,fa5
   1376c:	010ef853          	fadd.s	fa6,ft9,fa6
   13770:	00d5f6d3          	fadd.s	fa3,fa1,fa3
   13774:	0075f3d3          	fadd.s	ft7,fa1,ft7
   13778:	00e67753          	fadd.s	fa4,fa2,fa4
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1377c:	1027f7d3          	fmul.s	fa5,fa5,ft2
   13780:	10287853          	fmul.s	fa6,fa6,ft2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13784:	00667353          	fadd.s	ft6,fa2,ft6
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   13788:	11c3f3d3          	fmul.s	ft7,ft7,ft8
   1378c:	11c6f6d3          	fmul.s	fa3,fa3,ft8
   13790:	11177753          	fmul.s	fa4,fa4,fa7
   13794:	290782d3          	fmin.s	ft5,fa5,fa6
	if (tmin > tmax) return ray.t_max;//no hit || behind
   13798:	290797d3          	fmax.s	fa5,fa5,fa6
   1379c:	11137353          	fmul.s	ft6,ft6,fa7
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   137a0:	28768853          	fmin.s	fa6,fa3,ft7
   137a4:	283292d3          	fmax.s	ft5,ft5,ft3
	if (tmin > tmax) return ray.t_max;//no hit || behind
   137a8:	287696d3          	fmax.s	fa3,fa3,ft7
   137ac:	280787d3          	fmin.s	fa5,fa5,ft0
   137b0:	286703d3          	fmin.s	ft7,fa4,ft6
   137b4:	290292d3          	fmax.s	ft5,ft5,fa6
   137b8:	28d787d3          	fmin.s	fa5,fa5,fa3
   137bc:	28671753          	fmax.s	fa4,fa4,ft6
   137c0:	287296d3          	fmax.s	fa3,ft5,ft7
   137c4:	28e787d3          	fmin.s	fa5,fa5,fa4
   137c8:	a0d797d3          	flt.s	a5,fa5,fa3
   137cc:	00078463          	beqz	a5,137d4 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x574>
   137d0:	200006d3          	fmv.s	fa3,ft0
				new_entry.data = node4.nodes[i].data;
   137d4:	00cea383          	lw	t2,12(t4)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   137d8:	a0a697d3          	flt.s	a5,fa3,fa0
				new_entry.data = node4.nodes[i].data;
   137dc:	02712623          	sw	t2,44(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   137e0:	00079a63          	bnez	a5,137f4 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x594>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   137e4:	010e8e93          	add	t4,t4,16
   137e8:	e7d296e3          	bne	t0,t4,13654 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3f4>
	while(node_stack_size);
   137ec:	b20e10e3          	bnez	t3,1330c <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xac>
   137f0:	d9dff06f          	j	1358c <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x32c>
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   137f4:	001e091b          	addw	s2,t3,1
	for(; j != min; --j)
   137f8:	060e0263          	beqz	t3,1385c <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x5fc>
   137fc:	fffe079b          	addw	a5,t3,-1
   13800:	020e1393          	sll	t2,t3,0x20
   13804:	01d3de13          	srl	t3,t2,0x1d
   13808:	02079393          	sll	t2,a5,0x20
   1380c:	01d3d793          	srl	a5,t2,0x1d
   13810:	000f8993          	mv	s3,t6
   13814:	01cf8e33          	add	t3,t6,t3
   13818:	00ff87b3          	add	a5,t6,a5
   1381c:	0180006f          	j	13834 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x5d4>
		stack[j] = stack[j - 1];
   13820:	0007b383          	ld	t2,0(a5)
	for(; j != min; --j)
   13824:	ff8e0e13          	add	t3,t3,-8
		stack[j] = stack[j - 1];
   13828:	007e3423          	sd	t2,8(t3)
	for(; j != min; --j)
   1382c:	02ff8a63          	beq	t6,a5,13860 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x600>
   13830:	00040793          	mv	a5,s0
		if(stack[j - 1].t >= entry.t) break;
   13834:	0007a787          	flw	fa5,0(a5)
		stack[j] = stack[j - 1];
   13838:	000e0493          	mv	s1,t3
	for(; j != min; --j)
   1383c:	ff878413          	add	s0,a5,-8
		if(stack[j - 1].t >= entry.t) break;
   13840:	a0f683d3          	fle.s	t2,fa3,fa5
   13844:	fc038ee3          	beqz	t2,13820 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x5c0>
	stack[j] = entry;
   13848:	02d12427          	fsw	fa3,40(sp)
   1384c:	02813783          	ld	a5,40(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   13850:	00090e13          	mv	t3,s2
	stack[j] = entry;
   13854:	00f4b023          	sd	a5,0(s1)
}
   13858:	f8dff06f          	j	137e4 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x584>
   1385c:	03010993          	add	s3,sp,48
	stack[j] = entry;
   13860:	02d12427          	fsw	fa3,40(sp)
   13864:	02813783          	ld	a5,40(sp)
   13868:	00098493          	mv	s1,s3
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   1386c:	00090e13          	mv	t3,s2
	stack[j] = entry;
   13870:	00f4b023          	sd	a5,0(s1)
   13874:	f71ff06f          	j	137e4 <_Z9intersectI12MeshPointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x584>

0000000000013878 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>:
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   13878:	81010113          	add	sp,sp,-2032
   1387c:	79b13823          	sd	s11,1936(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13880:	00019db7          	lui	s11,0x19
   13884:	908da787          	flw	fa5,-1784(s11) # 18908 <__DATA_BEGIN__>
   13888:	77712827          	fsw	fs7,1904(sp)
	inline float operator[](int i) const { return e[i]; }
   1388c:	01062b87          	flw	fs7,16(a2)
   13890:	01462687          	flw	fa3,20(a2)
   13894:	77b12027          	fsw	fs11,1888(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13898:	1977f753          	fdiv.s	fa4,fa5,fs7
	inline float operator[](int i) const { return e[i]; }
   1389c:	01862d87          	flw	fs11,24(a2)
   138a0:	7e813423          	sd	s0,2024(sp)
   138a4:	7e913023          	sd	s1,2016(sp)
   138a8:	7d213c23          	sd	s2,2008(sp)
   138ac:	7d313823          	sd	s3,2000(sp)
   138b0:	7d413423          	sd	s4,1992(sp)
   138b4:	7d513023          	sd	s5,1984(sp)
   138b8:	7b613c23          	sd	s6,1976(sp)
   138bc:	7b713823          	sd	s7,1968(sp)
   138c0:	7b813423          	sd	s8,1960(sp)
   138c4:	7b913023          	sd	s9,1952(sp)
   138c8:	79a13c23          	sd	s10,1944(sp)
   138cc:	78812627          	fsw	fs0,1932(sp)
   138d0:	78912427          	fsw	fs1,1928(sp)
   138d4:	79212227          	fsw	fs2,1924(sp)
   138d8:	79312027          	fsw	fs3,1920(sp)
   138dc:	77412e27          	fsw	fs4,1916(sp)
   138e0:	77512c27          	fsw	fs5,1912(sp)
   138e4:	77612a27          	fsw	fs6,1908(sp)
   138e8:	77812627          	fsw	fs8,1900(sp)
   138ec:	77912427          	fsw	fs9,1896(sp)
   138f0:	77a12227          	fsw	fs10,1892(sp)
   138f4:	f2010113          	add	sp,sp,-224
   138f8:	0cd12427          	fsw	fa3,200(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   138fc:	18d7f6d3          	fdiv.s	fa3,fa5,fa3
	e[0] *= v[0];
   13900:	000197b7          	lui	a5,0x19
   13904:	90c7a607          	flw	fa2,-1780(a5) # 1890c <__DATA_BEGIN__+0x4>
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13908:	04e12c27          	fsw	fa4,88(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1390c:	000197b7          	lui	a5,0x19
	node_stack[0].t = ray.t_min;
   13910:	00c62707          	flw	fa4,12(a2)
	e[0] *= v[0];
   13914:	04c12627          	fsw	fa2,76(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13918:	9187ae87          	flw	ft9,-1768(a5) # 18918 <__DATA_BEGIN__+0x10>
   1391c:	000197b7          	lui	a5,0x19
   13920:	9207a607          	flw	fa2,-1760(a5) # 18920 <__DATA_BEGIN__+0x18>
   13924:	000197b7          	lui	a5,0x19
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   13928:	0db12627          	fsw	fs11,204(sp)
   1392c:	04c12827          	fsw	fa2,80(sp)
   13930:	9247a607          	flw	fa2,-1756(a5) # 18924 <__DATA_BEGIN__+0x1c>
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   13934:	7cf10793          	add	a5,sp,1999
   13938:	fc07f993          	and	s3,a5,-64
	node_stack[0].data.is_leaf = false;
   1393c:	00600793          	li	a5,6
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   13940:	00060813          	mv	a6,a2
   13944:	000194b7          	lui	s1,0x19
   13948:	04c12a27          	fsw	fa2,84(sp)
   1394c:	19b7f7d3          	fdiv.s	fa5,fa5,fs11
   13950:	217b8dd3          	fmv.s	fs11,fs7
   13954:	00050a13          	mv	s4,a0
   13958:	00068913          	mv	s2,a3
   1395c:	04d12e27          	fsw	fa3,92(sp)
	node_stack[0].t = ray.t_min;
   13960:	48e12827          	fsw	fa4,1168(sp)
	node_stack[0].data.is_leaf = false;
   13964:	48f12a23          	sw	a5,1172(sp)
	bool found_hit = false;
   13968:	0c013823          	sd	zero,208(sp)
	uint32_t node_stack_size = 1u;
   1396c:	00100413          	li	s0,1
   13970:	00058393          	mv	t2,a1
   13974:	06f12027          	fsw	fa5,96(sp)
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   13978:	fff4071b          	addw	a4,s0,-1
   1397c:	02071693          	sll	a3,a4,0x20
   13980:	01d6d793          	srl	a5,a3,0x1d
   13984:	75078793          	add	a5,a5,1872
   13988:	0f010693          	add	a3,sp,240
   1398c:	00d787b3          	add	a5,a5,a3
   13990:	c507b783          	ld	a5,-944(a5)
		if(current_entry.t >= hit.t) return found_hit;
   13994:	00092407          	flw	fs0,0(s2)
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   13998:	0007041b          	sext.w	s0,a4
		if(current_entry.t >= hit.t) return found_hit;
   1399c:	f00787d3          	fmv.w.x	fa5,a5
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   139a0:	0ef13c23          	sd	a5,248(sp)
		if(current_entry.t >= hit.t) return found_hit;
   139a4:	a0f40753          	fle.s	a4,fs0,fa5
   139a8:	00070463          	beqz	a4,139b0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x138>
   139ac:	4400106f          	j	14dec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1574>
		if(!current_entry.data.is_leaf)
   139b0:	0fc12683          	lw	a3,252(sp)
   139b4:	00019bb7          	lui	s7,0x19
   139b8:	91cba787          	flw	fa5,-1764(s7) # 1891c <__DATA_BEGIN__+0x14>
	inline float operator[](int i) const { return e[i]; }
   139bc:	00082c87          	flw	fs9,0(a6)
   139c0:	00482b87          	flw	fs7,4(a6)
   139c4:	00882d07          	flw	fs10,8(a6)
   139c8:	0016f693          	and	a3,a3,1
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   139cc:	0217d713          	srl	a4,a5,0x21
		if(!current_entry.data.is_leaf)
   139d0:	0ad13823          	sd	a3,176(sp)
   139d4:	0997f6d3          	fsub.s	fa3,fa5,fs9
   139d8:	0977f753          	fsub.s	fa4,fa5,fs7
      if (__a < __b)
   139dc:	00c82107          	flw	ft2,12(a6)
   139e0:	09a7f7d3          	fsub.s	fa5,fa5,fs10
      if (__b < __a)
   139e4:	01c82087          	flw	ft1,28(a6)
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   139e8:	0247d793          	srl	a5,a5,0x24
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   139ec:	00777713          	and	a4,a4,7
		if(!current_entry.data.is_leaf)
   139f0:	00069463          	bnez	a3,139f8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x180>
   139f4:	4880106f          	j	14e7c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1604>
	move_to_stack(header, tes_tree.headers[patch_index]);
   139f8:	0003b683          	ld	a3,0(t2)
   139fc:	00f70733          	add	a4,a4,a5
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   13a00:	02882507          	flw	fa0,40(a6)
	const TesselationTree4::CompressedNode4* nodes = &tes_tree.nodes[header.root_node_offset];
   13a04:	0083b603          	ld	a2,8(t2)
   13a08:	00170713          	add	a4,a4,1
   13a0c:	00679793          	sll	a5,a5,0x6
   13a10:	219c8b53          	fmv.s	fs6,fs9
   13a14:	00671713          	sll	a4,a4,0x6
	const CompactTri* triangles = &tes_tree.triangles[header.root_tri_offset];
   13a18:	0103bb03          	ld	s6,16(t2)
   13a1c:	21ad0c53          	fmv.s	fs8,fs10
   13a20:	20840cd3          	fmv.s	fs9,fs0
   13a24:	201082d3          	fmv.s	ft5,ft1
   13a28:	00f685b3          	add	a1,a3,a5
   13a2c:	00e687b3          	add	a5,a3,a4
	const TesselationTree4::CompressedNode4* nodes = &tes_tree.nodes[header.root_node_offset];
   13a30:	08c13423          	sd	a2,136(sp)
   13a34:	0af13c23          	sd	a5,184(sp)
   13a38:	00019ab7          	lui	s5,0x19
   13a3c:	0c813c23          	sd	s0,216(sp)
   13a40:	0db12027          	fsw	fs11,192(sp)
   13a44:	0ca12227          	fsw	fa0,196(sp)
   13a48:	08b13823          	sd	a1,144(sp)
   13a4c:	0f413023          	sd	s4,224(sp)
   13a50:	0e713423          	sd	t2,232(sp)
		uint64_t r = ((uint64_t*)&src)[i];
   13a54:	09013583          	ld	a1,144(sp)
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   13a58:	0c412607          	flw	fa2,196(sp)
   13a5c:	0105b503          	ld	a0,16(a1)
   13a60:	0185b883          	ld	a7,24(a1)
   13a64:	0005b783          	ld	a5,0(a1)
   13a68:	f00505d3          	fmv.w.x	fa1,a0
   13a6c:	0085b603          	ld	a2,8(a1)
   13a70:	0205b703          	ld	a4,32(a1)
   13a74:	10b67653          	fmul.s	fa2,fa2,fa1
   13a78:	0285b683          	ld	a3,40(a1)
   13a7c:	0305be03          	ld	t3,48(a1)
   13a80:	0385b303          	ld	t1,56(a1)
		((uint64_t*)&dst)[i] = r;
   13a84:	0519bc23          	sd	a7,88(s3)
   13a88:	04c12427          	fsw	fa2,72(sp)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13a8c:	000195b7          	lui	a1,0x19
	const TesselationTree4::CompressedNode4* nodes = &tes_tree.nodes[header.root_node_offset];
   13a90:	02055293          	srl	t0,a0,0x20
	const CompactTri* triangles = &tes_tree.triangles[header.root_tri_offset];
   13a94:	02089893          	sll	a7,a7,0x20
   13a98:	03079513          	sll	a0,a5,0x30
   13a9c:	9105a607          	flw	fa2,-1776(a1) # 18910 <__DATA_BEGIN__+0x8>
   13aa0:	0208d893          	srl	a7,a7,0x20
   13aa4:	02054463          	bltz	a0,13acc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x254>
   13aa8:	0107951b          	sllw	a0,a5,0x10
   13aac:	0105551b          	srlw	a0,a0,0x10
   13ab0:	0085151b          	sllw	a0,a0,0x8
   13ab4:	3f800eb7          	lui	t4,0x3f800
	return *((float*)&u);
   13ab8:	01d56533          	or	a0,a0,t4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13abc:	908da607          	flw	fa2,-1784(s11)
   13ac0:	f00505d3          	fmv.w.x	fa1,a0
   13ac4:	08c5f653          	fsub.s	fa2,fa1,fa2
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   13ac8:	00c67653          	fadd.s	fa2,fa2,fa2
   13acc:	0307d513          	srl	a0,a5,0x30
   13ad0:	0007d463          	bgez	a5,13ad8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x260>
   13ad4:	2b00106f          	j	14d84 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x150c>
   13ad8:	0085151b          	sllw	a0,a0,0x8
   13adc:	3f800eb7          	lui	t4,0x3f800
	return *((float*)&u);
   13ae0:	01d56533          	or	a0,a0,t4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13ae4:	908da587          	flw	fa1,-1784(s11)
   13ae8:	f0050553          	fmv.w.x	fa0,a0
   13aec:	08b57353          	fsub.s	ft6,fa0,fa1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   13af0:	00637353          	fadd.s	ft6,ft6,ft6
   13af4:	4107de9b          	sraw	t4,a5,0x10
   13af8:	0107d51b          	srlw	a0,a5,0x10
   13afc:	000ed463          	bgez	t4,13b04 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x28c>
   13b00:	27c0106f          	j	14d7c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1504>
   13b04:	0085151b          	sllw	a0,a0,0x8
   13b08:	3f800eb7          	lui	t4,0x3f800
	return *((float*)&u);
   13b0c:	01d56533          	or	a0,a0,t4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13b10:	908da587          	flw	fa1,-1784(s11)
   13b14:	f0050553          	fmv.w.x	fa0,a0
   13b18:	08b57053          	fsub.s	ft0,fa0,fa1
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   13b1c:	00007053          	fadd.s	ft0,ft0,ft0
   13b20:	03061513          	sll	a0,a2,0x30
   13b24:	00055463          	bgez	a0,13b2c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2b4>
   13b28:	24c0106f          	j	14d74 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14fc>
   13b2c:	0106151b          	sllw	a0,a2,0x10
   13b30:	0105551b          	srlw	a0,a0,0x10
   13b34:	0085151b          	sllw	a0,a0,0x8
   13b38:	3f800eb7          	lui	t4,0x3f800
	return *((float*)&u);
   13b3c:	01d56533          	or	a0,a0,t4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13b40:	908da587          	flw	fa1,-1784(s11)
   13b44:	f0050553          	fmv.w.x	fa0,a0
   13b48:	08b571d3          	fsub.s	ft3,fa0,fa1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   13b4c:	0031f1d3          	fadd.s	ft3,ft3,ft3
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   13b50:	0207d793          	srl	a5,a5,0x20
   13b54:	03079513          	sll	a0,a5,0x30
   13b58:	03079e93          	sll	t4,a5,0x30
   13b5c:	03055513          	srl	a0,a0,0x30
   13b60:	000ed463          	bgez	t4,13b68 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2f0>
   13b64:	2080106f          	j	14d6c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14f4>
   13b68:	0085179b          	sllw	a5,a0,0x8
   13b6c:	3f800537          	lui	a0,0x3f800
	return *((float*)&u);
   13b70:	00a7e7b3          	or	a5,a5,a0
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13b74:	908da587          	flw	fa1,-1784(s11)
   13b78:	f0078553          	fmv.w.x	fa0,a5
   13b7c:	08b57253          	fsub.s	ft4,fa0,fa1
   13b80:	00427253          	fadd.s	ft4,ft4,ft4
   13b84:	4106551b          	sraw	a0,a2,0x10
   13b88:	0106579b          	srlw	a5,a2,0x10
   13b8c:	00055463          	bgez	a0,13b94 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x31c>
   13b90:	1d40106f          	j	14d64 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14ec>
   13b94:	0087979b          	sllw	a5,a5,0x8
   13b98:	3f800537          	lui	a0,0x3f800
	return *((float*)&u);
   13b9c:	00a7e7b3          	or	a5,a5,a0
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   13ba0:	908da587          	flw	fa1,-1784(s11)
   13ba4:	f0078553          	fmv.w.x	fa0,a5
   13ba8:	08b575d3          	fsub.s	fa1,fa0,fa1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   13bac:	00b5f5d3          	fadd.s	fa1,fa1,fa1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13bb0:	00d67653          	fadd.s	fa2,fa2,fa3
   13bb4:	0066f353          	fadd.s	ft6,fa3,ft6
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   13bb8:	05812507          	flw	fa0,88(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13bbc:	00077053          	fadd.s	ft0,fa4,ft0
   13bc0:	003771d3          	fadd.s	ft3,fa4,ft3
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   13bc4:	10a67653          	fmul.s	fa2,fa2,fa0
   13bc8:	10a37353          	fmul.s	ft6,ft6,fa0
   13bcc:	05c12507          	flw	fa0,92(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13bd0:	0047f253          	fadd.s	ft4,fa5,ft4
   13bd4:	00b7f5d3          	fadd.s	fa1,fa5,fa1
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   13bd8:	10a07053          	fmul.s	ft0,ft0,fa0
   13bdc:	10a1f1d3          	fmul.s	ft3,ft3,fa0
      if (__a < __b)
   13be0:	06212227          	fsw	ft2,100(sp)
   13be4:	20210553          	fmv.s	fa0,ft2
   13be8:	06012107          	flw	ft2,96(sp)
   13bec:	286600d3          	fmin.s	ft1,fa2,ft6
	if (tmin > tmax) return ray.t_max;//no hit || behind
   13bf0:	28661653          	fmax.s	fa2,fa2,ft6
   13bf4:	1025f5d3          	fmul.s	fa1,fa1,ft2
   13bf8:	10227253          	fmul.s	ft4,ft4,ft2
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   13bfc:	28a090d3          	fmax.s	ft1,ft1,fa0
   13c00:	28300153          	fmin.s	ft2,ft0,ft3
	if (tmin > tmax) return ray.t_max;//no hit || behind
   13c04:	28560653          	fmin.s	fa2,fa2,ft5
   13c08:	28301053          	fmax.s	ft0,ft0,ft3
   13c0c:	282090d3          	fmax.s	ft1,ft1,ft2
   13c10:	28b20153          	fmin.s	ft2,ft4,fa1
   13c14:	28060653          	fmin.s	fa2,fa2,ft0
   13c18:	28b21253          	fmax.s	ft4,ft4,fa1
   13c1c:	282095d3          	fmax.s	fa1,ft1,ft2
   13c20:	28460653          	fmin.s	fa2,fa2,ft4
   13c24:	a0b617d3          	flt.s	a5,fa2,fa1
   13c28:	00079463          	bnez	a5,13c30 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3b8>
	return tmin;
   13c2c:	20b582d3          	fmv.s	ft5,fa1
	float f0 = u24_to_f32(dw0 & 0xffffff);
   13c30:	02871793          	sll	a5,a4,0x28
   13c34:	0287d793          	srl	a5,a5,0x28
	return *((float*)&u);
   13c38:	3f800eb7          	lui	t4,0x3f800
   13c3c:	01d7e7b3          	or	a5,a5,t4
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13c40:	9104a587          	flw	fa1,-1776(s1) # 18910 <__DATA_BEGIN__+0x8>
   13c44:	914aa607          	flw	fa2,-1772(s5) # 18914 <__DATA_BEGIN__+0xc>
   13c48:	f0078553          	fmv.w.x	fa0,a5
	node_stack[0].dbs = header.node.dbs;
   13c4c:	02065513          	srl	a0,a2,0x20
   13c50:	01775613          	srl	a2,a4,0x17
	node_stack[0].t = intersect(decompress(header.node.aabb), ray, inv_d);
   13c54:	10512827          	fsw	ft5,272(sp)
	node_stack[0].node_index = 0;
   13c58:	10012a23          	sw	zero,276(sp)
	node_stack[0].dbs = header.node.dbs;
   13c5c:	10a12c23          	sw	a0,280(sp)
	uint32_t hit_lod = ~0u;
   13c60:	00167613          	and	a2,a2,1
   13c64:	60b57643          	fmadd.s	fa2,fa0,fa1,fa2
   13c68:	00060463          	beqz	a2,13c70 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3f8>
   13c6c:	908da607          	flw	fa2,-1784(s11)
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   13c70:	008e179b          	sllw	a5,t3,0x8
   13c74:	0386d613          	srl	a2,a3,0x38
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   13c78:	03075513          	srl	a0,a4,0x30
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   13c7c:	00f66633          	or	a2,a2,a5
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   13c80:	01875713          	srl	a4,a4,0x18
   13c84:	010007b7          	lui	a5,0x1000
   13c88:	fff78793          	add	a5,a5,-1 # ffffff <__global_pointer$+0xfe6ef7>
   13c8c:	0007071b          	sext.w	a4,a4
   13c90:	3f800fb7          	lui	t6,0x3f800
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   13c94:	01069e9b          	sllw	t4,a3,0x10
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   13c98:	00f77d33          	and	s10,a4,a5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   13c9c:	01d56533          	or	a0,a0,t4
	return *((float*)&u);
   13ca0:	01fd6d33          	or	s10,s10,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13ca4:	f00d0553          	fmv.w.x	fa0,s10
   13ca8:	06c12427          	fsw	fa2,104(sp)
   13cac:	0005051b          	sext.w	a0,a0
   13cb0:	914aa607          	flw	fa2,-1772(s5)
   13cb4:	00f57cb3          	and	s9,a0,a5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   13cb8:	0086df13          	srl	t5,a3,0x8
	return *((float*)&u);
   13cbc:	01fcecb3          	or	s9,s9,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13cc0:	60b571c3          	fmadd.s	ft3,fa0,fa1,fa2
   13cc4:	000f0f1b          	sext.w	t5,t5
   13cc8:	f00c8553          	fmv.w.x	fa0,s9
   13ccc:	00ff7c33          	and	s8,t5,a5
	return *((float*)&u);
   13cd0:	01fc6c33          	or	s8,s8,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13cd4:	60b57143          	fmadd.s	ft2,fa0,fa1,fa2
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   13cd8:	4206d693          	sra	a3,a3,0x20
   13cdc:	f00c0553          	fmv.w.x	fa0,s8
   13ce0:	00f6fa33          	and	s4,a3,a5
	return *((float*)&u);
   13ce4:	01fa6a33          	or	s4,s4,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13ce8:	60b570c3          	fmadd.s	ft1,fa0,fa1,fa2
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   13cec:	0006061b          	sext.w	a2,a2
   13cf0:	f00a0553          	fmv.w.x	fa0,s4
   13cf4:	00f67433          	and	s0,a2,a5
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   13cf8:	010e5e93          	srl	t4,t3,0x10
	return *((float*)&u);
   13cfc:	01f46433          	or	s0,s0,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13d00:	60b57043          	fmadd.s	ft0,fa0,fa1,fa2
   13d04:	000e8e9b          	sext.w	t4,t4
   13d08:	f0040553          	fmv.w.x	fa0,s0
   13d0c:	00fef3b3          	and	t2,t4,a5
	return *((float*)&u);
   13d10:	01f3e3b3          	or	t2,t2,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13d14:	60b57343          	fmadd.s	ft6,fa0,fa1,fa2
   13d18:	f0038553          	fmv.w.x	fa0,t2
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   13d1c:	028e5e13          	srl	t3,t3,0x28
	return *((float*)&u);
   13d20:	01fe65b3          	or	a1,t3,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13d24:	60b572c3          	fmadd.s	ft5,fa0,fa1,fa2
	float f8 = u24_to_f32(dw3 & 0xffffff);
   13d28:	0003031b          	sext.w	t1,t1
   13d2c:	f0058553          	fmv.w.x	fa0,a1
   13d30:	00f377b3          	and	a5,t1,a5
	return *((float*)&u);
   13d34:	01f7e7b3          	or	a5,a5,t6
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   13d38:	60b57243          	fmadd.s	ft4,fa0,fa1,fa2
   13d3c:	f0078553          	fmv.w.x	fa0,a5
   13d40:	01735313          	srl	t1,t1,0x17
   13d44:	00137313          	and	t1,t1,1
   13d48:	60b57643          	fmadd.s	fa2,fa0,fa1,fa2
   13d4c:	00030463          	beqz	t1,13d54 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x4dc>
   13d50:	908da607          	flw	fa2,-1784(s11)
		if(next_level == header.last_lod) //leaf node
   13d54:	0589bc83          	ld	s9,88(s3)
   13d58:	01775713          	srl	a4,a4,0x17
   13d5c:	06c12627          	fsw	fa2,108(sp)
   13d60:	00177713          	and	a4,a4,1
   13d64:	03ccd313          	srl	t1,s9,0x3c
   13d68:	7e0718e3          	bnez	a4,14d58 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14e0>
   13d6c:	06312827          	fsw	ft3,112(sp)
   13d70:	01755513          	srl	a0,a0,0x17
   13d74:	00157513          	and	a0,a0,1
   13d78:	7c051ae3          	bnez	a0,14d4c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14d4>
   13d7c:	06212a27          	fsw	ft2,116(sp)
   13d80:	017f5f13          	srl	t5,t5,0x17
   13d84:	001f7f13          	and	t5,t5,1
   13d88:	7a0f1ce3          	bnez	t5,14d40 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14c8>
   13d8c:	06112c27          	fsw	ft1,120(sp)
   13d90:	0176d693          	srl	a3,a3,0x17
   13d94:	0016f693          	and	a3,a3,1
   13d98:	78069ee3          	bnez	a3,14d34 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14bc>
   13d9c:	06012e27          	fsw	ft0,124(sp)
   13da0:	01765613          	srl	a2,a2,0x17
   13da4:	00167613          	and	a2,a2,1
   13da8:	780610e3          	bnez	a2,14d28 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14b0>
   13dac:	08612027          	fsw	ft6,128(sp)
   13db0:	017ede93          	srl	t4,t4,0x17
   13db4:	001efe93          	and	t4,t4,1
   13db8:	760e92e3          	bnez	t4,14d1c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x14a4>
   13dbc:	08512227          	fsw	ft5,132(sp)
   13dc0:	017e5e13          	srl	t3,t3,0x17
   13dc4:	740e16e3          	bnez	t3,14d10 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1498>
   13dc8:	08412c27          	fsw	ft4,152(sp)
	uint32_t node_stack_size = 1u;
   13dcc:	0b013e03          	ld	t3,176(sp)
	uint32_t hit_lod = ~0u;
   13dd0:	0c012d07          	flw	fs10,192(sp)
   13dd4:	0c812a87          	flw	fs5,200(sp)
   13dd8:	0cc12a07          	flw	fs4,204(sp)
   13ddc:	219c8dd3          	fmv.s	fs11,fs9
   13de0:	fff00413          	li	s0,-1
   13de4:	00028513          	mv	a0,t0
   13de8:	08d12e27          	fsw	fa3,156(sp)
   13dec:	0ae12027          	fsw	fa4,160(sp)
   13df0:	0af12227          	fsw	fa5,164(sp)
   13df4:	0b913423          	sd	s9,168(sp)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   13df8:	fffe0e9b          	addw	t4,t3,-1
   13dfc:	020e9713          	sll	a4,t4,0x20
   13e00:	02075713          	srl	a4,a4,0x20
   13e04:	00171793          	sll	a5,a4,0x1
   13e08:	00e787b3          	add	a5,a5,a4
   13e0c:	00279793          	sll	a5,a5,0x2
   13e10:	0f010713          	add	a4,sp,240
   13e14:	75078793          	add	a5,a5,1872
   13e18:	00e787b3          	add	a5,a5,a4
   13e1c:	8d07a703          	lw	a4,-1840(a5)
   13e20:	8d47a603          	lw	a2,-1836(a5)
   13e24:	8d87a683          	lw	a3,-1832(a5)
		if(current_node_entry.t >= hit.t) continue;
   13e28:	f00707d3          	fmv.w.x	fa5,a4
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   13e2c:	10e12023          	sw	a4,256(sp)
   13e30:	10c12223          	sw	a2,260(sp)
		if(current_node_entry.t >= hit.t) continue;
   13e34:	a0fd87d3          	fle.s	a5,fs11,fa5
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   13e38:	10d12423          	sw	a3,264(sp)
		if(current_node_entry.t >= hit.t) continue;
   13e3c:	22079ae3          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
		uint32_t node_index = current_node_entry.node_index;
   13e40:	10013703          	ld	a4,256(sp)
		uint32_t dbs = current_node_entry.dbs;
   13e44:	0006879b          	sext.w	a5,a3
		uint32_t lod = current_node_entry.lod;
   13e48:	03a75f93          	srl	t6,a4,0x3a
		uint32_t node_index = current_node_entry.node_index;
   13e4c:	00671f13          	sll	t5,a4,0x6
		uint32_t lod = current_node_entry.lod;
   13e50:	00fff393          	and	t2,t6,15
		uint32_t node_index = current_node_entry.node_index;
   13e54:	026f5f13          	srl	t5,t5,0x26
		uint32_t lod = current_node_entry.lod;
   13e58:	00038f93          	mv	t6,t2
		uint32_t tri_type = current_node_entry.tri_type;
   13e5c:	03e75593          	srl	a1,a4,0x3e
		if(lod == 0) tri_stack[lod].tri = decompact(header.tri);
   13e60:	480394e3          	bnez	t2,14ae8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1270>
	e[0] = v[0];
   13e64:	06c12f07          	flw	ft10,108(sp)
   13e68:	09812e07          	flw	ft8,152(sp)
   13e6c:	08412307          	flw	ft6,132(sp)
   13e70:	08012287          	flw	ft5,128(sp)
   13e74:	07c12587          	flw	fa1,124(sp)
   13e78:	07812607          	flw	fa2,120(sp)
   13e7c:	07412687          	flw	fa3,116(sp)
   13e80:	07012707          	flw	fa4,112(sp)
   13e84:	06812787          	flw	fa5,104(sp)
   13e88:	21ef0153          	fmv.s	ft2,ft10
   13e8c:	21ce01d3          	fmv.s	ft3,ft8
   13e90:	20630253          	fmv.s	ft4,ft6
   13e94:	20528053          	fmv.s	ft0,ft5
   13e98:	20b58553          	fmv.s	fa0,fa1
   13e9c:	20c600d3          	fmv.s	ft1,fa2
   13ea0:	20d683d3          	fmv.s	ft7,fa3
   13ea4:	20e70853          	fmv.s	fa6,fa4
   13ea8:	20f788d3          	fmv.s	fa7,fa5
   13eac:	23010713          	add	a4,sp,560
   13eb0:	22f12827          	fsw	fa5,560(sp)
	e[1] = v[1];
   13eb4:	22e12a27          	fsw	fa4,564(sp)
	e[2] = v[2];
   13eb8:	22d12c27          	fsw	fa3,568(sp)
	e[0] = v[0];
   13ebc:	22c12e27          	fsw	fa2,572(sp)
	e[1] = v[1];
   13ec0:	24b12027          	fsw	fa1,576(sp)
	e[2] = v[2];
   13ec4:	24512227          	fsw	ft5,580(sp)
	e[0] = v[0];
   13ec8:	24612427          	fsw	ft6,584(sp)
	e[1] = v[1];
   13ecc:	25c12627          	fsw	ft8,588(sp)
	e[2] = v[2];
   13ed0:	25e12827          	fsw	ft10,592(sp)
class Triangle
   13ed4:	00070593          	mv	a1,a4
   13ed8:	00000f93          	li	t6,0
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13edc:	09787cd3          	fsub.s	fs9,fa6,fs7
   13ee0:	09757453          	fsub.s	fs0,fa0,fs7
   13ee4:	0971f9d3          	fsub.s	fs3,ft3,fs7
   13ee8:	0960f6d3          	fsub.s	fa3,ft1,fs6
   13eec:	09627653          	fsub.s	fa2,ft4,fs6
   13ef0:	0968ff53          	fsub.s	ft10,fa7,fs6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   13ef4:	119af7d3          	fmul.s	fa5,fs5,fs9
   13ef8:	108af2d3          	fmul.s	ft5,fs5,fs0
   13efc:	113af753          	fmul.s	fa4,fs5,fs3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13f00:	0983f953          	fsub.s	fs2,ft7,fs8
   13f04:	098074d3          	fsub.s	fs1,ft0,fs8
   13f08:	79ed77c3          	fmadd.s	fa5,fs10,ft10,fa5
   13f0c:	28dd72c3          	fmadd.s	ft5,fs10,fa3,ft5
   13f10:	70cd7743          	fmadd.s	fa4,fs10,fa2,fa4
   13f14:	09817fd3          	fsub.s	ft11,ft2,fs8
	glm::vec3 fdbs((float)(qdb >> 00 & 0x3ff), (float)(qdb >> 10 & 0x3ff), (float)(qdb >> 20 & 0x3ff));
   13f18:	00a7d61b          	srlw	a2,a5,0xa
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   13f1c:	792a77c3          	fmadd.s	fa5,fs4,fs2,fa5
   13f20:	289a72c3          	fmadd.s	ft5,fs4,fs1,ft5
   13f24:	0147d69b          	srlw	a3,a5,0x14
   13f28:	71fa7743          	fmadd.s	fa4,fs4,ft11,fa4
   13f2c:	3ff7f793          	and	a5,a5,1023
   13f30:	3ff67613          	and	a2,a2,1023
   13f34:	3ff6f693          	and	a3,a3,1023
   13f38:	d007f5d3          	fcvt.s.w	fa1,a5
   13f3c:	28e78353          	fmin.s	ft6,fa5,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13f40:	00d12627          	fsw	fa3,12(sp)
   13f44:	285787d3          	fmin.s	fa5,fa5,ft5
   13f48:	d006f6d3          	fcvt.s.w	fa3,a3
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   13f4c:	28e28753          	fmin.s	fa4,ft5,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13f50:	00c12827          	fsw	fa2,16(sp)
	e[0] *= v[0];
   13f54:	04c12287          	flw	ft5,76(sp)
   13f58:	d0067653          	fcvt.s.w	fa2,a2
	glm::vec3 r = mdlen * ray.drdt + ray.radius;
   13f5c:	02482e07          	flw	ft8,36(a6)
   13f60:	1055f5d3          	fmul.s	fa1,fa1,ft5
	e[1] *= v[1];
   13f64:	10567653          	fmul.s	fa2,fa2,ft5
	e[2] *= v[2];
   13f68:	1056f6d3          	fmul.s	fa3,fa3,ft5
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   13f6c:	02082287          	flw	ft5,32(a6)
   13f70:	e0e2f743          	fmadd.s	fa4,ft5,fa4,ft8
   13f74:	e062f343          	fmadd.s	ft6,ft5,ft6,ft8
   13f78:	e0f2f7c3          	fmadd.s	fa5,ft5,fa5,ft8
	asm volatile("frcp.s %0,%1\n\t" 
   13f7c:	60077753          	frcp.s	fa4,fa4
   13f80:	60037353          	frcp.s	ft6,ft6
   13f84:	6007f7d3          	frcp.s	fa5,fa5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   13f88:	10b5f5d3          	fmul.s	fa1,fa1,fa1
   13f8c:	04812e07          	flw	ft8,72(sp)
   13f90:	10d6f6d3          	fmul.s	fa3,fa3,fa3
   13f94:	10c67653          	fmul.s	fa2,fa2,fa2
   13f98:	000196b7          	lui	a3,0x19
   13f9c:	11c5f5d3          	fmul.s	fa1,fa1,ft8
   13fa0:	f00002d3          	fmv.w.x	ft5,zero
   13fa4:	11c6f6d3          	fmul.s	fa3,fa3,ft8
   13fa8:	11c67653          	fmul.s	fa2,fa2,ft8
   13fac:	10e5f5d3          	fmul.s	fa1,fa1,fa4
   13fb0:	10f6f6d3          	fmul.s	fa3,fa3,fa5
   13fb4:	9086a787          	flw	fa5,-1784(a3) # 18908 <__DATA_BEGIN__>
   13fb8:	10667653          	fmul.s	fa2,fa2,ft6
   13fbc:	a0f597d3          	flt.s	a5,fa1,fa5
   13fc0:	00079663          	bnez	a5,13fcc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x754>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   13fc4:	08f5f2d3          	fsub.s	ft5,fa1,fa5
   13fc8:	28f282d3          	fmin.s	ft5,ft5,fa5
   13fcc:	908da787          	flw	fa5,-1784(s11)
   13fd0:	f0000753          	fmv.w.x	fa4,zero
   13fd4:	a0f617d3          	flt.s	a5,fa2,fa5
   13fd8:	00079663          	bnez	a5,13fe4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x76c>
   13fdc:	08f67753          	fsub.s	fa4,fa2,fa5
   13fe0:	28f70753          	fmin.s	fa4,fa4,fa5
   13fe4:	908da787          	flw	fa5,-1784(s11)
   13fe8:	f0000653          	fmv.w.x	fa2,zero
   13fec:	a0f697d3          	flt.s	a5,fa3,fa5
   13ff0:	00079663          	bnez	a5,13ffc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x784>
   13ff4:	08f6f653          	fsub.s	fa2,fa3,fa5
   13ff8:	28f60653          	fmin.s	fa2,fa2,fa5
		if(edge_states[0] <= 0.0f && edge_states[1] <= 0.0f && edge_states[2] <= 0.0f)
   13ffc:	f00007d3          	fmv.w.x	fa5,zero
   14000:	a0f287d3          	fle.s	a5,ft5,fa5
   14004:	00078a63          	beqz	a5,14018 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x7a0>
   14008:	a0f707d3          	fle.s	a5,fa4,fa5
   1400c:	00078663          	beqz	a5,14018 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x7a0>
   14010:	a0f607d3          	fle.s	a5,fa2,fa5
   14014:	70079063          	bnez	a5,14714 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xe9c>
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   14018:	000177b7          	lui	a5,0x17
   1401c:	00239693          	sll	a3,t2,0x2
   14020:	45078793          	add	a5,a5,1104 # 17450 <_ZL15lod_node_offset>
   14024:	00d787b3          	add	a5,a5,a3
   14028:	0007a603          	lw	a2,0(a5)
   1402c:	02039a13          	sll	s4,t2,0x20
   14030:	020a5a13          	srl	s4,s4,0x20
   14034:	01e6063b          	addw	a2,a2,t5
		move_to_stack(new_tri, triangles[absoulte_node_index]);
   14038:	02061613          	sll	a2,a2,0x20
   1403c:	02065613          	srl	a2,a2,0x20
   14040:	011602b3          	add	t0,a2,a7
   14044:	00529293          	sll	t0,t0,0x5
		uint64_t r = ((uint64_t*)&src)[i];
   14048:	005b02b3          	add	t0,s6,t0
   1404c:	0002b683          	ld	a3,0(t0)
   14050:	0082b783          	ld	a5,8(t0)
   14054:	0102bc83          	ld	s9,16(t0)
	float f0 = u24_to_f32(dw0 & 0xffffff);
   14058:	00068c1b          	sext.w	s8,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1405c:	017c5d13          	srl	s10,s8,0x17
   14060:	001d7d13          	and	s10,s10,1
		uint64_t r = ((uint64_t*)&src)[i];
   14064:	0182b283          	ld	t0,24(t0)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   14068:	340d12e3          	bnez	s10,14bac <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1334>
   1406c:	028c1c13          	sll	s8,s8,0x28
   14070:	028c5c13          	srl	s8,s8,0x28
   14074:	3f800d37          	lui	s10,0x3f800
	return *((float*)&u);
   14078:	01ac6c33          	or	s8,s8,s10
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1407c:	9104a687          	flw	fa3,-1776(s1)
   14080:	914aa787          	flw	fa5,-1772(s5)
   14084:	f00c05d3          	fmv.w.x	fa1,s8
   14088:	78d5f443          	fmadd.s	fs0,fa1,fa3,fa5
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   1408c:	0186dc13          	srl	s8,a3,0x18
   14090:	000c0c1b          	sext.w	s8,s8
   14094:	017c5d13          	srl	s10,s8,0x17
   14098:	001d7d13          	and	s10,s10,1
   1409c:	300d14e3          	bnez	s10,14ba4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x132c>
   140a0:	028c1c13          	sll	s8,s8,0x28
   140a4:	028c5c13          	srl	s8,s8,0x28
   140a8:	3f800d37          	lui	s10,0x3f800
	return *((float*)&u);
   140ac:	01ac6c33          	or	s8,s8,s10
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   140b0:	9104a687          	flw	fa3,-1776(s1)
   140b4:	914aa787          	flw	fa5,-1772(s5)
   140b8:	f00c05d3          	fmv.w.x	fa1,s8
   140bc:	78d5ff43          	fmadd.s	ft10,fa1,fa3,fa5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   140c0:	01079c1b          	sllw	s8,a5,0x10
   140c4:	0306d693          	srl	a3,a3,0x30
   140c8:	0186e6b3          	or	a3,a3,s8
   140cc:	0006869b          	sext.w	a3,a3
   140d0:	0176dc13          	srl	s8,a3,0x17
   140d4:	001c7c13          	and	s8,s8,1
   140d8:	2c0c12e3          	bnez	s8,14b9c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1324>
   140dc:	02869693          	sll	a3,a3,0x28
   140e0:	0286d693          	srl	a3,a3,0x28
   140e4:	3f800c37          	lui	s8,0x3f800
	return *((float*)&u);
   140e8:	0186e6b3          	or	a3,a3,s8
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   140ec:	9104a687          	flw	fa3,-1776(s1)
   140f0:	914aa787          	flw	fa5,-1772(s5)
   140f4:	f00685d3          	fmv.w.x	fa1,a3
   140f8:	78d5f6c3          	fmadd.s	fa3,fa1,fa3,fa5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   140fc:	0087d693          	srl	a3,a5,0x8
   14100:	0006869b          	sext.w	a3,a3
   14104:	0176dc13          	srl	s8,a3,0x17
   14108:	001c7c13          	and	s8,s8,1
   1410c:	280c14e3          	bnez	s8,14b94 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x131c>
   14110:	02869693          	sll	a3,a3,0x28
   14114:	0286d693          	srl	a3,a3,0x28
   14118:	3f800c37          	lui	s8,0x3f800
	return *((float*)&u);
   1411c:	0186e6b3          	or	a3,a3,s8
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   14120:	9104a587          	flw	fa1,-1776(s1)
   14124:	914aa787          	flw	fa5,-1772(s5)
   14128:	f0068353          	fmv.w.x	ft6,a3
   1412c:	78b37e43          	fmadd.s	ft8,ft6,fa1,fa5
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   14130:	4207d693          	sra	a3,a5,0x20
   14134:	0176dc13          	srl	s8,a3,0x17
   14138:	001c7c13          	and	s8,s8,1
   1413c:	240c18e3          	bnez	s8,14b8c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1314>
   14140:	02869693          	sll	a3,a3,0x28
   14144:	0286d693          	srl	a3,a3,0x28
   14148:	3f800c37          	lui	s8,0x3f800
	return *((float*)&u);
   1414c:	0186e6b3          	or	a3,a3,s8
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   14150:	9104a587          	flw	fa1,-1776(s1)
   14154:	914aa787          	flw	fa5,-1772(s5)
   14158:	f0068353          	fmv.w.x	ft6,a3
   1415c:	78b37fc3          	fmadd.s	ft11,ft6,fa1,fa5
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   14160:	008c969b          	sllw	a3,s9,0x8
   14164:	0387d793          	srl	a5,a5,0x38
   14168:	00d7e7b3          	or	a5,a5,a3
   1416c:	0007879b          	sext.w	a5,a5
   14170:	0177d693          	srl	a3,a5,0x17
   14174:	0016f693          	and	a3,a3,1
   14178:	200696e3          	bnez	a3,14b84 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x130c>
   1417c:	02879793          	sll	a5,a5,0x28
   14180:	0287d793          	srl	a5,a5,0x28
   14184:	3f8006b7          	lui	a3,0x3f800
	return *((float*)&u);
   14188:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   1418c:	9104a587          	flw	fa1,-1776(s1)
   14190:	914aa787          	flw	fa5,-1772(s5)
   14194:	f0078353          	fmv.w.x	ft6,a5
   14198:	78b377c3          	fmadd.s	fa5,ft6,fa1,fa5
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   1419c:	010cd793          	srl	a5,s9,0x10
   141a0:	0007879b          	sext.w	a5,a5
   141a4:	0177d693          	srl	a3,a5,0x17
   141a8:	0016f693          	and	a3,a3,1
   141ac:	1c0698e3          	bnez	a3,14b7c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1304>
   141b0:	02879793          	sll	a5,a5,0x28
   141b4:	0287d793          	srl	a5,a5,0x28
   141b8:	3f8006b7          	lui	a3,0x3f800
	return *((float*)&u);
   141bc:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   141c0:	9104a307          	flw	ft6,-1776(s1)
   141c4:	914aa587          	flw	fa1,-1772(s5)
   141c8:	f00784d3          	fmv.w.x	fs1,a5
   141cc:	5864f343          	fmadd.s	ft6,fs1,ft6,fa1
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   141d0:	028cd793          	srl	a5,s9,0x28
   141d4:	1a0cc0e3          	bltz	s9,14b74 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12fc>
   141d8:	3f8006b7          	lui	a3,0x3f800
	return *((float*)&u);
   141dc:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   141e0:	9104a487          	flw	fs1,-1776(s1)
   141e4:	914aa587          	flw	fa1,-1772(s5)
   141e8:	f0078953          	fmv.w.x	fs2,a5
   141ec:	589974c3          	fmadd.s	fs1,fs2,fs1,fa1
	float f8 = u24_to_f32(dw3 & 0xffffff);
   141f0:	0002829b          	sext.w	t0,t0
   141f4:	0172d793          	srl	a5,t0,0x17
   141f8:	0017f793          	and	a5,a5,1
   141fc:	160798e3          	bnez	a5,14b6c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12f4>
   14200:	02829293          	sll	t0,t0,0x28
   14204:	0282d793          	srl	a5,t0,0x28
   14208:	3f8006b7          	lui	a3,0x3f800
	return *((float*)&u);
   1420c:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   14210:	9104a907          	flw	fs2,-1776(s1)
   14214:	914aa587          	flw	fa1,-1772(s5)
   14218:	f00789d3          	fmv.w.x	fs3,a5
   1421c:	5929f5c3          	fmadd.s	fa1,fs3,fs2,fa1
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   14220:	00127cd3          	fadd.s	fs9,ft4,ft1
   14224:	00a1f9d3          	fadd.s	fs3,ft3,fa0
   14228:	00017953          	fadd.s	fs2,ft2,ft0
   1422c:	0101f1d3          	fadd.s	ft3,ft3,fa6
   14230:	00717153          	fadd.s	ft2,ft2,ft7
   14234:	00a87553          	fadd.s	fa0,fa6,fa0
   14238:	0003f053          	fadd.s	ft0,ft7,ft0
   1423c:	01127253          	fadd.s	ft4,ft4,fa7
   14240:	0018f0d3          	fadd.s	ft1,fa7,ft1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14244:	f9d1ffcb          	fnmsub.s	ft11,ft3,ft9,ft11
   14248:	49d574cb          	fnmsub.s	fs1,fa0,ft9,fs1
   1424c:	41dcf44b          	fnmsub.s	fs0,fs9,ft9,fs0
   14250:	e1d27e4b          	fnmsub.s	ft8,ft4,ft9,ft8
   14254:	31d0f34b          	fnmsub.s	ft6,ft1,ft9,ft6
   14258:	f1d9ff4b          	fnmsub.s	ft10,fs3,ft9,ft10
   1425c:	69d976cb          	fnmsub.s	fa3,fs2,ft9,fa3
   14260:	79d177cb          	fnmsub.s	fa5,ft2,ft9,fa5
   14264:	59d075cb          	fnmsub.s	fa1,ft0,ft9,fa1
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   14268:	1082f453          	fmul.s	fs0,ft5,fs0
   1426c:	11e2ff53          	fmul.s	ft10,ft5,ft10
   14270:	10d2f6d3          	fmul.s	fa3,ft5,fa3
   14274:	11f77fd3          	fmul.s	ft11,fa4,ft11
   14278:	10f777d3          	fmul.s	fa5,fa4,fa5
   1427c:	11c77e53          	fmul.s	ft8,fa4,ft8
   14280:	109674d3          	fmul.s	fs1,fa2,fs1
   14284:	10b675d3          	fmul.s	fa1,fa2,fa1
   14288:	10667353          	fmul.s	ft6,fa2,ft6
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   1428c:	41dcf3c3          	fmadd.s	ft7,fs9,ft9,fs0
   14290:	f1d9f843          	fmadd.s	fa6,fs3,ft9,ft10
   14294:	69d976c3          	fmadd.s	fa3,fs2,ft9,fa3
   14298:	e1d27243          	fmadd.s	ft4,ft4,ft9,ft8
   1429c:	f9d1f1c3          	fmadd.s	ft3,ft3,ft9,ft11
   142a0:	79d177c3          	fmadd.s	fa5,ft2,ft9,fa5
   142a4:	31d0f0c3          	fmadd.s	ft1,ft1,ft9,ft6
   142a8:	49d57543          	fmadd.s	fa0,fa0,ft9,fs1
   142ac:	59d075c3          	fmadd.s	fa1,ft0,ft9,fa1
   142b0:	024f8f93          	add	t6,t6,36 # 3f800024 <__global_pointer$+0x3f7e6f1c>
   142b4:	01f70733          	add	a4,a4,t6
   142b8:	02712e27          	fsw	ft7,60(sp)
   142bc:	05012027          	fsw	fa6,64(sp)
   142c0:	04d12227          	fsw	fa3,68(sp)
   142c4:	02412227          	fsw	ft4,36(sp)
   142c8:	02312427          	fsw	ft3,40(sp)
   142cc:	02f12627          	fsw	fa5,44(sp)
   142d0:	00112c27          	fsw	ft1,24(sp)
   142d4:	00a12e27          	fsw	fa0,28(sp)
   142d8:	02b12027          	fsw	fa1,32(sp)
	e[0] = v[0];
   142dc:	00772027          	fsw	ft7,0(a4)
	e[1] = v[1];
   142e0:	01072227          	fsw	fa6,4(a4)
	e[2] = v[2];
   142e4:	00d72427          	fsw	fa3,8(a4)
	e[0] = v[0];
   142e8:	00472627          	fsw	ft4,12(a4)
	e[1] = v[1];
   142ec:	00372827          	fsw	ft3,16(a4)
	e[2] = v[2];
   142f0:	00f72a27          	fsw	fa5,20(a4)
	e[0] = v[0];
   142f4:	00172c27          	fsw	ft1,24(a4)
	e[1] = v[1];
   142f8:	00a72e27          	fsw	fa0,28(a4)
	e[2] = v[2];
   142fc:	02b72027          	fsw	fa1,32(a4)
		uint32_t next_level = lod + 1;
   14300:	00138293          	add	t0,t2,1
		uint32_t first_child_index = node_index << 2; //compute first child index
   14304:	002f1f13          	sll	t5,t5,0x2
		if(next_level == header.last_lod) //leaf node
   14308:	5c628863          	beq	t0,t1,148d8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1060>
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   1430c:	908da787          	flw	fa5,-1784(s11)
   14310:	00100f93          	li	t6,1
   14314:	a0f297d3          	flt.s	a5,ft5,fa5
   14318:	04079063          	bnez	a5,14358 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xae0>
   1431c:	a0f717d3          	flt.s	a5,fa4,fa5
   14320:	02079c63          	bnez	a5,14358 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xae0>
   14324:	a0f617d3          	flt.s	a5,fa2,fa5
   14328:	02079863          	bnez	a5,14358 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xae0>
   1432c:	00000f93          	li	t6,0
   14330:	02038463          	beqz	t2,14358 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xae0>
   14334:	fff3879b          	addw	a5,t2,-1
   14338:	02079793          	sll	a5,a5,0x20
   1433c:	04c00713          	li	a4,76
   14340:	0207d793          	srl	a5,a5,0x20
   14344:	02e787b3          	mul	a5,a5,a4
   14348:	0f010713          	add	a4,sp,240
   1434c:	75078793          	add	a5,a5,1872
   14350:	00e787b3          	add	a5,a5,a4
   14354:	a387cf83          	lbu	t6,-1480(a5)
   14358:	04c00713          	li	a4,76
   1435c:	02ea0733          	mul	a4,s4,a4
		uint64_t r = ((uint64_t*)&src)[i];
   14360:	08813683          	ld	a3,136(sp)
   14364:	00c507b3          	add	a5,a0,a2
   14368:	00679793          	sll	a5,a5,0x6
   1436c:	00f687b3          	add	a5,a3,a5
   14370:	0087bd03          	ld	s10,8(a5)
   14374:	0107bc83          	ld	s9,16(a5)
   14378:	0187bc03          	ld	s8,24(a5)
   1437c:	0307b603          	ld	a2,48(a5)
   14380:	0387b683          	ld	a3,56(a5)
   14384:	0207ba03          	ld	s4,32(a5)
   14388:	0287b383          	ld	t2,40(a5)
		((uint64_t*)&dst)[i] = r;
   1438c:	0007b783          	ld	a5,0(a5)
   14390:	75070713          	add	a4,a4,1872
   14394:	00c82207          	flw	ft4,12(a6)
   14398:	00f13023          	sd	a5,0(sp)
   1439c:	0f010793          	add	a5,sp,240
   143a0:	00f70733          	add	a4,a4,a5
   143a4:	00013783          	ld	a5,0(sp)
      if (__b < __a)
   143a8:	01c82187          	flw	ft3,28(a6)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   143ac:	908da007          	flw	ft0,-1784(s11)
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   143b0:	9104a107          	flw	ft2,-1776(s1)
   143b4:	91cba087          	flw	ft1,-1764(s7)
   143b8:	05812287          	flw	ft5,88(sp)
   143bc:	05c12307          	flw	ft6,92(sp)
   143c0:	06012387          	flw	ft7,96(sp)
   143c4:	02012c87          	flw	fs9,32(sp)
		((uint64_t*)&dst)[i] = r;
   143c8:	01a9b423          	sd	s10,8(s3)
   143cc:	0199b823          	sd	s9,16(s3)
   143d0:	0189bc23          	sd	s8,24(s3)
   143d4:	02c9b823          	sd	a2,48(s3)
   143d8:	02d9bc23          	sd	a3,56(s3)
   143dc:	a3f70c23          	sb	t6,-1480(a4)
   143e0:	00f9b023          	sd	a5,0(s3)
   143e4:	0349b023          	sd	s4,32(s3)
   143e8:	0279b423          	sd	t2,40(s3)
   143ec:	00098613          	mv	a2,s3
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   143f0:	000e8c13          	mv	s8,t4
   143f4:	00000693          	li	a3,0
   143f8:	00a13823          	sd	a0,16(sp)
   143fc:	03613823          	sd	s6,48(sp)
   14400:	00028d13          	mv	s10,t0
   14404:	000f0c93          	mv	s9,t5
   14408:	00065783          	lhu	a5,0(a2)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   1440c:	200007d3          	fmv.s	fa5,ft0
   14410:	00f7d713          	srl	a4,a5,0xf
   14414:	00071e63          	bnez	a4,14430 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xbb8>
   14418:	0087979b          	sllw	a5,a5,0x8
   1441c:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   14420:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14424:	f00787d3          	fmv.w.x	fa5,a5
   14428:	0807f7d3          	fsub.s	fa5,fa5,ft0
   1442c:	0827f7c3          	fmadd.s	fa5,fa5,ft2,ft1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   14430:	00665783          	lhu	a5,6(a2)
   14434:	20000553          	fmv.s	fa0,ft0
   14438:	00f7d713          	srl	a4,a5,0xf
   1443c:	00071e63          	bnez	a4,14458 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xbe0>
   14440:	0087979b          	sllw	a5,a5,0x8
   14444:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   14448:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   1444c:	f0078753          	fmv.w.x	fa4,a5
   14450:	08077753          	fsub.s	fa4,fa4,ft0
   14454:	08277543          	fmadd.s	fa0,fa4,ft2,ft1
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   14458:	00265783          	lhu	a5,2(a2)
   1445c:	20000653          	fmv.s	fa2,ft0
   14460:	00f7d713          	srl	a4,a5,0xf
   14464:	00071e63          	bnez	a4,14480 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xc08>
   14468:	0087979b          	sllw	a5,a5,0x8
   1446c:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   14470:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14474:	f0078753          	fmv.w.x	fa4,a5
   14478:	08077753          	fsub.s	fa4,fa4,ft0
   1447c:	08277643          	fmadd.s	fa2,fa4,ft2,ft1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   14480:	00865783          	lhu	a5,8(a2)
   14484:	00019537          	lui	a0,0x19
   14488:	90852587          	flw	fa1,-1784(a0) # 18908 <__DATA_BEGIN__>
   1448c:	00f7d713          	srl	a4,a5,0xf
   14490:	02071263          	bnez	a4,144b4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xc3c>
   14494:	0087979b          	sllw	a5,a5,0x8
   14498:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   1449c:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   144a0:	f0078753          	fmv.w.x	fa4,a5
   144a4:	000197b7          	lui	a5,0x19
   144a8:	9107a687          	flw	fa3,-1776(a5) # 18910 <__DATA_BEGIN__+0x8>
   144ac:	08b77753          	fsub.s	fa4,fa4,fa1
   144b0:	08d775c3          	fmadd.s	fa1,fa4,fa3,ft1
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   144b4:	00465783          	lhu	a5,4(a2)
   144b8:	00019537          	lui	a0,0x19
   144bc:	90852687          	flw	fa3,-1784(a0) # 18908 <__DATA_BEGIN__>
   144c0:	00f7d713          	srl	a4,a5,0xf
   144c4:	02071463          	bnez	a4,144ec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xc74>
   144c8:	0087979b          	sllw	a5,a5,0x8
   144cc:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   144d0:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   144d4:	f0078753          	fmv.w.x	fa4,a5
   144d8:	000197b7          	lui	a5,0x19
   144dc:	9107a807          	flw	fa6,-1776(a5) # 18910 <__DATA_BEGIN__+0x8>
   144e0:	08d77753          	fsub.s	fa4,fa4,fa3
   144e4:	91cba687          	flw	fa3,-1764(s7)
   144e8:	690776c3          	fmadd.s	fa3,fa4,fa6,fa3
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   144ec:	00a65783          	lhu	a5,10(a2)
   144f0:	908da707          	flw	fa4,-1784(s11)
   144f4:	00f7d713          	srl	a4,a5,0xf
   144f8:	02071263          	bnez	a4,1451c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xca4>
   144fc:	0087979b          	sllw	a5,a5,0x8
   14500:	3f800737          	lui	a4,0x3f800
	return *((float*)&u);
   14504:	00e7e7b3          	or	a5,a5,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14508:	f0078853          	fmv.w.x	fa6,a5
   1450c:	9104a887          	flw	fa7,-1776(s1)
   14510:	08e87753          	fsub.s	fa4,fa6,fa4
   14514:	91cba807          	flw	fa6,-1764(s7)
   14518:	81177743          	fmadd.s	fa4,fa4,fa7,fa6
				if(tri_stack[lod].child_transformed)
   1451c:	140f9e63          	bnez	t6,14678 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xe00>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14520:	0967f7d3          	fsub.s	fa5,fa5,fs6
   14524:	09767653          	fsub.s	fa2,fa2,fs7
   14528:	09657553          	fsub.s	fa0,fa0,fs6
   1452c:	0975f5d3          	fsub.s	fa1,fa1,fs7
   14530:	09877853          	fsub.s	fa6,fa4,fs8
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   14534:	1057f7d3          	fmul.s	fa5,fa5,ft5
   14538:	10667653          	fmul.s	fa2,fa2,ft6
   1453c:	10557553          	fmul.s	fa0,fa0,ft5
   14540:	1065f5d3          	fmul.s	fa1,fa1,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14544:	0986f6d3          	fsub.s	fa3,fa3,fs8
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   14548:	10787853          	fmul.s	fa6,fa6,ft7
   1454c:	28a78753          	fmin.s	fa4,fa5,fa0
   14550:	28b608d3          	fmin.s	fa7,fa2,fa1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   14554:	28a797d3          	fmax.s	fa5,fa5,fa0
   14558:	28b61653          	fmax.s	fa2,fa2,fa1
   1455c:	1076f6d3          	fmul.s	fa3,fa3,ft7
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   14560:	29171753          	fmax.s	fa4,fa4,fa7
	if (tmin > tmax) return ray.t_max;//no hit || behind
   14564:	28c787d3          	fmin.s	fa5,fa5,fa2
   14568:	28471753          	fmax.s	fa4,fa4,ft4
   1456c:	29068653          	fmin.s	fa2,fa3,fa6
   14570:	283787d3          	fmin.s	fa5,fa5,ft3
   14574:	290696d3          	fmax.s	fa3,fa3,fa6
   14578:	28c71753          	fmax.s	fa4,fa4,fa2
   1457c:	28d787d3          	fmin.s	fa5,fa5,fa3
   14580:	a0e797d3          	flt.s	a5,fa5,fa4
   14584:	00078463          	beqz	a5,1458c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd14>
   14588:	20318753          	fmv.s	fa4,ft3
				if(entry.t < hit.t) insert(entry, node_stack, node_stack_size++, temp_node_stack_size);
   1458c:	a1b717d3          	flt.s	a5,fa4,fs11
   14590:	02079663          	bnez	a5,145bc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd44>
			for(uint32_t i = 0; i < 4; ++i)
   14594:	00168693          	add	a3,a3,1 # 3f800001 <__global_pointer$+0x3f7e6ef9>
   14598:	00400793          	li	a5,4
   1459c:	01060613          	add	a2,a2,16
   145a0:	e6f694e3          	bne	a3,a5,14408 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xb90>
   145a4:	01013503          	ld	a0,16(sp)
   145a8:	03013b03          	ld	s6,48(sp)
   145ac:	000c0e13          	mv	t3,s8
	} while(node_stack_size);
   145b0:	2c0e0463          	beqz	t3,14878 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1000>
		if(current_node_entry.t >= hit.t) continue;
   145b4:	00092d87          	flw	fs11,0(s2)
   145b8:	841ff06f          	j	13df8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x580>
				entry.dbs = node4.nodes[i].dbs;
   145bc:	00c62283          	lw	t0,12(a2)
				if(entry.t < hit.t) insert(entry, node_stack, node_stack_size++, temp_node_stack_size);
   145c0:	001c0f1b          	addw	t5,s8,1 # 3f800001 <__global_pointer$+0x3f7e6ef9>
	for(; j != min; --j)
   145c4:	098e8ce3          	beq	t4,s8,14e5c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x15e4>
   145c8:	11010393          	add	t2,sp,272
   145cc:	0200006f          	j	145ec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd74>
		stack[j] = stack[j - 1];
   145d0:	0007a503          	lw	a0,0(a5)
   145d4:	00a72023          	sw	a0,0(a4) # 3f800000 <__global_pointer$+0x3f7e6ef8>
   145d8:	0047a503          	lw	a0,4(a5)
   145dc:	00a72223          	sw	a0,4(a4)
   145e0:	0087a503          	lw	a0,8(a5)
   145e4:	00a72423          	sw	a0,8(a4)
	for(; j != min; --j)
   145e8:	614e0263          	beq	t3,s4,14bec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1374>
		if(stack[j - 1].t >= entry.t) break;
   145ec:	fffc051b          	addw	a0,s8,-1
   145f0:	02051713          	sll	a4,a0,0x20
   145f4:	02075713          	srl	a4,a4,0x20
   145f8:	00171793          	sll	a5,a4,0x1
   145fc:	00e787b3          	add	a5,a5,a4
   14600:	00279793          	sll	a5,a5,0x2
   14604:	00f387b3          	add	a5,t2,a5
   14608:	0007a787          	flw	fa5,0(a5)
   1460c:	000c0a1b          	sext.w	s4,s8
		stack[j] = stack[j - 1];
   14610:	020a1c13          	sll	s8,s4,0x20
   14614:	020c5c13          	srl	s8,s8,0x20
   14618:	001c1713          	sll	a4,s8,0x1
		if(stack[j - 1].t >= entry.t) break;
   1461c:	a0f70b53          	fle.s	s6,fa4,fa5
		stack[j] = stack[j - 1];
   14620:	01870733          	add	a4,a4,s8
   14624:	00271713          	sll	a4,a4,0x2
   14628:	00e38733          	add	a4,t2,a4
		if(stack[j - 1].t >= entry.t) break;
   1462c:	00050c1b          	sext.w	s8,a0
   14630:	fa0b00e3          	beqz	s6,145d0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd58>
	stack[j] = entry;
   14634:	04000a37          	lui	s4,0x4000
   14638:	fffa0a13          	add	s4,s4,-1 # 3ffffff <__global_pointer$+0x3fe6ef7>
   1463c:	014cfc33          	and	s8,s9,s4
   14640:	0146f3b3          	and	t2,a3,s4
   14644:	018383bb          	addw	t2,t2,s8
   14648:	01ad179b          	sllw	a5,s10,0x1a
   1464c:	3c000c37          	lui	s8,0x3c000
   14650:	0187f7b3          	and	a5,a5,s8
   14654:	0143f3b3          	and	t2,t2,s4
   14658:	0077e7b3          	or	a5,a5,t2
   1465c:	01e6939b          	sllw	t2,a3,0x1e
   14660:	0077e7b3          	or	a5,a5,t2
   14664:	00e72027          	fsw	fa4,0(a4)
   14668:	00f72223          	sw	a5,4(a4)
   1466c:	00572423          	sw	t0,8(a4)
   14670:	000f0c13          	mv	s8,t5
}
   14674:	f21ff06f          	j	14594 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd1c>
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   14678:	52069e63          	bnez	a3,14bb4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x133c>
	e[2] = v[2];
   1467c:	02c12807          	flw	fa6,44(sp)
	inline float operator[](int i) const { return e[i]; }
   14680:	0005a407          	flw	fs0,0(a1)
   14684:	0045a907          	flw	fs2,4(a1)
   14688:	0085a487          	flw	fs1,8(a1)
	e[1] = v[1];
   1468c:	02812887          	flw	fa7,40(sp)
	e[0] = v[0];
   14690:	02412e07          	flw	ft8,36(sp)
	e[2] = v[2];
   14694:	219c8f53          	fmv.s	ft10,fs9
	e[1] = v[1];
   14698:	01c12f87          	flw	ft11,28(sp)
	e[0] = v[0];
   1469c:	01812987          	flw	fs3,24(sp)
	e[2] = v[2];
   146a0:	01012627          	fsw	fa6,12(sp)
	return vec3(std::min(a[0], b[0]), std::min(a[1], b[1]), std::min(a[2], b[2]));
   146a4:	05012807          	flw	fa6,80(sp)
   146a8:	290787d3          	fmin.s	fa5,fa5,fa6
   146ac:	29060653          	fmin.s	fa2,fa2,fa6
   146b0:	290686d3          	fmin.s	fa3,fa3,fa6
   146b4:	05412807          	flw	fa6,84(sp)
   146b8:	293787d3          	fmin.s	fa5,fa5,fs3
   146bc:	29260653          	fmin.s	fa2,fa2,fs2
   146c0:	29051553          	fmax.s	fa0,fa0,fa6
   146c4:	290595d3          	fmax.s	fa1,fa1,fa6
   146c8:	29071753          	fmax.s	fa4,fa4,fa6
   146cc:	289686d3          	fmin.s	fa3,fa3,fs1
   146d0:	29351553          	fmax.s	fa0,fa0,fs3
   146d4:	292595d3          	fmax.s	fa1,fa1,fs2
   146d8:	28971753          	fmax.s	fa4,fa4,fs1
   146dc:	00c12807          	flw	fa6,12(sp)
   146e0:	288787d3          	fmin.s	fa5,fa5,fs0
   146e4:	29f60653          	fmin.s	fa2,fa2,ft11
   146e8:	29e686d3          	fmin.s	fa3,fa3,ft10
   146ec:	28851553          	fmax.s	fa0,fa0,fs0
   146f0:	29f595d3          	fmax.s	fa1,fa1,ft11
   146f4:	29e71753          	fmax.s	fa4,fa4,ft10
   146f8:	29c787d3          	fmin.s	fa5,fa5,ft8
   146fc:	29160653          	fmin.s	fa2,fa2,fa7
   14700:	290686d3          	fmin.s	fa3,fa3,fa6
	return vec3(std::max(a[0], b[0]), std::max(a[1], b[1]), std::max(a[2], b[2]));
   14704:	29c51553          	fmax.s	fa0,fa0,ft8
   14708:	291595d3          	fmax.s	fa1,fa1,fa7
   1470c:	29071753          	fmax.s	fa4,fa4,fa6
	return *this;
   14710:	e11ff06f          	j	14520 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xca8>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14714:	0910f753          	fsub.s	fa4,ft1,fa7
   14718:	087076d3          	fsub.s	fa3,ft0,ft7
   1471c:	08717353          	fsub.s	ft6,ft2,ft7
   14720:	0901f2d3          	fsub.s	ft5,ft3,fa6
   14724:	090575d3          	fsub.s	fa1,fa0,fa6
   14728:	09127653          	fsub.s	fa2,ft4,fa7
   1472c:	081270d3          	fsub.s	ft1,ft4,ft1
		(-(a[0] * b[2] - a[2] * b[0])),
   14730:	10677e53          	fmul.s	ft8,fa4,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14734:	0848f8d3          	fsub.s	fa7,fa7,ft4
	return vec3(a[1] * b[2] - a[2] * b[1],
   14738:	1056f253          	fmul.s	ft4,fa3,ft5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1473c:	08017053          	fsub.s	ft0,ft2,ft0
   14740:	0823f3d3          	fsub.s	ft7,ft7,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   14744:	e0c6fe47          	fmsub.s	ft8,fa3,fa2,ft8
		(-(a[0] * b[2] - a[2] * b[0])),
   14748:	1014f153          	fmul.s	ft2,fs1,ft1
	return vec3(a[1] * b[2] - a[2] * b[1],
   1474c:	2065f247          	fmsub.s	ft4,fa1,ft6,ft4
   14750:	00c12307          	flw	ft6,12(sp)
		a[0] * b[1] - a[1] * b[0]);
   14754:	10c5f653          	fmul.s	fa2,fa1,fa2
	return vec3(a[1] * b[2] - a[2] * b[1],
   14758:	01c12e27          	fsw	ft8,28(sp)
   1475c:	10037147          	fmsub.s	ft2,ft6,ft0,ft2
   14760:	00412c27          	fsw	ft4,24(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14764:	11caf253          	fmul.s	ft4,fs5,ft8
	return vec3(a[1] * b[2] - a[2] * b[1],
   14768:	111ffe53          	fmul.s	ft8,ft11,fa7
   1476c:	01012307          	flw	ft6,16(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14770:	08a1f553          	fsub.s	fa0,ft3,fa0
   14774:	08387853          	fsub.s	fa6,fa6,ft3
	return vec3(a[1] * b[2] - a[2] * b[1],
   14778:	100471d3          	fmul.s	ft3,fs0,ft0
   1477c:	1079f053          	fmul.s	ft0,fs3,ft7
   14780:	e07373c7          	fmsub.s	ft7,ft6,ft7,ft8
   14784:	10e97e53          	fmul.s	ft8,fs2,fa4
   14788:	60577647          	fmsub.s	fa2,fa4,ft5,fa2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1478c:	01812287          	flw	ft5,24(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   14790:	10dcf353          	fmul.s	ft6,fs9,fa3
   14794:	18a4f4c7          	fmsub.s	fs1,fs1,fa0,ft3
   14798:	e0df76c7          	fmsub.s	fa3,ft10,fa3,ft8
   1479c:	010fffc7          	fmsub.s	ft11,ft11,fa6,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147a0:	205d7243          	fmadd.s	ft4,fs10,ft5,ft4
		a[0] * b[1] - a[1] * b[0]);
   147a4:	00c12187          	flw	ft3,12(sp)
   147a8:	01012007          	flw	ft0,16(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   147ac:	30b97347          	fmsub.s	ft6,fs2,fa1,ft6
		a[0] * b[1] - a[1] * b[0]);
   147b0:	10a1f553          	fmul.s	fa0,ft3,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147b4:	102af153          	fmul.s	ft2,fs5,ft2
		a[0] * b[1] - a[1] * b[0]);
   147b8:	11007853          	fmul.s	fa6,ft0,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147bc:	107af3d3          	fmul.s	ft7,fs5,ft7
		a[0] * b[1] - a[1] * b[0]);
   147c0:	10bf75d3          	fmul.s	fa1,ft10,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147c4:	10daf6d3          	fmul.s	fa3,fs5,fa3
   147c8:	20ca7243          	fmadd.s	ft4,fs4,fa2,ft4
	return vec3(a[1] * b[2] - a[2] * b[1],
   147cc:	50147447          	fmsub.s	fs0,fs0,ft1,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147d0:	109d74c3          	fmadd.s	fs1,fs10,fs1,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   147d4:	8119f9c7          	fmsub.s	fs3,fs3,fa7,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147d8:	39fd7fc3          	fmadd.s	ft11,fs10,ft11,ft7
	return vec3(a[1] * b[2] - a[2] * b[1],
   147dc:	58ecf747          	fmsub.s	fa4,fs9,fa4,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   147e0:	686d7343          	fmadd.s	ft6,fs10,ft6,fa3
	if(gn_dot_d > 0.0f) bc = -bc;
   147e4:	a04797d3          	flt.s	a5,fa5,ft4
   147e8:	488a7443          	fmadd.s	fs0,fs4,fs0,fs1
   147ec:	f93a7fc3          	fmadd.s	ft11,fs4,fs3,ft11
   147f0:	30ea7743          	fmadd.s	fa4,fs4,fa4,ft6
   147f4:	00078863          	beqz	a5,14804 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xf8c>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   147f8:	20841453          	fneg.s	fs0,fs0
   147fc:	21ff9fd3          	fneg.s	ft11,ft11
   14800:	20e71753          	fneg.s	fa4,fa4
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   14804:	f00007d3          	fmv.w.x	fa5,zero
   14808:	a0f417d3          	flt.s	a5,fs0,fa5
   1480c:	06079263          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
   14810:	a0ff97d3          	flt.s	a5,ft11,fa5
   14814:	04079e63          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
   14818:	a0f717d3          	flt.s	a5,fa4,fa5
   1481c:	04079a63          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14820:	01c12787          	flw	fa5,28(sp)
   14824:	01812687          	flw	fa3,24(sp)
   14828:	10fcf7d3          	fmul.s	fa5,fs9,fa5
   1482c:	78df77c3          	fmadd.s	fa5,ft10,fa3,fa5
	if(t < ray.t_min || t > hit.t) return false;
   14830:	06412687          	flw	fa3,100(sp)
   14834:	78c977c3          	fmadd.s	fa5,fs2,fa2,fa5
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   14838:	1847f7d3          	fdiv.s	fa5,fa5,ft4
	if(t < ray.t_min || t > hit.t) return false;
   1483c:	a0d797d3          	flt.s	a5,fa5,fa3
   14840:	02079863          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
   14844:	a0fd97d3          	flt.s	a5,fs11,fa5
   14848:	02079463          	bnez	a5,14870 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xff8>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   1484c:	01f476d3          	fadd.s	fa3,fs0,ft11
	hit.t = t ;
   14850:	00f92027          	fsw	fa5,0(s2)
				hit.id = node_index;
   14854:	01e92623          	sw	t5,12(s2)
		uint32_t lod = current_node_entry.lod;
   14858:	00038413          	mv	s0,t2
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   1485c:	00e6f7d3          	fadd.s	fa5,fa3,fa4
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   14860:	18f47453          	fdiv.s	fs0,fs0,fa5
   14864:	18ffffd3          	fdiv.s	ft11,ft11,fa5
	e[0] = v[0];
   14868:	00892227          	fsw	fs0,4(s2)
	e[1] = v[1];
   1486c:	01f92427          	fsw	ft11,8(s2)
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   14870:	000e8e13          	mv	t3,t4
	} while(node_stack_size);
   14874:	d40e10e3          	bnez	t3,145b4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd3c>
	if(hit_lod != ~0u)
   14878:	fff00793          	li	a5,-1
   1487c:	09c12687          	flw	fa3,156(sp)
   14880:	0a012707          	flw	fa4,160(sp)
   14884:	0a412787          	flw	fa5,164(sp)
   14888:	0a813c83          	ld	s9,168(sp)
   1488c:	52f40a63          	beq	s0,a5,14dc0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1548>
		hit.id += header.id_offset;
   14890:	00c92703          	lw	a4,12(s2)
   14894:	004c9793          	sll	a5,s9,0x4
   14898:	0247d793          	srl	a5,a5,0x24
   1489c:	00f707bb          	addw	a5,a4,a5
   148a0:	00f92623          	sw	a5,12(s2)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   148a4:	09013783          	ld	a5,144(sp)
   148a8:	0b813703          	ld	a4,184(sp)
   148ac:	04078793          	add	a5,a5,64
   148b0:	08f13823          	sd	a5,144(sp)
   148b4:	00f706e3          	beq	a4,a5,150c0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1848>
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   148b8:	00100793          	li	a5,1
   148bc:	0cf13823          	sd	a5,208(sp)
   148c0:	00c82607          	flw	fa2,12(a6)
		if(current_node_entry.t >= hit.t) continue;
   148c4:	00092c87          	flw	fs9,0(s2)
   148c8:	20c60153          	fmv.s	ft2,fa2
   148cc:	01c82607          	flw	fa2,28(a6)
   148d0:	20c602d3          	fmv.s	ft5,fa2
   148d4:	980ff06f          	j	13a54 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1dc>
	e[1] = v[1];
   148d8:	20318cd3          	fmv.s	fs9,ft3
   148dc:	20f78453          	fmv.s	fs0,fa5
   148e0:	20b58753          	fmv.s	fa4,fa1
	inline float operator[](int i) const { return e[i]; }
   148e4:	0005a007          	flw	ft0,0(a1)
   148e8:	0045a587          	flw	fa1,4(a1)
   148ec:	0085a787          	flw	fa5,8(a1)
	e[0] = v[0];
   148f0:	204201d3          	fmv.s	ft3,ft4
	e[1] = v[1];
   148f4:	20a50153          	fmv.s	ft2,fa0
	e[0] = v[0];
   148f8:	20108853          	fmv.s	fa6,ft1
	if(gn_dot_d > 0.0f) bc = -bc;
   148fc:	f00004d3          	fmv.w.x	fs1,zero
   14900:	219c88d3          	fmv.s	fa7,fs9
   14904:	216b0dd3          	fmv.s	fs11,fs6
   14908:	217b8953          	fmv.s	fs2,fs7
   1490c:	218c09d3          	fmv.s	fs3,fs8
			for(uint32_t i = 0; i < 4; ++i)
   14910:	00000793          	li	a5,0
   14914:	00400693          	li	a3,4
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   14918:	00100613          	li	a2,1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1491c:	080876d3          	fsub.s	fa3,fa6,ft0
   14920:	08f47f53          	fsub.s	ft10,fs0,fa5
   14924:	08f770d3          	fsub.s	ft1,fa4,fa5
   14928:	0801f253          	fsub.s	ft4,ft3,ft0
   1492c:	08b8fc53          	fsub.s	fs8,fa7,fa1
   14930:	0901f653          	fsub.s	fa2,ft3,fa6
		(-(a[0] * b[2] - a[2] * b[0])),
   14934:	11e6ffd3          	fmul.s	ft11,fa3,ft10
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14938:	08b172d3          	fsub.s	ft5,ft2,fa1
   1493c:	08307553          	fsub.s	fa0,ft0,ft3
	return vec3(a[1] * b[2] - a[2] * b[1],
   14940:	1180f353          	fmul.s	ft6,ft1,fs8
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14944:	00c12627          	fsw	fa2,12(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   14948:	f840f3c7          	fmsub.s	ft7,ft1,ft4,ft11
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1494c:	09b87653          	fsub.s	fa2,fa6,fs11
   14950:	09217fd3          	fsub.s	ft11,ft2,fs2
   14954:	09377bd3          	fsub.s	fs7,fa4,fs3
   14958:	09347b53          	fsub.s	fs6,fs0,fs3
   1495c:	0937fe53          	fsub.s	ft8,fa5,fs3
   14960:	08e47753          	fsub.s	fa4,fs0,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   14964:	00712827          	fsw	ft7,16(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   14968:	00c12387          	flw	ft7,12(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   1496c:	31e2ff47          	fmsub.s	ft10,ft5,ft10,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14970:	02c12827          	fsw	fa2,48(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14974:	01012307          	flw	ft6,16(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14978:	21ff8653          	fmv.s	fa2,ft11
   1497c:	0887f7d3          	fsub.s	fa5,fa5,fs0
   14980:	09b1f1d3          	fsub.s	ft3,ft3,fs11
   14984:	0928ffd3          	fsub.s	ft11,fa7,fs2
   14988:	0925f453          	fsub.s	fs0,fa1,fs2
		(-(a[0] * b[2] - a[2] * b[0])),
   1498c:	11657cd3          	fmul.s	fs9,fa0,fs6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14990:	09b07053          	fsub.s	ft0,ft0,fs11
		(-(a[0] * b[2] - a[2] * b[0])),
   14994:	1173f3d3          	fmul.s	ft7,ft7,fs7
   14998:	11c6f853          	fmul.s	fa6,fa3,ft8
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1499c:	0828f153          	fsub.s	ft2,fa7,ft2
   149a0:	0915f5d3          	fsub.s	fa1,fa1,fa7
		a[0] * b[1] - a[1] * b[0]);
   149a4:	1042f253          	fmul.s	ft4,ft5,ft4
	return vec3(a[1] * b[2] - a[2] * b[1],
   149a8:	10c778d3          	fmul.s	fa7,fa4,fa2
   149ac:	02c12c27          	fsw	fa2,56(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   149b0:	106af353          	fmul.s	ft6,fs5,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   149b4:	03012607          	flw	fa2,48(sp)
   149b8:	2186f247          	fmsub.s	ft4,fa3,fs8,ft4
   149bc:	897178c7          	fmsub.s	fa7,ft2,fs7,fa7
   149c0:	38c77747          	fmsub.s	fa4,fa4,fa2,ft7
   149c4:	11f7f3d3          	fmul.s	ft7,fa5,ft11
   149c8:	c837f7c7          	fmsub.s	fa5,fa5,ft3,fs9
   149cc:	1080fcd3          	fmul.s	fs9,ft1,fs0
   149d0:	8000f0c7          	fmsub.s	ft1,ft1,ft0,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   149d4:	31ed7343          	fmadd.s	ft6,fs10,ft10,ft6
		a[0] * b[1] - a[1] * b[0]);
   149d8:	10c17153          	fmul.s	ft2,ft2,fa2
	return vec3(a[1] * b[2] - a[2] * b[1],
   149dc:	3965f3c7          	fmsub.s	ft7,fa1,fs6,ft7
   149e0:	c9c2fcc7          	fmsub.s	fs9,ft5,ft8,fs9
		a[0] * b[1] - a[1] * b[0]);
   149e4:	1035f5d3          	fmul.s	fa1,fa1,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   149e8:	10eaf753          	fmul.s	fa4,fs5,fa4
   149ec:	10faf7d3          	fmul.s	fa5,fs5,fa5
		a[0] * b[1] - a[1] * b[0]);
   149f0:	1002f2d3          	fmul.s	ft5,ft5,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   149f4:	101af0d3          	fmul.s	ft1,fs5,ft1
   149f8:	304a7343          	fmadd.s	ft6,fs4,ft4,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   149fc:	03812187          	flw	ft3,56(sp)
   14a00:	00c12607          	flw	fa2,12(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14a04:	711d78c3          	fmadd.s	fa7,fs10,fa7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   14a08:	59f57547          	fmsub.s	fa0,fa0,ft11,fa1
   14a0c:	10367647          	fmsub.s	fa2,fa2,ft3,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14a10:	787d73c3          	fmadd.s	ft7,fs10,ft7,fa5
	return vec3(a[1] * b[2] - a[2] * b[1],
   14a14:	2886f6c7          	fmsub.s	fa3,fa3,fs0,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14a18:	099d7cc3          	fmadd.s	fs9,fs10,fs9,ft1
   14a1c:	a0649753          	flt.s	a4,fs1,ft6
   14a20:	88ca7643          	fmadd.s	fa2,fs4,fa2,fa7
   14a24:	38aa7543          	fmadd.s	fa0,fs4,fa0,ft7
   14a28:	c8da76c3          	fmadd.s	fa3,fs4,fa3,fs9
   14a2c:	00070863          	beqz	a4,14a3c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x11c4>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   14a30:	20c61653          	fneg.s	fa2,fa2
   14a34:	20a51553          	fneg.s	fa0,fa0
   14a38:	20d696d3          	fneg.s	fa3,fa3
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   14a3c:	a0961753          	flt.s	a4,fa2,fs1
   14a40:	06071463          	bnez	a4,14aa8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1230>
   14a44:	a0951753          	flt.s	a4,fa0,fs1
   14a48:	06071063          	bnez	a4,14aa8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1230>
   14a4c:	a0969753          	flt.s	a4,fa3,fs1
   14a50:	04071c63          	bnez	a4,14aa8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1230>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   14a54:	01012787          	flw	fa5,16(sp)
   14a58:	10f47453          	fmul.s	fs0,fs0,fa5
	if(t < ray.t_min || t > hit.t) return false;
   14a5c:	06412787          	flw	fa5,100(sp)
   14a60:	41e07043          	fmadd.s	ft0,ft0,ft10,fs0
   14a64:	004e7e43          	fmadd.s	ft8,ft8,ft4,ft0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   14a68:	186e7e53          	fdiv.s	ft8,ft8,ft6
	if(t < ray.t_min || t > hit.t) return false;
   14a6c:	a0fe1753          	flt.s	a4,ft8,fa5
   14a70:	02071c63          	bnez	a4,14aa8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1230>
   14a74:	00092787          	flw	fa5,0(s2)
   14a78:	a1c79753          	flt.s	a4,fa5,ft8
   14a7c:	02071663          	bnez	a4,14aa8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1230>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   14a80:	00a677d3          	fadd.s	fa5,fa2,fa0
					hit.id = first_child_index + i;
   14a84:	00ff073b          	addw	a4,t5,a5
	hit.t = t ;
   14a88:	01c92027          	fsw	ft8,0(s2)
   14a8c:	00e92623          	sw	a4,12(s2)
   14a90:	00028413          	mv	s0,t0
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   14a94:	00d7f7d3          	fadd.s	fa5,fa5,fa3
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   14a98:	18f67653          	fdiv.s	fa2,fa2,fa5
   14a9c:	18f57553          	fdiv.s	fa0,fa0,fa5
	e[0] = v[0];
   14aa0:	00c92227          	fsw	fa2,4(s2)
	e[1] = v[1];
   14aa4:	00a92427          	fsw	fa0,8(s2)
			for(uint32_t i = 0; i < 4; ++i)
   14aa8:	0017879b          	addw	a5,a5,1
   14aac:	18d78063          	beq	a5,a3,14c2c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x13b4>
   14ab0:	18c78863          	beq	a5,a2,14c40 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x13c8>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   14ab4:	00200713          	li	a4,2
   14ab8:	1ae78863          	beq	a5,a4,14c68 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x13f0>
	e[2] = v[2];
   14abc:	02012407          	flw	fs0,32(sp)
	e[1] = v[1];
   14ac0:	01c12887          	flw	fa7,28(sp)
	e[0] = v[0];
   14ac4:	01812187          	flw	ft3,24(sp)
	e[2] = v[2];
   14ac8:	02c12707          	flw	fa4,44(sp)
	e[1] = v[1];
   14acc:	02812107          	flw	ft2,40(sp)
	e[0] = v[0];
   14ad0:	02412807          	flw	fa6,36(sp)
	e[2] = v[2];
   14ad4:	04412787          	flw	fa5,68(sp)
	e[1] = v[1];
   14ad8:	04012587          	flw	fa1,64(sp)
	e[0] = v[0];
   14adc:	03c12007          	flw	ft0,60(sp)
	}
   14ae0:	00300793          	li	a5,3
   14ae4:	e39ff06f          	j	1491c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x10a4>
		else         tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   14ae8:	fff3869b          	addw	a3,t2,-1
   14aec:	02069693          	sll	a3,a3,0x20
   14af0:	04c00713          	li	a4,76
   14af4:	0206d693          	srl	a3,a3,0x20
   14af8:	02e686b3          	mul	a3,a3,a4
   14afc:	23010713          	add	a4,sp,560
		uint32_t tri_type = current_node_entry.tri_type;
   14b00:	0005829b          	sext.w	t0,a1
		else         tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   14b04:	02468613          	add	a2,a3,36
   14b08:	00c70633          	add	a2,a4,a2
   14b0c:	00d706b3          	add	a3,a4,a3
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   14b10:	0e059263          	bnez	a1,14bf4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x137c>
	inline float operator[](int i) const { return e[i]; }
   14b14:	0006a887          	flw	fa7,0(a3)
   14b18:	0046a807          	flw	fa6,4(a3)
   14b1c:	0086a387          	flw	ft7,8(a3)
   14b20:	01862087          	flw	ft1,24(a2)
   14b24:	01c62507          	flw	fa0,28(a2)
   14b28:	02062007          	flw	ft0,32(a2)
   14b2c:	00c62207          	flw	ft4,12(a2)
   14b30:	01062187          	flw	ft3,16(a2)
   14b34:	01462107          	flw	ft2,20(a2)
	return *this;
   14b38:	04c00693          	li	a3,76
   14b3c:	02df8fb3          	mul	t6,t6,a3
class Triangle
   14b40:	01f705b3          	add	a1,a4,t6
	e[0] = v[0];
   14b44:	0115a027          	fsw	fa7,0(a1)
	e[1] = v[1];
   14b48:	0105a227          	fsw	fa6,4(a1)
	e[2] = v[2];
   14b4c:	0075a427          	fsw	ft7,8(a1)
	e[0] = v[0];
   14b50:	0015a627          	fsw	ft1,12(a1)
	e[1] = v[1];
   14b54:	00a5a827          	fsw	fa0,16(a1)
	e[2] = v[2];
   14b58:	0005aa27          	fsw	ft0,20(a1)
	e[0] = v[0];
   14b5c:	0045ac27          	fsw	ft4,24(a1)
	e[1] = v[1];
   14b60:	0035ae27          	fsw	ft3,28(a1)
	e[2] = v[2];
   14b64:	0225a027          	fsw	ft2,32(a1)
   14b68:	b74ff06f          	j	13edc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x664>
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   14b6c:	908da587          	flw	fa1,-1784(s11)
   14b70:	eb0ff06f          	j	14220 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x9a8>
   14b74:	908da487          	flw	fs1,-1784(s11)
   14b78:	e78ff06f          	j	141f0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x978>
   14b7c:	908da307          	flw	ft6,-1784(s11)
   14b80:	e50ff06f          	j	141d0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x958>
   14b84:	908da787          	flw	fa5,-1784(s11)
   14b88:	e14ff06f          	j	1419c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x924>
   14b8c:	908daf87          	flw	ft11,-1784(s11)
   14b90:	dd0ff06f          	j	14160 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x8e8>
   14b94:	908dae07          	flw	ft8,-1784(s11)
   14b98:	d98ff06f          	j	14130 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x8b8>
   14b9c:	908da687          	flw	fa3,-1784(s11)
   14ba0:	d5cff06f          	j	140fc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x884>
   14ba4:	908daf07          	flw	ft10,-1784(s11)
   14ba8:	d18ff06f          	j	140c0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x848>
   14bac:	908da407          	flw	fs0,-1784(s11)
   14bb0:	cdcff06f          	j	1408c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x814>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   14bb4:	00100793          	li	a5,1
   14bb8:	0cf68c63          	beq	a3,a5,14c90 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1418>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   14bbc:	00200793          	li	a5,2
   14bc0:	0ef68e63          	beq	a3,a5,14cbc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1444>
	e[1] = v[1];
   14bc4:	01c12887          	flw	fa7,28(sp)
	e[0] = v[0];
   14bc8:	01812e07          	flw	ft8,24(sp)
	e[2] = v[2];
   14bcc:	02c12f07          	flw	ft10,44(sp)
	e[1] = v[1];
   14bd0:	02812f87          	flw	ft11,40(sp)
	e[0] = v[0];
   14bd4:	02412987          	flw	fs3,36(sp)
	e[2] = v[2];
   14bd8:	04412487          	flw	fs1,68(sp)
	e[1] = v[1];
   14bdc:	04012907          	flw	fs2,64(sp)
	e[0] = v[0];
   14be0:	03c12407          	flw	fs0,60(sp)
	e[2] = v[2];
   14be4:	01912627          	fsw	fs9,12(sp)
   14be8:	abdff06f          	j	146a4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xe2c>
   14bec:	00078713          	mv	a4,a5
   14bf0:	a45ff06f          	j	14634 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xdbc>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   14bf4:	00100593          	li	a1,1
	inline float operator[](int i) const { return e[i]; }
   14bf8:	00062887          	flw	fa7,0(a2)
   14bfc:	00462807          	flw	fa6,4(a2)
   14c00:	00862387          	flw	ft7,8(a2)
   14c04:	0eb28263          	beq	t0,a1,14ce8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1470>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   14c08:	00200593          	li	a1,2
   14c0c:	00c62087          	flw	ft1,12(a2)
   14c10:	01062507          	flw	fa0,16(a2)
   14c14:	01462007          	flw	ft0,20(a2)
   14c18:	16b28a63          	beq	t0,a1,14d8c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1514>
   14c1c:	01862207          	flw	ft4,24(a2)
   14c20:	01c62187          	flw	ft3,28(a2)
   14c24:	02062107          	flw	ft2,32(a2)
	}
   14c28:	f11ff06f          	j	14b38 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12c0>
		const NodeStackEntry current_node_entry = node_stack[--node_stack_size];
   14c2c:	21bd8b53          	fmv.s	fs6,fs11
   14c30:	21290bd3          	fmv.s	fs7,fs2
   14c34:	21398c53          	fmv.s	fs8,fs3
   14c38:	000e8e13          	mv	t3,t4
   14c3c:	975ff06f          	j	145b0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xd38>
   14c40:	00c5a807          	flw	fa6,12(a1)
   14c44:	0105a107          	flw	ft2,16(a1)
   14c48:	0145a707          	flw	fa4,20(a1)
	e[2] = v[2];
   14c4c:	04412407          	flw	fs0,68(sp)
	e[1] = v[1];
   14c50:	04012887          	flw	fa7,64(sp)
	e[0] = v[0];
   14c54:	03c12187          	flw	ft3,60(sp)
	e[2] = v[2];
   14c58:	02012787          	flw	fa5,32(sp)
	e[1] = v[1];
   14c5c:	01c12587          	flw	fa1,28(sp)
	e[0] = v[0];
   14c60:	01812007          	flw	ft0,24(sp)
   14c64:	cb9ff06f          	j	1491c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x10a4>
	inline float operator[](int i) const { return e[i]; }
   14c68:	0185a187          	flw	ft3,24(a1)
   14c6c:	01c5a887          	flw	fa7,28(a1)
   14c70:	0205a407          	flw	fs0,32(a1)
	e[2] = v[2];
   14c74:	04412707          	flw	fa4,68(sp)
	e[1] = v[1];
   14c78:	04012107          	flw	ft2,64(sp)
	e[0] = v[0];
   14c7c:	03c12807          	flw	fa6,60(sp)
	e[2] = v[2];
   14c80:	02c12787          	flw	fa5,44(sp)
	e[1] = v[1];
   14c84:	02812587          	flw	fa1,40(sp)
	e[0] = v[0];
   14c88:	02412007          	flw	ft0,36(sp)
   14c8c:	c91ff06f          	j	1491c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x10a4>
	e[2] = v[2];
   14c90:	04412807          	flw	fa6,68(sp)
	inline float operator[](int i) const { return e[i]; }
   14c94:	00c5a987          	flw	fs3,12(a1)
   14c98:	0105af87          	flw	ft11,16(a1)
   14c9c:	0145af07          	flw	ft10,20(a1)
	e[1] = v[1];
   14ca0:	04012887          	flw	fa7,64(sp)
	e[0] = v[0];
   14ca4:	03c12e07          	flw	ft8,60(sp)
	e[2] = v[2];
   14ca8:	219c84d3          	fmv.s	fs1,fs9
	e[1] = v[1];
   14cac:	01c12907          	flw	fs2,28(sp)
	e[0] = v[0];
   14cb0:	01812407          	flw	fs0,24(sp)
	e[2] = v[2];
   14cb4:	01012627          	fsw	fa6,12(sp)
   14cb8:	9edff06f          	j	146a4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xe2c>
	inline float operator[](int i) const { return e[i]; }
   14cbc:	0205a807          	flw	fa6,32(a1)
   14cc0:	0185ae07          	flw	ft8,24(a1)
   14cc4:	01c5a887          	flw	fa7,28(a1)
	e[2] = v[2];
   14cc8:	04412f07          	flw	ft10,68(sp)
	e[1] = v[1];
   14ccc:	04012f87          	flw	ft11,64(sp)
	e[0] = v[0];
   14cd0:	03c12987          	flw	fs3,60(sp)
	e[2] = v[2];
   14cd4:	02c12487          	flw	fs1,44(sp)
	e[1] = v[1];
   14cd8:	02812907          	flw	fs2,40(sp)
	e[0] = v[0];
   14cdc:	02412407          	flw	fs0,36(sp)
	inline float operator[](int i) const { return e[i]; }
   14ce0:	01012627          	fsw	fa6,12(sp)
	return *this;
   14ce4:	9c1ff06f          	j	146a4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xe2c>
	e[2] = v[2];
   14ce8:	20738153          	fmv.s	ft2,ft7
	e[1] = v[1];
   14cec:	210801d3          	fmv.s	ft3,fa6
	e[0] = v[0];
   14cf0:	21188253          	fmv.s	ft4,fa7
	inline float operator[](int i) const { return e[i]; }
   14cf4:	00c6a087          	flw	ft1,12(a3)
   14cf8:	0106a507          	flw	fa0,16(a3)
   14cfc:	0146a007          	flw	ft0,20(a3)
	e[2] = v[2];
   14d00:	02062387          	flw	ft7,32(a2)
	e[1] = v[1];
   14d04:	01c62807          	flw	fa6,28(a2)
	e[0] = v[0];
   14d08:	01862887          	flw	fa7,24(a2)
   14d0c:	e2dff06f          	j	14b38 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12c0>
   14d10:	908da607          	flw	fa2,-1784(s11)
   14d14:	08c12c27          	fsw	fa2,152(sp)
   14d18:	8b4ff06f          	j	13dcc <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x554>
   14d1c:	908da607          	flw	fa2,-1784(s11)
   14d20:	08c12227          	fsw	fa2,132(sp)
   14d24:	89cff06f          	j	13dc0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x548>
   14d28:	908da607          	flw	fa2,-1784(s11)
   14d2c:	08c12027          	fsw	fa2,128(sp)
   14d30:	880ff06f          	j	13db0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x538>
   14d34:	908da607          	flw	fa2,-1784(s11)
   14d38:	06c12e27          	fsw	fa2,124(sp)
   14d3c:	864ff06f          	j	13da0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x528>
   14d40:	908da607          	flw	fa2,-1784(s11)
   14d44:	06c12c27          	fsw	fa2,120(sp)
   14d48:	848ff06f          	j	13d90 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x518>
   14d4c:	908da607          	flw	fa2,-1784(s11)
   14d50:	06c12a27          	fsw	fa2,116(sp)
   14d54:	82cff06f          	j	13d80 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x508>
   14d58:	908da607          	flw	fa2,-1784(s11)
   14d5c:	06c12827          	fsw	fa2,112(sp)
   14d60:	810ff06f          	j	13d70 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x4f8>
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14d64:	9104a587          	flw	fa1,-1776(s1)
   14d68:	e49fe06f          	j	13bb0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x338>
   14d6c:	9104a207          	flw	ft4,-1776(s1)
   14d70:	e15fe06f          	j	13b84 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x30c>
   14d74:	9104a187          	flw	ft3,-1776(s1)
   14d78:	dd9fe06f          	j	13b50 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2d8>
   14d7c:	9104a007          	flw	ft0,-1776(s1)
   14d80:	da1fe06f          	j	13b20 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2a8>
   14d84:	9104a307          	flw	ft6,-1776(s1)
   14d88:	d6dfe06f          	j	13af4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x27c>
	inline float operator[](int i) const { return e[i]; }
   14d8c:	207386d3          	fmv.s	fa3,ft7
   14d90:	21080753          	fmv.s	fa4,fa6
   14d94:	211887d3          	fmv.s	fa5,fa7
	e[2] = v[2];
   14d98:	200003d3          	fmv.s	ft7,ft0
	e[1] = v[1];
   14d9c:	20a50853          	fmv.s	fa6,fa0
	e[0] = v[0];
   14da0:	201088d3          	fmv.s	fa7,ft1
	inline float operator[](int i) const { return e[i]; }
   14da4:	0186a207          	flw	ft4,24(a3)
   14da8:	01c6a187          	flw	ft3,28(a3)
   14dac:	0206a107          	flw	ft2,32(a3)
	e[2] = v[2];
   14db0:	20d68053          	fmv.s	ft0,fa3
	e[1] = v[1];
   14db4:	20e70553          	fmv.s	fa0,fa4
	e[0] = v[0];
   14db8:	20f780d3          	fmv.s	ft1,fa5
   14dbc:	d7dff06f          	j	14b38 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12c0>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   14dc0:	09013783          	ld	a5,144(sp)
   14dc4:	0b813703          	ld	a4,184(sp)
   14dc8:	04078793          	add	a5,a5,64
   14dcc:	08f13823          	sd	a5,144(sp)
   14dd0:	aef718e3          	bne	a4,a5,148c0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1048>
   14dd4:	0d813403          	ld	s0,216(sp)
   14dd8:	0c012d87          	flw	fs11,192(sp)
   14ddc:	0e013a03          	ld	s4,224(sp)
   14de0:	0e813383          	ld	t2,232(sp)
	while(node_stack_size);
   14de4:	00040463          	beqz	s0,14dec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1574>
   14de8:	b91fe06f          	j	13978 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x100>
   14dec:	0d013503          	ld	a0,208(sp)
   14df0:	0e010113          	add	sp,sp,224
   14df4:	7e813403          	ld	s0,2024(sp)
   14df8:	7e013483          	ld	s1,2016(sp)
   14dfc:	7d813903          	ld	s2,2008(sp)
   14e00:	7d013983          	ld	s3,2000(sp)
   14e04:	7c813a03          	ld	s4,1992(sp)
   14e08:	7c013a83          	ld	s5,1984(sp)
   14e0c:	7b813b03          	ld	s6,1976(sp)
   14e10:	7b013b83          	ld	s7,1968(sp)
   14e14:	7a813c03          	ld	s8,1960(sp)
   14e18:	7a013c83          	ld	s9,1952(sp)
   14e1c:	79813d03          	ld	s10,1944(sp)
   14e20:	79013d83          	ld	s11,1936(sp)
   14e24:	78c12407          	flw	fs0,1932(sp)
   14e28:	78812487          	flw	fs1,1928(sp)
   14e2c:	78412907          	flw	fs2,1924(sp)
   14e30:	78012987          	flw	fs3,1920(sp)
   14e34:	77c12a07          	flw	fs4,1916(sp)
   14e38:	77812a87          	flw	fs5,1912(sp)
   14e3c:	77412b07          	flw	fs6,1908(sp)
   14e40:	77012b87          	flw	fs7,1904(sp)
   14e44:	76c12c07          	flw	fs8,1900(sp)
   14e48:	76812c87          	flw	fs9,1896(sp)
   14e4c:	76412d07          	flw	fs10,1892(sp)
   14e50:	76012d87          	flw	fs11,1888(sp)
   14e54:	7f010113          	add	sp,sp,2032
   14e58:	00008067          	ret
	stack[j] = entry;
   14e5c:	020e9793          	sll	a5,t4,0x20
   14e60:	0207d793          	srl	a5,a5,0x20
   14e64:	00179713          	sll	a4,a5,0x1
   14e68:	00f70733          	add	a4,a4,a5
   14e6c:	11010393          	add	t2,sp,272
   14e70:	00271713          	sll	a4,a4,0x2
   14e74:	00e38733          	add	a4,t2,a4
   14e78:	fbcff06f          	j	14634 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xdbc>
			move_to_stack(node4, blas[current_entry.data.fst_chld_ind]);
   14e7c:	00679793          	sll	a5,a5,0x6
		uint64_t r = ((uint64_t*)&src)[i];
   14e80:	00fa07b3          	add	a5,s4,a5
   14e84:	0207b503          	ld	a0,32(a5)
   14e88:	0287b583          	ld	a1,40(a5)
   14e8c:	0387b683          	ld	a3,56(a5)
   14e90:	0087be83          	ld	t4,8(a5)
   14e94:	0107be03          	ld	t3,16(a5)
   14e98:	0187b303          	ld	t1,24(a5)
   14e9c:	0307b603          	ld	a2,48(a5)
		((uint64_t*)&dst)[i] = r;
   14ea0:	0007b783          	ld	a5,0(a5)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14ea4:	9104a007          	flw	ft0,-1776(s1)
   14ea8:	908da187          	flw	ft3,-1784(s11)
   14eac:	05812287          	flw	ft5,88(sp)
   14eb0:	05c12307          	flw	ft6,92(sp)
   14eb4:	06012387          	flw	ft7,96(sp)
   14eb8:	01098893          	add	a7,s3,16
   14ebc:	00471713          	sll	a4,a4,0x4
		((uint64_t*)&dst)[i] = r;
   14ec0:	02a9b023          	sd	a0,32(s3)
   14ec4:	02b9b423          	sd	a1,40(s3)
   14ec8:	02d9bc23          	sd	a3,56(s3)
   14ecc:	00f9b023          	sd	a5,0(s3)
   14ed0:	01d9b423          	sd	t4,8(s3)
   14ed4:	01c9b823          	sd	t3,16(s3)
   14ed8:	0069bc23          	sd	t1,24(s3)
   14edc:	02c9b823          	sd	a2,48(s3)
   14ee0:	00098693          	mv	a3,s3
   14ee4:	00e888b3          	add	a7,a7,a4
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14ee8:	3f8005b7          	lui	a1,0x3f800
   14eec:	49010513          	add	a0,sp,1168
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   14ef0:	0006d783          	lhu	a5,0(a3)
   14ef4:	20000653          	fmv.s	fa2,ft0
   14ef8:	00f7d713          	srl	a4,a5,0xf
   14efc:	00071c63          	bnez	a4,14f14 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x169c>
   14f00:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14f04:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14f08:	f0078653          	fmv.w.x	fa2,a5
   14f0c:	08367653          	fsub.s	fa2,fa2,ft3
   14f10:	00c67653          	fadd.s	fa2,fa2,fa2
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   14f14:	0066d783          	lhu	a5,6(a3)
   14f18:	200008d3          	fmv.s	fa7,ft0
   14f1c:	00f7d713          	srl	a4,a5,0xf
   14f20:	00071c63          	bnez	a4,14f38 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x16c0>
   14f24:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14f28:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14f2c:	f00785d3          	fmv.w.x	fa1,a5
   14f30:	0835f8d3          	fsub.s	fa7,fa1,ft3
   14f34:	0118f8d3          	fadd.s	fa7,fa7,fa7
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   14f38:	0026d783          	lhu	a5,2(a3)
   14f3c:	20000553          	fmv.s	fa0,ft0
   14f40:	00f7d713          	srl	a4,a5,0xf
   14f44:	00071c63          	bnez	a4,14f5c <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x16e4>
   14f48:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14f4c:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14f50:	f00785d3          	fmv.w.x	fa1,a5
   14f54:	0835f553          	fsub.s	fa0,fa1,ft3
   14f58:	00a57553          	fadd.s	fa0,fa0,fa0
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   14f5c:	0086d783          	lhu	a5,8(a3)
   14f60:	20000853          	fmv.s	fa6,ft0
   14f64:	00f7d713          	srl	a4,a5,0xf
   14f68:	00071c63          	bnez	a4,14f80 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1708>
   14f6c:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14f70:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14f74:	f00785d3          	fmv.w.x	fa1,a5
   14f78:	0835f853          	fsub.s	fa6,fa1,ft3
   14f7c:	01087853          	fadd.s	fa6,fa6,fa6
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   14f80:	0046d783          	lhu	a5,4(a3)
   14f84:	200005d3          	fmv.s	fa1,ft0
   14f88:	00f7d713          	srl	a4,a5,0xf
   14f8c:	00071c63          	bnez	a4,14fa4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x172c>
   14f90:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14f94:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14f98:	f00785d3          	fmv.w.x	fa1,a5
   14f9c:	0835f5d3          	fsub.s	fa1,fa1,ft3
   14fa0:	00b5f5d3          	fadd.s	fa1,fa1,fa1
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   14fa4:	00a6d783          	lhu	a5,10(a3)
   14fa8:	20000253          	fmv.s	ft4,ft0
   14fac:	00f7d713          	srl	a4,a5,0xf
   14fb0:	00071c63          	bnez	a4,14fc8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1750>
   14fb4:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   14fb8:	00b7e7b3          	or	a5,a5,a1
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   14fbc:	f0078253          	fmv.w.x	ft4,a5
   14fc0:	08327253          	fsub.s	ft4,ft4,ft3
   14fc4:	00427253          	fadd.s	ft4,ft4,ft4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14fc8:	0116fe53          	fadd.s	ft8,fa3,fa7
   14fcc:	00c6f653          	fadd.s	fa2,fa3,fa2
   14fd0:	00a77553          	fadd.s	fa0,fa4,fa0
   14fd4:	010778d3          	fadd.s	fa7,fa4,fa6
   14fd8:	00b7f5d3          	fadd.s	fa1,fa5,fa1
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   14fdc:	105e7e53          	fmul.s	ft8,ft8,ft5
   14fe0:	10567653          	fmul.s	fa2,fa2,ft5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   14fe4:	0047f853          	fadd.s	fa6,fa5,ft4
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   14fe8:	1068f8d3          	fmul.s	fa7,fa7,ft6
   14fec:	10657253          	fmul.s	ft4,fa0,ft6
   14ff0:	1075f553          	fmul.s	fa0,fa1,ft7
   14ff4:	29c605d3          	fmin.s	fa1,fa2,ft8
	if (tmin > tmax) return ray.t_max;//no hit || behind
   14ff8:	29c61653          	fmax.s	fa2,fa2,ft8
   14ffc:	10787853          	fmul.s	fa6,fa6,ft7
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   15000:	29120e53          	fmin.s	ft8,ft4,fa7
   15004:	282595d3          	fmax.s	fa1,fa1,ft2
	if (tmin > tmax) return ray.t_max;//no hit || behind
   15008:	29121253          	fmax.s	ft4,ft4,fa7
   1500c:	28160653          	fmin.s	fa2,fa2,ft1
   15010:	290508d3          	fmin.s	fa7,fa0,fa6
   15014:	29c595d3          	fmax.s	fa1,fa1,ft8
   15018:	28460653          	fmin.s	fa2,fa2,ft4
   1501c:	29051553          	fmax.s	fa0,fa0,fa6
   15020:	291595d3          	fmax.s	fa1,fa1,fa7
   15024:	28a60653          	fmin.s	fa2,fa2,fa0
   15028:	a0b617d3          	flt.s	a5,fa2,fa1
   1502c:	00078463          	beqz	a5,15034 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x17bc>
   15030:	201085d3          	fmv.s	fa1,ft1
				new_entry.data = node4.nodes[i].data;
   15034:	00c6a703          	lw	a4,12(a3)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   15038:	a08597d3          	flt.s	a5,fa1,fs0
				new_entry.data = node4.nodes[i].data;
   1503c:	22e12a23          	sw	a4,564(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   15040:	00079c63          	bnez	a5,15058 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x17e0>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   15044:	01068693          	add	a3,a3,16
   15048:	ead894e3          	bne	a7,a3,14ef0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1678>
	while(node_stack_size);
   1504c:	00040463          	beqz	s0,15054 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x17dc>
   15050:	929fe06f          	j	13978 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x100>
   15054:	d99ff06f          	j	14dec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1574>
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   15058:	00140e9b          	addw	t4,s0,1
	for(; j != min; --j)
   1505c:	08040463          	beqz	s0,150e4 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x186c>
   15060:	fff4079b          	addw	a5,s0,-1
   15064:	02041613          	sll	a2,s0,0x20
   15068:	01d65713          	srl	a4,a2,0x1d
   1506c:	02079613          	sll	a2,a5,0x20
   15070:	01d65793          	srl	a5,a2,0x1d
   15074:	00050f13          	mv	t5,a0
   15078:	00e50733          	add	a4,a0,a4
   1507c:	00f507b3          	add	a5,a0,a5
   15080:	0180006f          	j	15098 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1820>
		stack[j] = stack[j - 1];
   15084:	0007b603          	ld	a2,0(a5)
	for(; j != min; --j)
   15088:	ff870713          	add	a4,a4,-8
		stack[j] = stack[j - 1];
   1508c:	00c73423          	sd	a2,8(a4)
	for(; j != min; --j)
   15090:	04f50c63          	beq	a0,a5,150e8 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1870>
   15094:	00030793          	mv	a5,t1
		if(stack[j - 1].t >= entry.t) break;
   15098:	0007a607          	flw	fa2,0(a5)
		stack[j] = stack[j - 1];
   1509c:	00070e13          	mv	t3,a4
	for(; j != min; --j)
   150a0:	ff878313          	add	t1,a5,-8
		if(stack[j - 1].t >= entry.t) break;
   150a4:	a0c58653          	fle.s	a2,fa1,fa2
   150a8:	fc060ee3          	beqz	a2,15084 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x180c>
	stack[j] = entry;
   150ac:	22b12827          	fsw	fa1,560(sp)
   150b0:	23013783          	ld	a5,560(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   150b4:	000e8413          	mv	s0,t4
	stack[j] = entry;
   150b8:	00fe3023          	sd	a5,0(t3)
}
   150bc:	f89ff06f          	j	15044 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x17cc>
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   150c0:	0d813403          	ld	s0,216(sp)
   150c4:	00100793          	li	a5,1
   150c8:	0cf13823          	sd	a5,208(sp)
   150cc:	0c012d87          	flw	fs11,192(sp)
   150d0:	0e013a03          	ld	s4,224(sp)
   150d4:	0e813383          	ld	t2,232(sp)
	while(node_stack_size);
   150d8:	00040463          	beqz	s0,150e0 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1868>
   150dc:	89dfe06f          	j	13978 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x100>
   150e0:	d0dff06f          	j	14dec <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x1574>
   150e4:	49010f13          	add	t5,sp,1168
	stack[j] = entry;
   150e8:	22b12827          	fsw	fa1,560(sp)
   150ec:	23013783          	ld	a5,560(sp)
   150f0:	000f0e13          	mv	t3,t5
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   150f4:	000e8413          	mv	s0,t4
	stack[j] = entry;
   150f8:	00fe3023          	sd	a5,0(t3)
   150fc:	f49ff06f          	j	15044 <_Z9intersectI24TesselationTree4PointersEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x17cc>

0000000000015100 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>:
inline bool intersect(const BVH::Node* blas, const T& mesh, const Ray& ray, Hit& hit)
   15100:	c2010113          	add	sp,sp,-992
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15104:	000197b7          	lui	a5,0x19
   15108:	9087a787          	flw	fa5,-1784(a5) # 18908 <__DATA_BEGIN__>
   1510c:	3b212227          	fsw	fs2,932(sp)
   15110:	39712827          	fsw	fs7,912(sp)
	inline float operator[](int i) const { return e[i]; }
   15114:	01462907          	flw	fs2,20(a2)
   15118:	01062b87          	flw	fs7,16(a2)
   1511c:	39512c27          	fsw	fs5,920(sp)
   15120:	39612a27          	fsw	fs6,916(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15124:	1927fad3          	fdiv.s	fs5,fa5,fs2
   15128:	3b312027          	fsw	fs3,928(sp)
	inline float operator[](int i) const { return e[i]; }
   1512c:	01862987          	flw	fs3,24(a2)
   15130:	3c813823          	sd	s0,976(sp)
   15134:	39412e27          	fsw	fs4,924(sp)
   15138:	34f10413          	add	s0,sp,847
   1513c:	fe047413          	and	s0,s0,-32
   15140:	3d213023          	sd	s2,960(sp)
   15144:	3b313c23          	sd	s3,952(sp)
   15148:	00060913          	mv	s2,a2
   1514c:	3b413823          	sd	s4,944(sp)
   15150:	00050993          	mv	s3,a0
   15154:	00058a13          	mv	s4,a1
		((uint64_t*)&dst)[i] = r;
   15158:	02000613          	li	a2,32
   1515c:	00050593          	mv	a1,a0
   15160:	02040513          	add	a0,s0,32
   15164:	3c913423          	sd	s1,968(sp)
   15168:	3c113c23          	sd	ra,984(sp)
   1516c:	3a812627          	fsw	fs0,940(sp)
   15170:	3a912427          	fsw	fs1,936(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15174:	1977fb53          	fdiv.s	fs6,fa5,fs7
   15178:	39812627          	fsw	fs8,908(sp)
   1517c:	39912427          	fsw	fs9,904(sp)
   15180:	39a12227          	fsw	fs10,900(sp)
   15184:	39b12027          	fsw	fs11,896(sp)
   15188:	00068493          	mv	s1,a3
   1518c:	1937fa53          	fdiv.s	fs4,fa5,fs3
   15190:	00002097          	auipc	ra,0x2
   15194:	11c080e7          	jalr	284(ra) # 172ac <memcpy>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15198:	000197b7          	lui	a5,0x19
   1519c:	9207a707          	flw	fa4,-1760(a5) # 18920 <__DATA_BEGIN__+0x18>
   151a0:	000197b7          	lui	a5,0x19
   151a4:	9247a687          	flw	fa3,-1756(a5) # 18924 <__DATA_BEGIN__+0x1c>
	inline float operator[](int i) const { return e[i]; }
   151a8:	00092e07          	flw	ft8,0(s2)
   151ac:	00492e87          	flw	ft9,4(s2)
   151b0:	00892f07          	flw	ft10,8(s2)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   151b4:	09c777d3          	fsub.s	fa5,fa4,ft8
   151b8:	09d775d3          	fsub.s	fa1,fa4,ft9
   151bc:	09c6f053          	fsub.s	ft0,fa3,ft8
   151c0:	09d6f553          	fsub.s	fa0,fa3,ft9
   151c4:	09e77753          	fsub.s	fa4,fa4,ft10
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   151c8:	1167f7d3          	fmul.s	fa5,fa5,fs6
   151cc:	1155f5d3          	fmul.s	fa1,fa1,fs5
   151d0:	11607053          	fmul.s	ft0,ft0,fs6
   151d4:	11557553          	fmul.s	fa0,fa0,fs5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   151d8:	09e6f6d3          	fsub.s	fa3,fa3,ft10
      if (__a < __b)
   151dc:	00c92107          	flw	ft2,12(s2)
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   151e0:	11477753          	fmul.s	fa4,fa4,fs4
   151e4:	28078653          	fmin.s	fa2,fa5,ft0
   151e8:	28a580d3          	fmin.s	ft1,fa1,fa0
	if (tmin > tmax) return ray.t_max;//no hit || behind
   151ec:	280797d3          	fmax.s	fa5,fa5,ft0
   151f0:	28a595d3          	fmax.s	fa1,fa1,fa0
   151f4:	1146f6d3          	fmul.s	fa3,fa3,fs4
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   151f8:	28161653          	fmax.s	fa2,fa2,ft1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   151fc:	28b787d3          	fmin.s	fa5,fa5,fa1
      if (__b < __a)
   15200:	01c92507          	flw	fa0,28(s2)
   15204:	28261653          	fmax.s	fa2,fa2,ft2
   15208:	28d705d3          	fmin.s	fa1,fa4,fa3
   1520c:	28a787d3          	fmin.s	fa5,fa5,fa0
   15210:	28d71753          	fmax.s	fa4,fa4,fa3
   15214:	28b616d3          	fmax.s	fa3,fa2,fa1
      if (__a < __b)
   15218:	00212827          	fsw	ft2,16(sp)
   1521c:	28e787d3          	fmin.s	fa5,fa5,fa4
   15220:	a0d797d3          	flt.s	a5,fa5,fa3
   15224:	00079463          	bnez	a5,1522c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x12c>
	return tmin;
   15228:	20d68553          	fmv.s	fa0,fa3
	node_stack[0].data = root_node.data;
   1522c:	03842783          	lw	a5,56(s0)
	if(gn_dot_d > 0.0f) bc = -bc;
   15230:	f0000d53          	fmv.w.x	fs10,zero
   15234:	217b8cd3          	fmv.s	fs9,fs7
	node_stack[0].t = intersect(root_node.aabb, ray, inv_d);
   15238:	02a12827          	fsw	fa0,48(sp)
	node_stack[0].data = root_node.data;
   1523c:	02f12a23          	sw	a5,52(sp)
	bool found_hit = false;
   15240:	00000513          	li	a0,0
	uint32_t node_stack_size = 1u;
   15244:	00100813          	li	a6,1
   15248:	03010693          	add	a3,sp,48
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   1524c:	fff8081b          	addw	a6,a6,-1
   15250:	02081713          	sll	a4,a6,0x20
   15254:	01d75793          	srl	a5,a4,0x1d
   15258:	36078793          	add	a5,a5,864
   1525c:	02010713          	add	a4,sp,32
   15260:	00e787b3          	add	a5,a5,a4
   15264:	cb07b703          	ld	a4,-848(a5)
		if(current_entry.t >= hit.t) return found_hit;
   15268:	0004a507          	flw	fa0,0(s1)
   1526c:	f00707d3          	fmv.w.x	fa5,a4
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15270:	02e13023          	sd	a4,32(sp)
		if(current_entry.t >= hit.t) return found_hit;
   15274:	a0f507d3          	fle.s	a5,fa0,fa5
   15278:	24079063          	bnez	a5,154b8 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x3b8>
		if(!current_entry.data.is_leaf)
   1527c:	02412783          	lw	a5,36(sp)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   15280:	02175f93          	srl	t6,a4,0x21
   15284:	007fff93          	and	t6,t6,7
		if(!current_entry.data.is_leaf)
   15288:	0017f793          	and	a5,a5,1
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   1528c:	02475713          	srl	a4,a4,0x24
		if(!current_entry.data.is_leaf)
   15290:	26078c63          	beqz	a5,15508 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x408>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   15294:	000a3603          	ld	a2,0(s4)
   15298:	00171793          	sll	a5,a4,0x1
   1529c:	00e787b3          	add	a5,a5,a4
   152a0:	00279793          	sll	a5,a5,0x2
   152a4:	008a3583          	ld	a1,8(s4)
   152a8:	00f60633          	add	a2,a2,a5
   152ac:	00ef8fb3          	add	t6,t6,a4
   152b0:	01612a27          	fsw	fs6,20(sp)
   152b4:	01512c27          	fsw	fs5,24(sp)
   152b8:	01412e27          	fsw	fs4,28(sp)
   152bc:	0080006f          	j	152c4 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1c4>
   152c0:	00078713          	mv	a4,a5
	const Triangle tri(mesh.vertices[vi[0]], mesh.vertices[vi[1]], mesh.vertices[vi[2]]);
   152c4:	00066f03          	lwu	t5,0(a2)
   152c8:	00466e83          	lwu	t4,4(a2)
   152cc:	00866e03          	lwu	t3,8(a2)
   152d0:	001f1313          	sll	t1,t5,0x1
   152d4:	001e9793          	sll	a5,t4,0x1
   152d8:	001e1893          	sll	a7,t3,0x1
   152dc:	01e30333          	add	t1,t1,t5
   152e0:	01d787b3          	add	a5,a5,t4
   152e4:	01c888b3          	add	a7,a7,t3
   152e8:	00231313          	sll	t1,t1,0x2
   152ec:	00279793          	sll	a5,a5,0x2
   152f0:	00289893          	sll	a7,a7,0x2
   152f4:	00f587b3          	add	a5,a1,a5
   152f8:	00658333          	add	t1,a1,t1
   152fc:	011588b3          	add	a7,a1,a7
	inline float operator[](int i) const { return e[i]; }
   15300:	0088af87          	flw	ft11,8(a7)
   15304:	00032507          	flw	fa0,0(t1)
   15308:	00832687          	flw	fa3,8(t1)
   1530c:	0007a287          	flw	ft5,0(a5)
   15310:	0008a087          	flw	ft1,0(a7)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15314:	08dff853          	fsub.s	fa6,ft11,fa3
   15318:	08a2f653          	fsub.s	fa2,ft5,fa0
	inline float operator[](int i) const { return e[i]; }
   1531c:	0048ab87          	flw	fs7,4(a7)
   15320:	00432587          	flw	fa1,4(t1)
   15324:	0087a707          	flw	fa4,8(a5)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15328:	08a0f153          	fsub.s	ft2,ft1,fa0
   1532c:	0850fa53          	fsub.s	fs4,ft1,ft5
   15330:	08157c53          	fsub.s	fs8,fa0,ft1
   15334:	09c0f0d3          	fsub.s	ft1,ft1,ft8
   15338:	08d77053          	fsub.s	ft0,fa4,fa3
   1533c:	08bbfad3          	fsub.s	fs5,fs7,fa1
		(-(a[0] * b[2] - a[2] * b[0])),
   15340:	11067453          	fmul.s	fs0,fa2,fa6
	inline float operator[](int i) const { return e[i]; }
   15344:	0047a787          	flw	fa5,4(a5)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15348:	09e778d3          	fsub.s	fa7,fa4,ft10
   1534c:	00112427          	fsw	ft1,8(sp)
   15350:	09dbf0d3          	fsub.s	ft1,fs7,ft9
   15354:	08b7f253          	fsub.s	ft4,fa5,fa1
	return vec3(a[1] * b[2] - a[2] * b[1],
   15358:	40207447          	fmsub.s	fs0,ft0,ft2,fs0
   1535c:	11507353          	fmul.s	ft6,ft0,fs5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15360:	09eff1d3          	fsub.s	ft3,ft11,ft10
   15364:	09e6f3d3          	fsub.s	ft7,fa3,ft10
   15368:	08eff753          	fsub.s	fa4,ft11,fa4
   1536c:	09d7f4d3          	fsub.s	fs1,fa5,ft9
   15370:	09f6f6d3          	fsub.s	fa3,fa3,ft11
		(-(a[0] * b[2] - a[2] * b[0])),
   15374:	111a7b53          	fmul.s	fs6,fs4,fa7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15378:	09c2f2d3          	fsub.s	ft5,ft5,ft8
   1537c:	00112227          	fsw	ft1,4(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   15380:	31027847          	fmsub.s	fa6,ft4,fa6,ft6
   15384:	00812627          	fsw	fs0,12(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15388:	10897353          	fmul.s	ft6,fs2,fs0
	return vec3(a[1] * b[2] - a[2] * b[1],
   1538c:	00412407          	flw	fs0,4(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15390:	09d5ffd3          	fsub.s	ft11,fa1,ft9
		(-(a[0] * b[2] - a[2] * b[0])),
   15394:	103c7dd3          	fmul.s	fs11,fs8,ft3
   15398:	107670d3          	fmul.s	ft1,fa2,ft7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1539c:	09c57553          	fsub.s	fa0,fa0,ft8
   153a0:	08fbf7d3          	fsub.s	fa5,fs7,fa5
   153a4:	0975f5d3          	fsub.s	fa1,fa1,fs7
		a[0] * b[1] - a[1] * b[0]);
   153a8:	10227153          	fmul.s	ft2,ft4,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   153ac:	10977bd3          	fmul.s	fs7,fa4,fs1
   153b0:	b0577747          	fmsub.s	fa4,fa4,ft5,fs6
   153b4:	1086fb53          	fmul.s	fs6,fa3,fs0
   153b8:	00812407          	flw	fs0,8(sp)
   153bc:	11567147          	fmsub.s	ft2,fa2,fs5,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   153c0:	310cf343          	fmadd.s	ft6,fs9,fa6,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   153c4:	d886f6c7          	fmsub.s	fa3,fa3,fs0,fs11
   153c8:	11f07dd3          	fmul.s	fs11,ft0,ft11
   153cc:	08a07047          	fmsub.s	ft0,ft0,fa0,ft1
   153d0:	b917f8c7          	fmsub.s	fa7,fa5,fa7,fs7
   153d4:	b035f1c7          	fmsub.s	ft3,fa1,ft3,fs6
		a[0] * b[1] - a[1] * b[0]);
   153d8:	1057f7d3          	fmul.s	fa5,fa5,ft5
	return vec3(a[1] * b[2] - a[2] * b[1],
   153dc:	d8727dc7          	fmsub.s	fs11,ft4,ft7,fs11
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   153e0:	10e97753          	fmul.s	fa4,fs2,fa4
		a[0] * b[1] - a[1] * b[0]);
   153e4:	1085f5d3          	fmul.s	fa1,fa1,fs0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   153e8:	10d976d3          	fmul.s	fa3,fs2,fa3
		a[0] * b[1] - a[1] * b[0]);
   153ec:	10a27253          	fmul.s	ft4,ft4,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   153f0:	10097053          	fmul.s	ft0,fs2,ft0
   153f4:	3029f343          	fmadd.s	ft6,fs3,ft2,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   153f8:	00412087          	flw	ft1,4(sp)
   153fc:	789a77c7          	fmsub.s	fa5,fs4,fs1,fa5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15400:	711cf743          	fmadd.s	fa4,fs9,fa7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   15404:	581c75c7          	fmsub.s	fa1,fs8,ft1,fa1
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15408:	683cf1c3          	fmadd.s	ft3,fs9,ft3,fa3
	return vec3(a[1] * b[2] - a[2] * b[1],
   1540c:	21f67647          	fmsub.s	fa2,fa2,ft11,ft4
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15410:	01bcfdc3          	fmadd.s	fs11,fs9,fs11,ft0
	if(gn_dot_d > 0.0f) bc = -bc;
   15414:	a06d17d3          	flt.s	a5,fs10,ft6
   15418:	70f9f7c3          	fmadd.s	fa5,fs3,fa5,fa4
   1541c:	18b9f1c3          	fmadd.s	ft3,fs3,fa1,ft3
   15420:	d8c9f643          	fmadd.s	fa2,fs3,fa2,fs11
   15424:	00078863          	beqz	a5,15434 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x334>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   15428:	20f797d3          	fneg.s	fa5,fa5
   1542c:	203191d3          	fneg.s	ft3,ft3
   15430:	20c61653          	fneg.s	fa2,fa2
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   15434:	a1a797d3          	flt.s	a5,fa5,fs10
   15438:	06079263          	bnez	a5,1549c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x39c>
   1543c:	a1a197d3          	flt.s	a5,ft3,fs10
   15440:	04079e63          	bnez	a5,1549c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x39c>
   15444:	a1a617d3          	flt.s	a5,fa2,fs10
   15448:	04079a63          	bnez	a5,1549c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x39c>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1544c:	00c12707          	flw	fa4,12(sp)
   15450:	10efffd3          	fmul.s	ft11,ft11,fa4
	if(t < ray.t_min || t > hit.t) return false;
   15454:	01012707          	flw	fa4,16(sp)
   15458:	f9057543          	fmadd.s	fa0,fa0,fa6,ft11
   1545c:	5023f3c3          	fmadd.s	ft7,ft7,ft2,fa0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   15460:	1863f3d3          	fdiv.s	ft7,ft7,ft6
	if(t < ray.t_min || t > hit.t) return false;
   15464:	a0e397d3          	flt.s	a5,ft7,fa4
   15468:	02079a63          	bnez	a5,1549c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x39c>
   1546c:	0004a707          	flw	fa4,0(s1)
   15470:	a07717d3          	flt.s	a5,fa4,ft7
   15474:	02079463          	bnez	a5,1549c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x39c>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   15478:	0037f753          	fadd.s	fa4,fa5,ft3
	hit.t = t ;
   1547c:	0074a027          	fsw	ft7,0(s1)
		hit.id = face_index;
   15480:	00e4a623          	sw	a4,12(s1)
		return true;
   15484:	00100513          	li	a0,1
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   15488:	00c77753          	fadd.s	fa4,fa4,fa2
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   1548c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   15490:	18e1f1d3          	fdiv.s	ft3,ft3,fa4
	e[0] = v[0];
   15494:	00f4a227          	fsw	fa5,4(s1)
	e[1] = v[1];
   15498:	0034a427          	fsw	ft3,8(s1)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   1549c:	00c60613          	add	a2,a2,12
   154a0:	0017079b          	addw	a5,a4,1
   154a4:	e0ef9ee3          	bne	t6,a4,152c0 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1c0>
   154a8:	01412b07          	flw	fs6,20(sp)
   154ac:	01812a87          	flw	fs5,24(sp)
   154b0:	01c12a07          	flw	fs4,28(sp)
	while(node_stack_size);
   154b4:	d8081ce3          	bnez	a6,1524c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x14c>
}
   154b8:	3d813083          	ld	ra,984(sp)
   154bc:	3d013403          	ld	s0,976(sp)
   154c0:	3c813483          	ld	s1,968(sp)
   154c4:	3c013903          	ld	s2,960(sp)
   154c8:	3b813983          	ld	s3,952(sp)
   154cc:	3b013a03          	ld	s4,944(sp)
   154d0:	3ac12407          	flw	fs0,940(sp)
   154d4:	3a812487          	flw	fs1,936(sp)
   154d8:	3a412907          	flw	fs2,932(sp)
   154dc:	3a012987          	flw	fs3,928(sp)
   154e0:	39c12a07          	flw	fs4,924(sp)
   154e4:	39812a87          	flw	fs5,920(sp)
   154e8:	39412b07          	flw	fs6,916(sp)
   154ec:	39012b87          	flw	fs7,912(sp)
   154f0:	38c12c07          	flw	fs8,908(sp)
   154f4:	38812c87          	flw	fs9,904(sp)
   154f8:	38412d07          	flw	fs10,900(sp)
   154fc:	38012d87          	flw	fs11,896(sp)
   15500:	3e010113          	add	sp,sp,992
   15504:	00008067          	ret
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   15508:	00ef8fb3          	add	t6,t6,a4
   1550c:	001f8e93          	add	t4,t6,1
   15510:	00571713          	sll	a4,a4,0x5
   15514:	005e9e93          	sll	t4,t4,0x5
   15518:	00c92087          	flw	ft1,12(s2)
      if (__b < __a)
   1551c:	01c92007          	flw	ft0,28(s2)
   15520:	00e98733          	add	a4,s3,a4
   15524:	01d98eb3          	add	t4,s3,t4
   15528:	00c0006f          	j	15534 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x434>
   1552c:	02070713          	add	a4,a4,32
   15530:	f8ee82e3          	beq	t4,a4,154b4 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x3b4>
		uint64_t r = ((uint64_t*)&src)[i];
   15534:	00073303          	ld	t1,0(a4)
   15538:	00873883          	ld	a7,8(a4)
   1553c:	01073603          	ld	a2,16(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15540:	00030793          	mv	a5,t1
   15544:	02035313          	srl	t1,t1,0x20
   15548:	f0030753          	fmv.w.x	fa4,t1
   1554c:	0208de13          	srl	t3,a7,0x20
   15550:	f00787d3          	fmv.w.x	fa5,a5
   15554:	09d77653          	fsub.s	fa2,fa4,ft9
   15558:	f00e0753          	fmv.w.x	fa4,t3
   1555c:	09c7f7d3          	fsub.s	fa5,fa5,ft8
		((uint64_t*)&dst)[i] = r;
   15560:	01873783          	ld	a5,24(a4)
   15564:	09c771d3          	fsub.s	ft3,fa4,ft8
   15568:	f0060753          	fmv.w.x	fa4,a2
   1556c:	02065613          	srl	a2,a2,0x20
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15570:	1167f7d3          	fmul.s	fa5,fa5,fs6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15574:	09d77153          	fsub.s	ft2,fa4,ft9
   15578:	f0088753          	fmv.w.x	fa4,a7
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1557c:	11567653          	fmul.s	fa2,fa2,fs5
   15580:	1161f1d3          	fmul.s	ft3,ft3,fs6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15584:	09e776d3          	fsub.s	fa3,fa4,ft10
   15588:	f0060753          	fmv.w.x	fa4,a2
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1558c:	11517153          	fmul.s	ft2,ft2,fs5
   15590:	00f43c23          	sd	a5,24(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15594:	09e775d3          	fsub.s	fa1,fa4,ft10
   15598:	28378753          	fmin.s	fa4,fa5,ft3
	if (tmin > tmax) return ray.t_max;//no hit || behind
   1559c:	283797d3          	fmax.s	fa5,fa5,ft3
   155a0:	28260253          	fmin.s	ft4,fa2,ft2
   155a4:	28261653          	fmax.s	fa2,fa2,ft2
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   155a8:	1146f6d3          	fmul.s	fa3,fa3,fs4
   155ac:	1145f5d3          	fmul.s	fa1,fa1,fs4
   155b0:	28c787d3          	fmin.s	fa5,fa5,fa2
   155b4:	28471753          	fmax.s	fa4,fa4,ft4
   155b8:	280787d3          	fmin.s	fa5,fa5,ft0
   155bc:	28b68653          	fmin.s	fa2,fa3,fa1
   155c0:	28171753          	fmax.s	fa4,fa4,ft1
   155c4:	28b696d3          	fmax.s	fa3,fa3,fa1
   155c8:	28c71753          	fmax.s	fa4,fa4,fa2
   155cc:	28d787d3          	fmin.s	fa5,fa5,fa3
   155d0:	a0e797d3          	flt.s	a5,fa5,fa4
   155d4:	00078463          	beqz	a5,155dc <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x4dc>
   155d8:	20000753          	fmv.s	fa4,ft0
				new_entry.data = node.data;
   155dc:	01842603          	lw	a2,24(s0)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   155e0:	a0a717d3          	flt.s	a5,fa4,fa0
				new_entry.data = node.data;
   155e4:	02c12623          	sw	a2,44(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   155e8:	f40782e3          	beqz	a5,1552c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x42c>
   155ec:	0018031b          	addw	t1,a6,1
	for(; j != min; --j)
   155f0:	06080263          	beqz	a6,15654 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x554>
   155f4:	fff8079b          	addw	a5,a6,-1
   155f8:	02081613          	sll	a2,a6,0x20
   155fc:	01d65813          	srl	a6,a2,0x1d
   15600:	02079613          	sll	a2,a5,0x20
   15604:	01d65793          	srl	a5,a2,0x1d
   15608:	00068e13          	mv	t3,a3
   1560c:	01068833          	add	a6,a3,a6
   15610:	00f687b3          	add	a5,a3,a5
   15614:	0180006f          	j	1562c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x52c>
		stack[j] = stack[j - 1];
   15618:	0007b603          	ld	a2,0(a5)
	for(; j != min; --j)
   1561c:	ff880813          	add	a6,a6,-8
		stack[j] = stack[j - 1];
   15620:	00c83423          	sd	a2,8(a6)
	for(; j != min; --j)
   15624:	02f68a63          	beq	a3,a5,15658 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x558>
   15628:	00058793          	mv	a5,a1
		if(stack[j - 1].t >= entry.t) break;
   1562c:	0007a787          	flw	fa5,0(a5)
		stack[j] = stack[j - 1];
   15630:	00080893          	mv	a7,a6
	for(; j != min; --j)
   15634:	ff878593          	add	a1,a5,-8
		if(stack[j - 1].t >= entry.t) break;
   15638:	a0f70653          	fle.s	a2,fa4,fa5
   1563c:	fc060ee3          	beqz	a2,15618 <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x518>
	stack[j] = entry;
   15640:	02e12427          	fsw	fa4,40(sp)
   15644:	02813783          	ld	a5,40(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   15648:	00030813          	mv	a6,t1
	stack[j] = entry;
   1564c:	00f8b023          	sd	a5,0(a7)
}
   15650:	eddff06f          	j	1552c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x42c>
   15654:	03010e13          	add	t3,sp,48
	stack[j] = entry;
   15658:	02e12427          	fsw	fa4,40(sp)
   1565c:	02813783          	ld	a5,40(sp)
   15660:	000e0893          	mv	a7,t3
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   15664:	00030813          	mv	a6,t1
	stack[j] = entry;
   15668:	00f8b023          	sd	a5,0(a7)
   1566c:	ec1ff06f          	j	1552c <_Z9intersectI12MeshPointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x42c>

0000000000015670 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit>:
inline bool intersect(const BVH::Node* blas, const T& mesh, const Ray& ray, Hit& hit)
   15670:	81010113          	add	sp,sp,-2032
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15674:	000197b7          	lui	a5,0x19
   15678:	9087a787          	flw	fa5,-1784(a5) # 18908 <__DATA_BEGIN__>
	inline float operator[](int i) const { return e[i]; }
   1567c:	01062707          	flw	fa4,16(a2)
   15680:	75a12a27          	fsw	fs10,1876(sp)
   15684:	01462d07          	flw	fs10,20(a2)
   15688:	75812e27          	fsw	fs8,1884(sp)
   1568c:	01862c07          	flw	fs8,24(a2)
   15690:	76812e27          	fsw	fs0,1916(sp)
   15694:	76912c27          	fsw	fs1,1912(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15698:	18e7f453          	fdiv.s	fs0,fa5,fa4
   1569c:	77212a27          	fsw	fs2,1908(sp)
   156a0:	7e113423          	sd	ra,2024(sp)
   156a4:	7e813023          	sd	s0,2016(sp)
   156a8:	7c913c23          	sd	s1,2008(sp)
   156ac:	7d213823          	sd	s2,2000(sp)
   156b0:	7b613823          	sd	s6,1968(sp)
   156b4:	79b13423          	sd	s11,1928(sp)
   156b8:	77512427          	fsw	fs5,1896(sp)
   156bc:	77712027          	fsw	fs7,1888(sp)
   156c0:	75912c27          	fsw	fs9,1880(sp)
   156c4:	7d313423          	sd	s3,1992(sp)
   156c8:	7d413023          	sd	s4,1984(sp)
   156cc:	7b513c23          	sd	s5,1976(sp)
   156d0:	7b713423          	sd	s7,1960(sp)
   156d4:	7b813023          	sd	s8,1952(sp)
   156d8:	79913c23          	sd	s9,1944(sp)
   156dc:	79a13823          	sd	s10,1936(sp)
   156e0:	77312827          	fsw	fs3,1904(sp)
   156e4:	77412627          	fsw	fs4,1900(sp)
   156e8:	19a7f4d3          	fdiv.s	fs1,fa5,fs10
   156ec:	77612227          	fsw	fs6,1892(sp)
   156f0:	75b12827          	fsw	fs11,1872(sp)
   156f4:	fa010113          	add	sp,sp,-96
   156f8:	77f10793          	add	a5,sp,1919
   156fc:	fe07f913          	and	s2,a5,-32
   15700:	00060d93          	mv	s11,a2
   15704:	00058793          	mv	a5,a1
	inline float operator[](int i) const { return e[i]; }
   15708:	08e12427          	fsw	fa4,136(sp)
   1570c:	00050593          	mv	a1,a0
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   15710:	04812827          	fsw	fs0,80(sp)
   15714:	00050413          	mv	s0,a0
   15718:	02000613          	li	a2,32
   1571c:	02090513          	add	a0,s2,32
   15720:	00078493          	mv	s1,a5
   15724:	00068b13          	mv	s6,a3
   15728:	1987f953          	fdiv.s	fs2,fa5,fs8
   1572c:	04912a27          	fsw	fs1,84(sp)
   15730:	05212c27          	fsw	fs2,88(sp)
   15734:	00002097          	auipc	ra,0x2
   15738:	b78080e7          	jalr	-1160(ra) # 172ac <memcpy>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1573c:	000197b7          	lui	a5,0x19
   15740:	9207a707          	flw	fa4,-1760(a5) # 18920 <__DATA_BEGIN__+0x18>
   15744:	000197b7          	lui	a5,0x19
   15748:	9247a687          	flw	fa3,-1756(a5) # 18924 <__DATA_BEGIN__+0x1c>
	inline float operator[](int i) const { return e[i]; }
   1574c:	000dac87          	flw	fs9,0(s11)
   15750:	004daa87          	flw	fs5,4(s11)
   15754:	008dab87          	flw	fs7,8(s11)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15758:	099777d3          	fsub.s	fa5,fa4,fs9
   1575c:	095775d3          	fsub.s	fa1,fa4,fs5
   15760:	0996f053          	fsub.s	ft0,fa3,fs9
   15764:	0956f553          	fsub.s	fa0,fa3,fs5
   15768:	0976f653          	fsub.s	fa2,fa3,fs7
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1576c:	1087f7d3          	fmul.s	fa5,fa5,fs0
   15770:	1095f5d3          	fmul.s	fa1,fa1,fs1
   15774:	10807053          	fmul.s	ft0,ft0,fs0
   15778:	10957553          	fmul.s	fa0,fa0,fs1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1577c:	09777753          	fsub.s	fa4,fa4,fs7
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15780:	11267653          	fmul.s	fa2,fa2,fs2
   15784:	00cda087          	flw	ft1,12(s11)
   15788:	280786d3          	fmin.s	fa3,fa5,ft0
   1578c:	28a58153          	fmin.s	ft2,fa1,fa0
	if (tmin > tmax) return ray.t_max;//no hit || behind
   15790:	280797d3          	fmax.s	fa5,fa5,ft0
   15794:	28a595d3          	fmax.s	fa1,fa1,fa0
   15798:	11277753          	fmul.s	fa4,fa4,fs2
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   1579c:	282696d3          	fmax.s	fa3,fa3,ft2
	if (tmin > tmax) return ray.t_max;//no hit || behind
   157a0:	28b787d3          	fmin.s	fa5,fa5,fa1
   157a4:	01cda507          	flw	fa0,28(s11)
   157a8:	281696d3          	fmax.s	fa3,fa3,ft1
   157ac:	28c705d3          	fmin.s	fa1,fa4,fa2
   157b0:	28a787d3          	fmin.s	fa5,fa5,fa0
   157b4:	28c71753          	fmax.s	fa4,fa4,fa2
   157b8:	28b696d3          	fmax.s	fa3,fa3,fa1
   157bc:	28e787d3          	fmin.s	fa5,fa5,fa4
   157c0:	a0d797d3          	flt.s	a5,fa5,fa3
   157c4:	00078463          	beqz	a5,157cc <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x15c>
   157c8:	20a506d3          	fmv.s	fa3,fa0
	node_stack[0].data = root_node.data;
   157cc:	03892783          	lw	a5,56(s2)
	e[0] *= v[0];
   157d0:	00019737          	lui	a4,0x19
   157d4:	90c72787          	flw	fa5,-1780(a4) # 1890c <__DATA_BEGIN__+0x4>
	uint32_t node_stack_size = 1u;
   157d8:	215a8b53          	fmv.s	fs6,fs5
   157dc:	218c0ad3          	fmv.s	fs5,fs8
   157e0:	21ad0c53          	fmv.s	fs8,fs10
   157e4:	217b8d53          	fmv.s	fs10,fs7
   157e8:	219c8bd3          	fmv.s	fs7,fs9
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   157ec:	00019737          	lui	a4,0x19
	node_stack[0].data = root_node.data;
   157f0:	46f12223          	sw	a5,1124(sp)
	uint32_t node_stack_size = 1u;
   157f4:	00100793          	li	a5,1
   157f8:	91872d87          	flw	fs11,-1768(a4) # 18918 <__DATA_BEGIN__+0x10>
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   157fc:	00019a37          	lui	s4,0x19
   15800:	00078713          	mv	a4,a5
   15804:	00019ab7          	lui	s5,0x19
	e[0] *= v[0];
   15808:	04f12627          	fsw	fa5,76(sp)
	node_stack[0].t = intersect(root_node.aabb, ray, inv_d);
   1580c:	46d12027          	fsw	fa3,1120(sp)
	bool found_hit = false;
   15810:	00000893          	li	a7,0
	uint32_t node_stack_size = 1u;
   15814:	00040793          	mv	a5,s0
   15818:	00048d13          	mv	s10,s1
   1581c:	000b0593          	mv	a1,s6
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15820:	fff7061b          	addw	a2,a4,-1
   15824:	02061693          	sll	a3,a2,0x20
   15828:	01d6d713          	srl	a4,a3,0x1d
   1582c:	6f070713          	add	a4,a4,1776
   15830:	0c010693          	add	a3,sp,192
   15834:	00d70733          	add	a4,a4,a3
   15838:	cb073683          	ld	a3,-848(a4)
		if(current_entry.t >= hit.t) return found_hit;
   1583c:	0005ac87          	flw	fs9,0(a1) # 3f800000 <__global_pointer$+0x3f7e6ef8>
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15840:	0006071b          	sext.w	a4,a2
		if(current_entry.t >= hit.t) return found_hit;
   15844:	f00687d3          	fmv.w.x	fa5,a3
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15848:	0cd13423          	sd	a3,200(sp)
		if(current_entry.t >= hit.t) return found_hit;
   1584c:	a0fc8653          	fle.s	a2,fs9,fa5
   15850:	00060463          	beqz	a2,15858 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1e8>
   15854:	0980106f          	j	168ec <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x127c>
		if(!current_entry.data.is_leaf)
   15858:	0cc12603          	lw	a2,204(sp)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   1585c:	0216d513          	srl	a0,a3,0x21
      if (__a < __b)
   15860:	00cda007          	flw	ft0,12(s11)
		if(!current_entry.data.is_leaf)
   15864:	00167613          	and	a2,a2,1
      if (__b < __a)
   15868:	01cda507          	flw	fa0,28(s11)
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   1586c:	0246d693          	srl	a3,a3,0x24
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   15870:	00757513          	and	a0,a0,7
		if(!current_entry.data.is_leaf)
   15874:	00061463          	bnez	a2,1587c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x20c>
   15878:	1080106f          	j	16980 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1310>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   1587c:	00d50533          	add	a0,a0,a3
	move_to_stack(header, tes_tree.headers[patch_index]);
   15880:	000d3303          	ld	t1,0(s10) # 3f800000 <__global_pointer$+0x3f7e6ef8>
   15884:	00150813          	add	a6,a0,1
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   15888:	028da587          	flw	fa1,40(s11)
   1588c:	00569513          	sll	a0,a3,0x5
	const CompactTri* triangles = &tes_tree.triangles[header.root_node_offset];
   15890:	018d3b03          	ld	s6,24(s10)
	const TesselationTree1::Node* nodes = &tes_tree.nodes[header.root_node_offset];
   15894:	008d3683          	ld	a3,8(s10)
   15898:	00581813          	sll	a6,a6,0x5
   1589c:	07512e27          	fsw	fs5,124(sp)
   158a0:	20a507d3          	fmv.s	fa5,fa0
   158a4:	216b0ad3          	fmv.s	fs5,fs6
   158a8:	20000753          	fmv.s	fa4,ft0
   158ac:	21ad0b53          	fmv.s	fs6,fs10
   158b0:	00a30433          	add	s0,t1,a0
   158b4:	01030533          	add	a0,t1,a6
   158b8:	0ae13423          	sd	a4,168(sp)
   158bc:	08c13023          	sd	a2,128(sp)
   158c0:	07812c27          	fsw	fs8,120(sp)
   158c4:	08b12627          	fsw	fa1,140(sp)
   158c8:	08d13823          	sd	a3,144(sp)
   158cc:	000b0813          	mv	a6,s6
   158d0:	00040713          	mv	a4,s0
   158d4:	08a13c23          	sd	a0,152(sp)
   158d8:	0b213823          	sd	s2,176(sp)
   158dc:	0b113023          	sd	a7,160(sp)
   158e0:	0af13c23          	sd	a5,184(sp)
		uint64_t r = ((uint64_t*)&src)[i];
   158e4:	01073f83          	ld	t6,16(a4)
   158e8:	09013783          	ld	a5,144(sp)
      if (__a < __b)
   158ec:	20e705d3          	fmv.s	fa1,fa4
   158f0:	020fdf13          	srl	t5,t6,0x20
   158f4:	005f1913          	sll	s2,t5,0x5
   158f8:	01278933          	add	s2,a5,s2
   158fc:	00093503          	ld	a0,0(s2)
   15900:	00893603          	ld	a2,8(s2)
   15904:	04e12e27          	fsw	fa4,92(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15908:	00050793          	mv	a5,a0
   1590c:	02055513          	srl	a0,a0,0x20
   15910:	f0050753          	fmv.w.x	fa4,a0
   15914:	02065393          	srl	t2,a2,0x20
   15918:	01093883          	ld	a7,16(s2)
   1591c:	095776d3          	fsub.s	fa3,fa4,fs5
   15920:	f0038753          	fmv.w.x	fa4,t2
      if (__b < __a)
   15924:	20f78553          	fmv.s	fa0,fa5
   15928:	f00787d3          	fmv.w.x	fa5,a5
   1592c:	09777153          	fsub.s	ft2,fa4,fs7
   15930:	f0088753          	fmv.w.x	fa4,a7
   15934:	0977f7d3          	fsub.s	fa5,fa5,fs7
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15938:	05412607          	flw	fa2,84(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1593c:	095770d3          	fsub.s	ft1,fa4,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15940:	05012707          	flw	fa4,80(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15944:	0208d893          	srl	a7,a7,0x20
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15948:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   1594c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   15950:	10c0f0d3          	fmul.s	ft1,ft1,fa2
   15954:	10e17153          	fmul.s	ft2,ft2,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15958:	f0088653          	fmv.w.x	fa2,a7
   1595c:	f0060753          	fmv.w.x	fa4,a2
   15960:	00873783          	ld	a5,8(a4)
   15964:	09667653          	fsub.s	fa2,fa2,fs6
   15968:	09677753          	fsub.s	fa4,fa4,fs6
   1596c:	281681d3          	fmin.s	ft3,fa3,ft1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   15970:	281696d3          	fmax.s	fa3,fa3,ft1
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15974:	05812087          	flw	ft1,88(sp)
   15978:	28278053          	fmin.s	ft0,fa5,ft2
   1597c:	282797d3          	fmax.s	fa5,fa5,ft2
   15980:	10167653          	fmul.s	fa2,fa2,ft1
   15984:	10177753          	fmul.s	fa4,fa4,ft1
   15988:	28301053          	fmax.s	ft0,ft0,ft3
   1598c:	28d787d3          	fmin.s	fa5,fa5,fa3
	float max_db_over_max_error = header.max_db * ray.rcp_max_error;
   15990:	0207d613          	srl	a2,a5,0x20
   15994:	28b016d3          	fmax.s	fa3,ft0,fa1
   15998:	28a787d3          	fmin.s	fa5,fa5,fa0
   1599c:	28c70053          	fmin.s	ft0,fa4,fa2
   159a0:	28c71753          	fmax.s	fa4,fa4,fa2
   159a4:	f0060653          	fmv.w.x	fa2,a2
   159a8:	280696d3          	fmax.s	fa3,fa3,ft0
   159ac:	28e787d3          	fmin.s	fa5,fa5,fa4
   159b0:	08c12707          	flw	fa4,140(sp)
   159b4:	00073503          	ld	a0,0(a4)
   159b8:	a0d798d3          	flt.s	a7,fa5,fa3
   159bc:	10c77753          	fmul.s	fa4,fa4,fa2
   159c0:	01873603          	ld	a2,24(a4)
   159c4:	01893e83          	ld	t4,24(s2)
   159c8:	04e12427          	fsw	fa4,72(sp)
   159cc:	00089463          	bnez	a7,159d4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x364>
	return tmin;
   159d0:	20d68553          	fmv.s	fa0,fa3
		if(lod == 0) tri_stack[lod].tri = Triangle(tes_tree.vertices[header.vi[0]], tes_tree.vertices[header.vi[1]], tes_tree.vertices[header.vi[2]]);
   159d4:	fff00893          	li	a7,-1
   159d8:	0208d893          	srl	a7,a7,0x20
   159dc:	01157bb3          	and	s7,a0,a7
   159e0:	0117f7b3          	and	a5,a5,a7
   159e4:	02055513          	srl	a0,a0,0x20
   159e8:	00179893          	sll	a7,a5,0x1
   159ec:	001b9993          	sll	s3,s7,0x1
   159f0:	00151393          	sll	t2,a0,0x1
   159f4:	00f887b3          	add	a5,a7,a5
	uint32_t hit_lod = ~0u;
   159f8:	219c8d53          	fmv.s	fs10,fs9
		if(lod == 0) tri_stack[lod].tri = Triangle(tes_tree.vertices[header.vi[0]], tes_tree.vertices[header.vi[1]], tes_tree.vertices[header.vi[2]]);
   159fc:	017989b3          	add	s3,s3,s7
	uint32_t node_stack_size = 1u;
   15a00:	08013883          	ld	a7,128(sp)
	uint32_t hit_lod = ~0u;
   15a04:	07812a07          	flw	fs4,120(sp)
   15a08:	07c12907          	flw	fs2,124(sp)
   15a0c:	08812c87          	flw	fs9,136(sp)
		if(lod == 0) tri_stack[lod].tri = Triangle(tes_tree.vertices[header.vi[0]], tes_tree.vertices[header.vi[1]], tes_tree.vertices[header.vi[2]]);
   15a10:	00a38533          	add	a0,t2,a0
   15a14:	00279793          	sll	a5,a5,0x2
   15a18:	00299393          	sll	t2,s3,0x2
   15a1c:	00251c13          	sll	s8,a0,0x2
	uint32_t hit_lod = ~0u;
   15a20:	00038313          	mv	t1,t2
	node_stack[0].t = intersect(root_node.aabb, ray, inv_d);
   15a24:	0ea12027          	fsw	fa0,224(sp)
	node_stack[0].node_index = 0;
   15a28:	0e012223          	sw	zero,228(sp)
	node_stack[0].dbs = root_node.dbs;
   15a2c:	0fd12423          	sw	t4,232(sp)
		if(lod == 0) tri_stack[lod].tri = Triangle(tes_tree.vertices[header.vi[0]], tes_tree.vertices[header.vi[1]], tes_tree.vertices[header.vi[2]]);
   15a30:	06f13023          	sd	a5,96(sp)
	uint32_t hit_lod = ~0u;
   15a34:	fff00513          	li	a0,-1
   15a38:	06e13423          	sd	a4,104(sp)
   15a3c:	06c13823          	sd	a2,112(sp)
   15a40:	000f0393          	mv	t2,t5
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15a44:	fff88e9b          	addw	t4,a7,-1
   15a48:	020e9793          	sll	a5,t4,0x20
   15a4c:	0207d793          	srl	a5,a5,0x20
   15a50:	00179713          	sll	a4,a5,0x1
   15a54:	00f70733          	add	a4,a4,a5
   15a58:	00271713          	sll	a4,a4,0x2
   15a5c:	6f070793          	add	a5,a4,1776
   15a60:	0c010713          	add	a4,sp,192
   15a64:	00e78733          	add	a4,a5,a4
   15a68:	93072783          	lw	a5,-1744(a4)
   15a6c:	93472603          	lw	a2,-1740(a4)
   15a70:	93872683          	lw	a3,-1736(a4)
		if(current_entry.t >= hit.t) continue;
   15a74:	f00787d3          	fmv.w.x	fa5,a5
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15a78:	0cf12823          	sw	a5,208(sp)
   15a7c:	0cc12a23          	sw	a2,212(sp)
		if(current_entry.t >= hit.t) continue;
   15a80:	a0fd0753          	fle.s	a4,fs10,fa5
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   15a84:	0cd12c23          	sw	a3,216(sp)
		if(current_entry.t >= hit.t) continue;
   15a88:	120710e3          	bnez	a4,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
		uint32_t node_index = current_entry.node_index;
   15a8c:	0d013683          	ld	a3,208(sp)
   15a90:	04c00293          	li	t0,76
class Triangle
   15a94:	20010713          	add	a4,sp,512
		uint32_t lod = current_entry.lod;
   15a98:	03a6d413          	srl	s0,a3,0x3a
   15a9c:	00f47f13          	and	t5,s0,15
   15aa0:	025f0f33          	mul	t5,t5,t0
		uint32_t node_index = current_entry.node_index;
   15aa4:	00669e13          	sll	t3,a3,0x6
		uint32_t lod = current_entry.lod;
   15aa8:	00f47413          	and	s0,s0,15
		uint32_t dbs = current_entry.dbs;
   15aac:	0d812783          	lw	a5,216(sp)
		uint32_t node_index = current_entry.node_index;
   15ab0:	026e5e13          	srl	t3,t3,0x26
		uint32_t tri_type = current_entry.tri_type;
   15ab4:	03e6d693          	srl	a3,a3,0x3e
   15ab8:	01e70733          	add	a4,a4,t5
		if(lod == 0) tri_stack[lod].tri = Triangle(tes_tree.vertices[header.vi[0]], tes_tree.vertices[header.vi[1]], tes_tree.vertices[header.vi[2]]);
   15abc:	3c0418e3          	bnez	s0,1668c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x101c>
   15ac0:	010d3683          	ld	a3,16(s10)
   15ac4:	06013483          	ld	s1,96(sp)
   15ac8:	00668633          	add	a2,a3,t1
   15acc:	018682b3          	add	t0,a3,s8
   15ad0:	009686b3          	add	a3,a3,s1
	inline float operator[](int i) const { return e[i]; }
   15ad4:	00462507          	flw	fa0,4(a2)
   15ad8:	0002a107          	flw	ft2,0(t0)
   15adc:	0006a087          	flw	ft1,0(a3)
	e[0] = v[0];
   15ae0:	00062007          	flw	ft0,0(a2)
	inline float operator[](int i) const { return e[i]; }
   15ae4:	00862587          	flw	fa1,8(a2)
   15ae8:	0042a607          	flw	fa2,4(t0)
   15aec:	0082a687          	flw	fa3,8(t0)
   15af0:	0046a707          	flw	fa4,4(a3)
   15af4:	0086a787          	flw	fa5,8(a3)
	e[0] = v[0];
   15af8:	20212627          	fsw	ft2,524(sp)
   15afc:	20112c27          	fsw	ft1,536(sp)
   15b00:	20012027          	fsw	ft0,512(sp)
	e[1] = v[1];
   15b04:	20a12227          	fsw	fa0,516(sp)
	e[2] = v[2];
   15b08:	20b12427          	fsw	fa1,520(sp)
	e[1] = v[1];
   15b0c:	20c12827          	fsw	fa2,528(sp)
	e[2] = v[2];
   15b10:	20d12a27          	fsw	fa3,532(sp)
	e[1] = v[1];
   15b14:	20e12e27          	fsw	fa4,540(sp)
	e[2] = v[2];
   15b18:	22f12027          	fsw	fa5,544(sp)
	inline float operator[](int i) const { return e[i]; }
   15b1c:	00072887          	flw	fa7,0(a4)
   15b20:	00472807          	flw	fa6,4(a4)
   15b24:	00872307          	flw	ft6,8(a4)
   15b28:	00c72207          	flw	ft4,12(a4)
   15b2c:	01072507          	flw	fa0,16(a4)
   15b30:	01472007          	flw	ft0,20(a4)
   15b34:	01872187          	flw	ft3,24(a4)
   15b38:	01c72107          	flw	ft2,28(a4)
   15b3c:	02072087          	flw	ft1,32(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15b40:	095877d3          	fsub.s	fa5,fa6,fs5
   15b44:	09517753          	fsub.s	fa4,ft2,fs5
   15b48:	09557453          	fsub.s	fs0,fa0,fs5
   15b4c:	097276d3          	fsub.s	fa3,ft4,fs7
   15b50:	0971f653          	fsub.s	fa2,ft3,fs7
   15b54:	0978fc53          	fsub.s	fs8,fa7,fs7
   15b58:	00f12c27          	fsw	fa5,24(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15b5c:	108a72d3          	fmul.s	ft5,fs4,fs0
   15b60:	10fa77d3          	fmul.s	fa5,fs4,fa5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15b64:	00e12a27          	fsw	fa4,20(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15b68:	10ea7753          	fmul.s	fa4,fs4,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15b6c:	09637fd3          	fsub.s	ft11,ft6,fs6
   15b70:	28dcf2c3          	fmadd.s	ft5,fs9,fa3,ft5
   15b74:	798cf7c3          	fmadd.s	fa5,fs9,fs8,fa5
   15b78:	09607f53          	fsub.s	ft10,ft0,fs6
   15b7c:	70ccf743          	fmadd.s	fa4,fs9,fa2,fa4
   15b80:	0960f4d3          	fsub.s	fs1,ft1,fs6
	glm::vec3 fdbs((float)(qdb >> 00 & 0x3ff), (float)(qdb >> 10 & 0x3ff), (float)(qdb >> 20 & 0x3ff));
   15b84:	00a7d61b          	srlw	a2,a5,0xa
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   15b88:	79f977c3          	fmadd.s	fa5,fs2,ft11,fa5
   15b8c:	29e972c3          	fmadd.s	ft5,fs2,ft10,ft5
   15b90:	0147d69b          	srlw	a3,a5,0x14
   15b94:	70997743          	fmadd.s	fa4,fs2,fs1,fa4
   15b98:	3ff7f793          	and	a5,a5,1023
   15b9c:	3ff67613          	and	a2,a2,1023
   15ba0:	3ff6f693          	and	a3,a3,1023
	glm::vec3 r = mdlen * ray.drdt + ray.radius;
   15ba4:	020dae87          	flw	ft9,32(s11)
   15ba8:	024dae07          	flw	ft8,36(s11)
   15bac:	28e783d3          	fmin.s	ft7,fa5,fa4
	glm::vec3 fdbs((float)(qdb >> 00 & 0x3ff), (float)(qdb >> 10 & 0x3ff), (float)(qdb >> 20 & 0x3ff));
   15bb0:	d007f5d3          	fcvt.s.w	fa1,a5
   15bb4:	285787d3          	fmin.s	fa5,fa5,ft5
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   15bb8:	28e28753          	fmin.s	fa4,ft5,fa4
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15bbc:	00d12027          	fsw	fa3,0(sp)
	e[0] *= v[0];
   15bc0:	04c12287          	flw	ft5,76(sp)
   15bc4:	d006f6d3          	fcvt.s.w	fa3,a3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15bc8:	00c12427          	fsw	fa2,8(sp)
   15bcc:	d0067653          	fcvt.s.w	fa2,a2
	e[0] *= v[0];
   15bd0:	1055f5d3          	fmul.s	fa1,fa1,ft5
	e[2] *= v[2];
   15bd4:	1056f6d3          	fmul.s	fa3,fa3,ft5
	e[1] *= v[1];
   15bd8:	10567653          	fmul.s	fa2,fa2,ft5
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   15bdc:	e0eef743          	fmadd.s	fa4,ft9,fa4,ft8
   15be0:	e07ef3c3          	fmadd.s	ft7,ft9,ft7,ft8
   15be4:	e0fef7c3          	fmadd.s	fa5,ft9,fa5,ft8
	asm volatile("frcp.s %0,%1\n\t" 
   15be8:	60077753          	frcp.s	fa4,fa4
   15bec:	6003f3d3          	frcp.s	ft7,ft7
   15bf0:	6007f7d3          	frcp.s	fa5,fa5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15bf4:	10b5f5d3          	fmul.s	fa1,fa1,fa1
   15bf8:	04812e07          	flw	ft8,72(sp)
   15bfc:	10d6f6d3          	fmul.s	fa3,fa3,fa3
   15c00:	10c67653          	fmul.s	fa2,fa2,fa2
      if (__a < __b)
   15c04:	000196b7          	lui	a3,0x19
   15c08:	11c5f5d3          	fmul.s	fa1,fa1,ft8
   15c0c:	f00002d3          	fmv.w.x	ft5,zero
   15c10:	11c6f6d3          	fmul.s	fa3,fa3,ft8
   15c14:	11c67653          	fmul.s	fa2,fa2,ft8
   15c18:	10e5f5d3          	fmul.s	fa1,fa1,fa4
   15c1c:	10f6f6d3          	fmul.s	fa3,fa3,fa5
   15c20:	9086a787          	flw	fa5,-1784(a3) # 18908 <__DATA_BEGIN__>
   15c24:	10767653          	fmul.s	fa2,fa2,ft7
   15c28:	a0f597d3          	flt.s	a5,fa1,fa5
   15c2c:	00079663          	bnez	a5,15c38 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x5c8>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15c30:	08f5f2d3          	fsub.s	ft5,fa1,fa5
   15c34:	28f282d3          	fmin.s	ft5,ft5,fa5
   15c38:	000196b7          	lui	a3,0x19
   15c3c:	9086a787          	flw	fa5,-1784(a3) # 18908 <__DATA_BEGIN__>
   15c40:	f0000753          	fmv.w.x	fa4,zero
   15c44:	a0f617d3          	flt.s	a5,fa2,fa5
   15c48:	00079663          	bnez	a5,15c54 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x5e4>
   15c4c:	08f67753          	fsub.s	fa4,fa2,fa5
   15c50:	28f70753          	fmin.s	fa4,fa4,fa5
   15c54:	000196b7          	lui	a3,0x19
   15c58:	9086a787          	flw	fa5,-1784(a3) # 18908 <__DATA_BEGIN__>
   15c5c:	f0000653          	fmv.w.x	fa2,zero
   15c60:	a0f697d3          	flt.s	a5,fa3,fa5
   15c64:	00079663          	bnez	a5,15c70 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x600>
   15c68:	08f6f653          	fsub.s	fa2,fa3,fa5
   15c6c:	28f60653          	fmin.s	fa2,fa2,fa5
		if(edge_states[0] <= 0.0f && edge_states[1] <= 0.0f && edge_states[2] <= 0.0f)
   15c70:	f00007d3          	fmv.w.x	fa5,zero
   15c74:	a0f287d3          	fle.s	a5,ft5,fa5
   15c78:	00078a63          	beqz	a5,15c8c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x61c>
   15c7c:	a0f707d3          	fle.s	a5,fa4,fa5
   15c80:	00078663          	beqz	a5,15c8c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x61c>
   15c84:	a0f607d3          	fle.s	a5,fa2,fa5
   15c88:	5a079e63          	bnez	a5,16244 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xbd4>
		uint32_t absoulte_node_index = lod_node_offset[lod] + node_index;
   15c8c:	000174b7          	lui	s1,0x17
   15c90:	45048493          	add	s1,s1,1104 # 17450 <_ZL15lod_node_offset>
   15c94:	00241793          	sll	a5,s0,0x2
   15c98:	00f487b3          	add	a5,s1,a5
   15c9c:	0007a783          	lw	a5,0(a5)
   15ca0:	02041b13          	sll	s6,s0,0x20
   15ca4:	020b5b13          	srl	s6,s6,0x20
   15ca8:	01c787bb          	addw	a5,a5,t3
		move_to_stack(new_tri, triangles[absoulte_node_index]);
   15cac:	02079793          	sll	a5,a5,0x20
   15cb0:	0207d793          	srl	a5,a5,0x20
   15cb4:	007787b3          	add	a5,a5,t2
   15cb8:	00579793          	sll	a5,a5,0x5
   15cbc:	00f807b3          	add	a5,a6,a5
   15cc0:	0007b603          	ld	a2,0(a5)
   15cc4:	0087b683          	ld	a3,8(a5)
   15cc8:	0107b983          	ld	s3,16(a5)
	float f0 = u24_to_f32(dw0 & 0xffffff);
   15ccc:	0006029b          	sext.w	t0,a2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15cd0:	0172db93          	srl	s7,t0,0x17
   15cd4:	001bfb93          	and	s7,s7,1
		uint64_t r = ((uint64_t*)&src)[i];
   15cd8:	0187b783          	ld	a5,24(a5)
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15cdc:	240b94e3          	bnez	s7,16724 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x10b4>
   15ce0:	02829293          	sll	t0,t0,0x28
   15ce4:	0282d293          	srl	t0,t0,0x28
   15ce8:	3f800bb7          	lui	s7,0x3f800
	return *((float*)&u);
   15cec:	0172ebb3          	or	s7,t0,s7
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15cf0:	910a2687          	flw	fa3,-1776(s4) # 18910 <__DATA_BEGIN__+0x8>
   15cf4:	914aa787          	flw	fa5,-1772(s5) # 18914 <__DATA_BEGIN__+0xc>
   15cf8:	f00b85d3          	fmv.w.x	fa1,s7
   15cfc:	78d5f3c3          	fmadd.s	ft7,fa1,fa3,fa5
	float f1 = u24_to_f32((dw0 >> 24) & 0xffffff);
   15d00:	01865293          	srl	t0,a2,0x18
   15d04:	0002829b          	sext.w	t0,t0
   15d08:	0172db93          	srl	s7,t0,0x17
   15d0c:	001bfb93          	and	s7,s7,1
   15d10:	200b94e3          	bnez	s7,16718 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x10a8>
   15d14:	02829293          	sll	t0,t0,0x28
   15d18:	0282d293          	srl	t0,t0,0x28
   15d1c:	3f800bb7          	lui	s7,0x3f800
	return *((float*)&u);
   15d20:	0172ebb3          	or	s7,t0,s7
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15d24:	910a2687          	flw	fa3,-1776(s4)
   15d28:	914aa787          	flw	fa5,-1772(s5)
   15d2c:	f00b85d3          	fmv.w.x	fa1,s7
   15d30:	78d5f5c3          	fmadd.s	fa1,fa1,fa3,fa5
	float f2 = u24_to_f32(((dw0 >> 48) | (dw1 << 16)) & 0xffffff);
   15d34:	0106929b          	sllw	t0,a3,0x10
   15d38:	03065613          	srl	a2,a2,0x30
   15d3c:	00566633          	or	a2,a2,t0
   15d40:	0006061b          	sext.w	a2,a2
   15d44:	01765293          	srl	t0,a2,0x17
   15d48:	0012f293          	and	t0,t0,1
   15d4c:	1c0290e3          	bnez	t0,1670c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x109c>
   15d50:	02861613          	sll	a2,a2,0x28
   15d54:	02865613          	srl	a2,a2,0x28
   15d58:	3f8002b7          	lui	t0,0x3f800
	return *((float*)&u);
   15d5c:	00566633          	or	a2,a2,t0
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15d60:	910a2687          	flw	fa3,-1776(s4)
   15d64:	914aa787          	flw	fa5,-1772(s5)
   15d68:	f0060e53          	fmv.w.x	ft8,a2
   15d6c:	78de77c3          	fmadd.s	fa5,ft8,fa3,fa5
	float f3 = u24_to_f32((dw1 >> 8) & 0xffffff);
   15d70:	0086d613          	srl	a2,a3,0x8
   15d74:	0006061b          	sext.w	a2,a2
   15d78:	01765293          	srl	t0,a2,0x17
   15d7c:	0012f293          	and	t0,t0,1
   15d80:	180290e3          	bnez	t0,16700 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1090>
   15d84:	02861613          	sll	a2,a2,0x28
   15d88:	02865613          	srl	a2,a2,0x28
   15d8c:	3f8002b7          	lui	t0,0x3f800
	return *((float*)&u);
   15d90:	00566633          	or	a2,a2,t0
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15d94:	910a2e07          	flw	ft8,-1776(s4)
   15d98:	914aa687          	flw	fa3,-1772(s5)
   15d9c:	f0060ed3          	fmv.w.x	ft9,a2
   15da0:	69cef6c3          	fmadd.s	fa3,ft9,ft8,fa3
	float f4 = u24_to_f32((dw1 >> 32) & 0xffffff);
   15da4:	4206d613          	sra	a2,a3,0x20
   15da8:	01765293          	srl	t0,a2,0x17
   15dac:	00019bb7          	lui	s7,0x19
   15db0:	0012f293          	and	t0,t0,1
   15db4:	908bae07          	flw	ft8,-1784(s7) # 18908 <__DATA_BEGIN__>
   15db8:	02029263          	bnez	t0,15ddc <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x76c>
   15dbc:	02861613          	sll	a2,a2,0x28
   15dc0:	02865613          	srl	a2,a2,0x28
   15dc4:	3f8002b7          	lui	t0,0x3f800
	return *((float*)&u);
   15dc8:	00566633          	or	a2,a2,t0
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15dcc:	910a2e07          	flw	ft8,-1776(s4)
   15dd0:	914aae87          	flw	ft9,-1772(s5)
   15dd4:	f0060f53          	fmv.w.x	ft10,a2
   15dd8:	e9cf7e43          	fmadd.s	ft8,ft10,ft8,ft9
	float f5 = u24_to_f32(((dw1 >> 56) | (dw2 << 8)) & 0xffffff);
   15ddc:	0089961b          	sllw	a2,s3,0x8
   15de0:	0386d693          	srl	a3,a3,0x38
   15de4:	00c6e6b3          	or	a3,a3,a2
   15de8:	0006869b          	sext.w	a3,a3
   15dec:	0176d613          	srl	a2,a3,0x17
   15df0:	000192b7          	lui	t0,0x19
   15df4:	00167613          	and	a2,a2,1
   15df8:	9082a407          	flw	fs0,-1784(t0) # 18908 <__DATA_BEGIN__>
   15dfc:	02061663          	bnez	a2,15e28 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x7b8>
   15e00:	02869693          	sll	a3,a3,0x28
   15e04:	3f800637          	lui	a2,0x3f800
   15e08:	0286d693          	srl	a3,a3,0x28
	return *((float*)&u);
   15e0c:	00c6e6b3          	or	a3,a3,a2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15e10:	000192b7          	lui	t0,0x19
   15e14:	00019637          	lui	a2,0x19
   15e18:	91062e87          	flw	ft9,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   15e1c:	f0068f53          	fmv.w.x	ft10,a3
   15e20:	9142af87          	flw	ft11,-1772(t0) # 18914 <__DATA_BEGIN__+0xc>
   15e24:	f9eef443          	fmadd.s	fs0,ft9,ft10,ft11
	float f6 = u24_to_f32((dw2 >> 16) & 0xffffff);
   15e28:	0109d693          	srl	a3,s3,0x10
   15e2c:	0006869b          	sext.w	a3,a3
   15e30:	0176d613          	srl	a2,a3,0x17
   15e34:	000192b7          	lui	t0,0x19
   15e38:	00167613          	and	a2,a2,1
   15e3c:	9082af87          	flw	ft11,-1784(t0) # 18908 <__DATA_BEGIN__>
   15e40:	02061663          	bnez	a2,15e6c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x7fc>
   15e44:	02869693          	sll	a3,a3,0x28
   15e48:	3f800637          	lui	a2,0x3f800
   15e4c:	0286d693          	srl	a3,a3,0x28
	return *((float*)&u);
   15e50:	00c6e6b3          	or	a3,a3,a2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15e54:	000192b7          	lui	t0,0x19
   15e58:	00019637          	lui	a2,0x19
   15e5c:	91062e87          	flw	ft9,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   15e60:	f0068f53          	fmv.w.x	ft10,a3
   15e64:	9142af87          	flw	ft11,-1772(t0) # 18914 <__DATA_BEGIN__+0xc>
   15e68:	f9eeffc3          	fmadd.s	ft11,ft9,ft10,ft11
   15e6c:	000196b7          	lui	a3,0x19
   15e70:	9086af07          	flw	ft10,-1784(a3) # 18908 <__DATA_BEGIN__>
	float f7 = u24_to_f32((dw2 >> 40) & 0xffffff);
   15e74:	0289d693          	srl	a3,s3,0x28
   15e78:	0209c263          	bltz	s3,15e9c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x82c>
   15e7c:	3f800637          	lui	a2,0x3f800
	return *((float*)&u);
   15e80:	00c6e6b3          	or	a3,a3,a2
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15e84:	000192b7          	lui	t0,0x19
   15e88:	00019637          	lui	a2,0x19
   15e8c:	91062e87          	flw	ft9,-1776(a2) # 18910 <__DATA_BEGIN__+0x8>
   15e90:	f0068f53          	fmv.w.x	ft10,a3
   15e94:	9142a487          	flw	fs1,-1772(t0) # 18914 <__DATA_BEGIN__+0xc>
   15e98:	49eeff43          	fmadd.s	ft10,ft9,ft10,fs1
	float f8 = u24_to_f32(dw3 & 0xffffff);
   15e9c:	0007879b          	sext.w	a5,a5
   15ea0:	0177d693          	srl	a3,a5,0x17
   15ea4:	00019637          	lui	a2,0x19
   15ea8:	0016f693          	and	a3,a3,1
   15eac:	90862e87          	flw	ft9,-1784(a2) # 18908 <__DATA_BEGIN__>
   15eb0:	02069663          	bnez	a3,15edc <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x86c>
   15eb4:	02879793          	sll	a5,a5,0x28
   15eb8:	3f8006b7          	lui	a3,0x3f800
   15ebc:	0287d793          	srl	a5,a5,0x28
	return *((float*)&u);
   15ec0:	00d7e7b3          	or	a5,a5,a3
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   15ec4:	00019637          	lui	a2,0x19
   15ec8:	000196b7          	lui	a3,0x19
   15ecc:	9106ae87          	flw	ft9,-1776(a3) # 18910 <__DATA_BEGIN__+0x8>
   15ed0:	f00784d3          	fmv.w.x	fs1,a5
   15ed4:	91462987          	flw	fs3,-1772(a2) # 18914 <__DATA_BEGIN__+0xc>
   15ed8:	989efec3          	fmadd.s	ft9,ft9,fs1,fs3
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   15edc:	0041fc53          	fadd.s	fs8,ft3,ft4
   15ee0:	00a179d3          	fadd.s	fs3,ft2,fa0
   15ee4:	001074d3          	fadd.s	fs1,ft0,ft1
   15ee8:	0111f1d3          	fadd.s	ft3,ft3,fa7
   15eec:	001370d3          	fadd.s	ft1,ft6,ft1
   15ef0:	00607053          	fadd.s	ft0,ft0,ft6
   15ef4:	01017153          	fadd.s	ft2,ft2,fa6
   15ef8:	0048f253          	fadd.s	ft4,fa7,ft4
   15efc:	00a87553          	fadd.s	fa0,fa6,fa0
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   15f00:	69b1f6cb          	fnmsub.s	fa3,ft3,fs11,fa3
   15f04:	41b0f44b          	fnmsub.s	fs0,ft1,fs11,fs0
   15f08:	e1b17e4b          	fnmsub.s	ft8,ft2,fs11,ft8
   15f0c:	e9b07ecb          	fnmsub.s	ft9,ft0,fs11,ft9
   15f10:	f1b57f4b          	fnmsub.s	ft10,fa0,fs11,ft10
   15f14:	39bc73cb          	fnmsub.s	ft7,fs8,fs11,ft7
   15f18:	59b9f5cb          	fnmsub.s	fa1,fs3,fs11,fa1
   15f1c:	79b4f7cb          	fnmsub.s	fa5,fs1,fs11,fa5
   15f20:	f9b27fcb          	fnmsub.s	ft11,ft4,fs11,ft11
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   15f24:	10ee7e53          	fmul.s	ft8,ft8,fa4
   15f28:	1053f3d3          	fmul.s	ft7,ft7,ft5
   15f2c:	1055f5d3          	fmul.s	fa1,fa1,ft5
   15f30:	1057f7d3          	fmul.s	fa5,fa5,ft5
   15f34:	10e47453          	fmul.s	fs0,fs0,fa4
   15f38:	10e6f6d3          	fmul.s	fa3,fa3,fa4
   15f3c:	10cf7f53          	fmul.s	ft10,ft10,fa2
   15f40:	10cefed3          	fmul.s	ft9,ft9,fa2
   15f44:	10cfffd3          	fmul.s	ft11,ft11,fa2
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   15f48:	39bc7343          	fmadd.s	ft6,fs8,fs11,ft7
   15f4c:	69b1f6c3          	fmadd.s	fa3,ft3,fs11,fa3
   15f50:	59b9f5c3          	fmadd.s	fa1,fs3,fs11,fa1
   15f54:	79b4f7c3          	fmadd.s	fa5,fs1,fs11,fa5
   15f58:	e1b17143          	fmadd.s	ft2,ft2,fs11,ft8
   15f5c:	41b0f0c3          	fmadd.s	ft1,ft1,fs11,fs0
   15f60:	f9b271c3          	fmadd.s	ft3,ft4,fs11,ft11
   15f64:	f1b57543          	fmadd.s	fa0,fa0,fs11,ft10
   15f68:	e9b07043          	fmadd.s	ft0,ft0,fs11,ft9
   15f6c:	024f0f13          	add	t5,t5,36 # 3f800024 <__global_pointer$+0x3f7e6f1c>
   15f70:	20010793          	add	a5,sp,512
   15f74:	01e787b3          	add	a5,a5,t5
	e[0] = v[0];
   15f78:	0067a027          	fsw	ft6,0(a5)
	e[1] = v[1];
   15f7c:	00b7a227          	fsw	fa1,4(a5)
	e[2] = v[2];
   15f80:	00f7a427          	fsw	fa5,8(a5)
	e[0] = v[0];
   15f84:	00d7a627          	fsw	fa3,12(a5)
	e[1] = v[1];
   15f88:	0027a827          	fsw	ft2,16(a5)
	e[2] = v[2];
   15f8c:	0017aa27          	fsw	ft1,20(a5)
	e[0] = v[0];
   15f90:	0037ac27          	fsw	ft3,24(a5)
	e[1] = v[1];
   15f94:	00a7ae27          	fsw	fa0,28(a5)
	e[2] = v[2];
   15f98:	0207a027          	fsw	ft0,32(a5)
	return vec3(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
   15f9c:	02612e27          	fsw	ft6,60(sp)
   15fa0:	04b12027          	fsw	fa1,64(sp)
   15fa4:	04f12227          	fsw	fa5,68(sp)
   15fa8:	02d12827          	fsw	fa3,48(sp)
   15fac:	02212a27          	fsw	ft2,52(sp)
   15fb0:	02112c27          	fsw	ft1,56(sp)
   15fb4:	00312a27          	fsw	ft3,20(sp)
   15fb8:	00a12c27          	fsw	fa0,24(sp)
   15fbc:	00012e27          	fsw	ft0,28(sp)
		uint32_t next_level = lod + 1;
   15fc0:	00140f13          	add	t5,s0,1
		if((next_level) == header.last_lod) //leaf node
   15fc4:	000f869b          	sext.w	a3,t6
		uint32_t first_child_index = node_index << 2; //compute first child idnex
   15fc8:	002e129b          	sllw	t0,t3,0x2
		uint32_t next_level = lod + 1;
   15fcc:	0014079b          	addw	a5,s0,1
		uint32_t first_child_index = node_index << 2; //compute first child idnex
   15fd0:	002e1e13          	sll	t3,t3,0x2
		if((next_level) == header.last_lod) //leaf node
   15fd4:	4adf0663          	beq	t5,a3,16480 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xe10>
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   15fd8:	00019637          	lui	a2,0x19
   15fdc:	90862787          	flw	fa5,-1784(a2) # 18908 <__DATA_BEGIN__>
   15fe0:	00100993          	li	s3,1
   15fe4:	a0f296d3          	flt.s	a3,ft5,fa5
   15fe8:	04069063          	bnez	a3,16028 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x9b8>
   15fec:	a0f716d3          	flt.s	a3,fa4,fa5
   15ff0:	02069c63          	bnez	a3,16028 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x9b8>
   15ff4:	a0f616d3          	flt.s	a3,fa2,fa5
   15ff8:	02069863          	bnez	a3,16028 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x9b8>
   15ffc:	00000993          	li	s3,0
   16000:	02040463          	beqz	s0,16028 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x9b8>
   16004:	fff4069b          	addw	a3,s0,-1
   16008:	02069693          	sll	a3,a3,0x20
   1600c:	04c00613          	li	a2,76
   16010:	0206d693          	srl	a3,a3,0x20
   16014:	02c686b3          	mul	a3,a3,a2
   16018:	0c010613          	add	a2,sp,192
   1601c:	6f068693          	add	a3,a3,1776
   16020:	00c686b3          	add	a3,a3,a2
   16024:	a986c983          	lbu	s3,-1384(a3)
   16028:	04c00693          	li	a3,76
   1602c:	02db06b3          	mul	a3,s6,a3
			uint32_t absolute_first_child_index = lod_node_offset[next_level] + first_child_index;
   16030:	02079793          	sll	a5,a5,0x20
   16034:	01e7d793          	srl	a5,a5,0x1e
   16038:	00f484b3          	add	s1,s1,a5
   1603c:	0004a783          	lw	a5,0(s1)
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   16040:	0c010613          	add	a2,sp,192
	stack[j] = entry;
   16044:	040004b7          	lui	s1,0x4000
   16048:	01af1f1b          	sllw	t5,t5,0x1a
   1604c:	fff48493          	add	s1,s1,-1 # 3ffffff <__global_pointer$+0x3fe6ef7>
   16050:	00cda087          	flw	ft1,12(s11)
   16054:	6f068693          	add	a3,a3,1776
   16058:	00c686b3          	add	a3,a3,a2
      if (__b < __a)
   1605c:	01cda007          	flw	ft0,28(s11)
   16060:	3c000637          	lui	a2,0x3c000
			for(uint32_t i = 0; i < 4; ++i)
   16064:	05012607          	flw	fa2,80(sp)
   16068:	05412587          	flw	fa1,84(sp)
   1606c:	05812507          	flw	fa0,88(sp)
   16070:	00cf7f33          	and	t5,t5,a2
   16074:	009e7e33          	and	t3,t3,s1
			tri_stack[lod].child_transformed = (edge_states[0] < 1.0f) || (edge_states[1] < 1.0f) || (edge_states[2] < 1.0f) || ((lod != 0) && tri_stack[lod - 1].child_transformed);
   16078:	a9368c23          	sb	s3,-1384(a3)
			uint32_t absolute_first_child_index = lod_node_offset[next_level] + first_child_index;
   1607c:	00f282bb          	addw	t0,t0,a5
			for(uint32_t i = 0; i < 4; ++i)
   16080:	00a13423          	sd	a0,8(sp)
   16084:	02b13023          	sd	a1,32(sp)
   16088:	02613423          	sd	t1,40(sp)
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   1608c:	000e8793          	mv	a5,t4
   16090:	00000693          	li	a3,0
			for(uint32_t i = 0; i < 4; ++i)
   16094:	00400b93          	li	s7,4
   16098:	00038b13          	mv	s6,t2
   1609c:	01013023          	sd	a6,0(sp)
   160a0:	000e8593          	mv	a1,t4
   160a4:	000f0513          	mv	a0,t5
   160a8:	000e0313          	mv	t1,t3
				move_to_stack(node, nodes[absolute_first_child_index + i]);
   160ac:	0056843b          	addw	s0,a3,t0
   160b0:	02041613          	sll	a2,s0,0x20
   160b4:	01b65413          	srl	s0,a2,0x1b
		uint64_t r = ((uint64_t*)&src)[i];
   160b8:	00890433          	add	s0,s2,s0
   160bc:	00043e03          	ld	t3,0(s0)
   160c0:	00843803          	ld	a6,8(s0)
   160c4:	01043603          	ld	a2,16(s0)
	for(uint i = 0; i < sizeof(T) / sizeof(uint64_t); ++i)
   160c8:	000e0393          	mv	t2,t3
   160cc:	00080f13          	mv	t5,a6
   160d0:	00060e93          	mv	t4,a2
   160d4:	020e5e13          	srl	t3,t3,0x20
   160d8:	02085813          	srl	a6,a6,0x20
   160dc:	02065613          	srl	a2,a2,0x20
		uint64_t r = ((uint64_t*)&src)[i];
   160e0:	01843403          	ld	s0,24(s0)
				if(tri_stack[lod].child_transformed)
   160e4:	f00387d3          	fmv.w.x	fa5,t2
   160e8:	f00e0153          	fmv.w.x	ft2,t3
   160ec:	f00f06d3          	fmv.w.x	fa3,t5
   160f0:	f00802d3          	fmv.w.x	ft5,a6
   160f4:	f00e8253          	fmv.w.x	ft4,t4
   160f8:	f00601d3          	fmv.w.x	ft3,a2
   160fc:	2e099c63          	bnez	s3,163f4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd84>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16100:	0977f7d3          	fsub.s	fa5,fa5,fs7
   16104:	09517153          	fsub.s	ft2,ft2,fs5
   16108:	0972f2d3          	fsub.s	ft5,ft5,fs7
   1610c:	09527253          	fsub.s	ft4,ft4,fs5
   16110:	0966f6d3          	fsub.s	fa3,fa3,fs6
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16114:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   16118:	10b17153          	fmul.s	ft2,ft2,fa1
   1611c:	10c2f2d3          	fmul.s	ft5,ft5,fa2
   16120:	10b27253          	fmul.s	ft4,ft4,fa1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16124:	0961f1d3          	fsub.s	ft3,ft3,fs6
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16128:	10a6f6d3          	fmul.s	fa3,fa3,fa0
   1612c:	28578753          	fmin.s	fa4,fa5,ft5
   16130:	28410353          	fmin.s	ft6,ft2,ft4
	if (tmin > tmax) return ray.t_max;//no hit || behind
   16134:	285797d3          	fmax.s	fa5,fa5,ft5
   16138:	28411153          	fmax.s	ft2,ft2,ft4
   1613c:	10a1f1d3          	fmul.s	ft3,ft3,fa0
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   16140:	28671753          	fmax.s	fa4,fa4,ft6
	if (tmin > tmax) return ray.t_max;//no hit || behind
   16144:	282787d3          	fmin.s	fa5,fa5,ft2
   16148:	28171753          	fmax.s	fa4,fa4,ft1
   1614c:	28368153          	fmin.s	ft2,fa3,ft3
   16150:	280787d3          	fmin.s	fa5,fa5,ft0
   16154:	283696d3          	fmax.s	fa3,fa3,ft3
   16158:	28271753          	fmax.s	fa4,fa4,ft2
   1615c:	28d787d3          	fmin.s	fa5,fa5,fa3
   16160:	a0e79653          	flt.s	a2,fa5,fa4
   16164:	00060463          	beqz	a2,1616c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xafc>
   16168:	20000753          	fmv.s	fa4,ft0
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++, temp_node_stack_size);
   1616c:	a1a71653          	flt.s	a2,fa4,fs10
   16170:	02061863          	bnez	a2,161a0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb30>
			for(uint32_t i = 0; i < 4; ++i)
   16174:	00168693          	add	a3,a3,1
   16178:	f3769ae3          	bne	a3,s7,160ac <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xa3c>
   1617c:	00013803          	ld	a6,0(sp)
   16180:	00813503          	ld	a0,8(sp)
   16184:	02013583          	ld	a1,32(sp)
   16188:	02813303          	ld	t1,40(sp)
   1618c:	000b0393          	mv	t2,s6
   16190:	00078893          	mv	a7,a5
	} while(node_stack_size);
   16194:	20088e63          	beqz	a7,163b0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd40>
		if(current_entry.t >= hit.t) continue;
   16198:	0005ad07          	flw	fs10,0(a1)
   1619c:	8a9ff06f          	j	15a44 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x3d4>
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++, temp_node_stack_size);
   161a0:	00178e1b          	addw	t3,a5,1
	for(; j != min; --j)
   161a4:	02f59263          	bne	a1,a5,161c8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb58>
   161a8:	7b80006f          	j	16960 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x12f0>
		stack[j] = stack[j - 1];
   161ac:	00062e83          	lw	t4,0(a2) # 3c000000 <__global_pointer$+0x3bfe6ef8>
   161b0:	01d82023          	sw	t4,0(a6)
   161b4:	00462e83          	lw	t4,4(a2)
   161b8:	01d82223          	sw	t4,4(a6)
   161bc:	00862e83          	lw	t4,8(a2)
   161c0:	01d82423          	sw	t4,8(a6)
	for(; j != min; --j)
   161c4:	57e88663          	beq	a7,t5,16730 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x10c0>
		if(stack[j - 1].t >= entry.t) break;
   161c8:	fff78e9b          	addw	t4,a5,-1
   161cc:	020e9813          	sll	a6,t4,0x20
   161d0:	02085813          	srl	a6,a6,0x20
   161d4:	00181613          	sll	a2,a6,0x1
   161d8:	01060633          	add	a2,a2,a6
   161dc:	00261613          	sll	a2,a2,0x2
   161e0:	0e010813          	add	a6,sp,224
   161e4:	00c80633          	add	a2,a6,a2
   161e8:	00062787          	flw	fa5,0(a2)
   161ec:	00078f1b          	sext.w	t5,a5
		stack[j] = stack[j - 1];
   161f0:	020f1793          	sll	a5,t5,0x20
   161f4:	0207d793          	srl	a5,a5,0x20
   161f8:	00179813          	sll	a6,a5,0x1
		if(stack[j - 1].t >= entry.t) break;
   161fc:	a0f703d3          	fle.s	t2,fa4,fa5
		stack[j] = stack[j - 1];
   16200:	00f80833          	add	a6,a6,a5
   16204:	00281813          	sll	a6,a6,0x2
   16208:	0e010793          	add	a5,sp,224
   1620c:	01078833          	add	a6,a5,a6
		if(stack[j - 1].t >= entry.t) break;
   16210:	000e879b          	sext.w	a5,t4
   16214:	f8038ce3          	beqz	t2,161ac <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb3c>
	stack[j] = entry;
   16218:	0096f7b3          	and	a5,a3,s1
   1621c:	006787bb          	addw	a5,a5,t1
   16220:	0097f7b3          	and	a5,a5,s1
   16224:	00f567b3          	or	a5,a0,a5
   16228:	01e6961b          	sllw	a2,a3,0x1e
   1622c:	00c7e7b3          	or	a5,a5,a2
   16230:	00f82223          	sw	a5,4(a6)
   16234:	00e82027          	fsw	fa4,0(a6)
   16238:	00882423          	sw	s0,8(a6)
   1623c:	000e0793          	mv	a5,t3
}
   16240:	f35ff06f          	j	16174 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb04>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16244:	086076d3          	fsub.s	fa3,ft0,ft6
   16248:	09127753          	fsub.s	fa4,ft4,fa7
   1624c:	090175d3          	fsub.s	fa1,ft2,fa6
   16250:	0860f2d3          	fsub.s	ft5,ft1,ft6
   16254:	0841fe53          	fsub.s	ft8,ft3,ft4
   16258:	0838fed3          	fsub.s	ft9,fa7,ft3
   1625c:	0911f653          	fsub.s	fa2,ft3,fa7
	return vec3(a[1] * b[2] - a[2] * b[1],
   16260:	10b6f3d3          	fmul.s	ft7,fa3,fa1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16264:	090571d3          	fsub.s	ft3,fa0,fa6
		(-(a[0] * b[2] - a[2] * b[0])),
   16268:	10577253          	fmul.s	ft4,fa4,ft5
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1626c:	0800f053          	fsub.s	ft0,ft1,ft0
   16270:	08137353          	fsub.s	ft6,ft6,ft1
		(-(a[0] * b[2] - a[2] * b[0])),
   16274:	11cf70d3          	fmul.s	ft1,ft10,ft8
	return vec3(a[1] * b[2] - a[2] * b[1],
   16278:	3851f2c7          	fmsub.s	ft5,ft3,ft5,ft7
   1627c:	20c6f8c7          	fmsub.s	fa7,fa3,fa2,ft4
   16280:	00012387          	flw	ft7,0(sp)
		a[0] * b[1] - a[1] * b[0]);
   16284:	10c1f653          	fmul.s	fa2,ft3,fa2
		(-(a[0] * b[2] - a[2] * b[0])),
   16288:	11d4f253          	fmul.s	ft4,fs1,ft9
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1628c:	08a17553          	fsub.s	fa0,ft2,fa0
   16290:	08287853          	fsub.s	fa6,fa6,ft2
	return vec3(a[1] * b[2] - a[2] * b[1],
   16294:	0803f0c7          	fmsub.s	ft1,ft7,ft0,ft1
   16298:	10047153          	fmul.s	ft2,fs0,ft0
   1629c:	00812387          	flw	ft7,8(sp)
   162a0:	00512e27          	fsw	ft5,28(sp)
   162a4:	01412007          	flw	ft0,20(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162a8:	111a72d3          	fmul.s	ft5,fs4,fa7
		(-(a[0] * b[2] - a[2] * b[0])),
   162ac:	10eff9d3          	fmul.s	fs3,ft11,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   162b0:	60b77647          	fmsub.s	fa2,fa4,fa1,fa2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162b4:	01c12587          	flw	fa1,28(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   162b8:	10607053          	fmul.s	ft0,ft0,ft6
   162bc:	2063f347          	fmsub.s	ft6,ft7,ft6,ft4
   162c0:	01812207          	flw	ft4,24(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162c4:	28bcf2c3          	fmadd.s	ft5,fs9,fa1,ft5
		a[0] * b[1] - a[1] * b[0]);
   162c8:	00012587          	flw	fa1,0(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   162cc:	10d273d3          	fmul.s	ft7,ft4,fa3
   162d0:	98dc76c7          	fmsub.s	fa3,fs8,fa3,fs3
   162d4:	10af7f47          	fmsub.s	ft10,ft10,fa0,ft2
		a[0] * b[1] - a[1] * b[0]);
   162d8:	10a5f553          	fmul.s	fa0,fa1,fa0
   162dc:	00812587          	flw	fa1,8(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   162e0:	0104f4c7          	fmsub.s	fs1,fs1,fa6,ft0
   162e4:	383ff3c7          	fmsub.s	ft7,ft11,ft3,ft7
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162e8:	10da76d3          	fmul.s	fa3,fs4,fa3
   162ec:	101a70d3          	fmul.s	ft1,fs4,ft1
		a[0] * b[1] - a[1] * b[0]);
   162f0:	1105f853          	fmul.s	fa6,fa1,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162f4:	106a7353          	fmul.s	ft6,fs4,ft6
		a[0] * b[1] - a[1] * b[0]);
   162f8:	103c71d3          	fmul.s	ft3,fs8,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   162fc:	28c972c3          	fmadd.s	ft5,fs2,fa2,ft5
	return vec3(a[1] * b[2] - a[2] * b[1],
   16300:	01412007          	flw	ft0,20(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16304:	687cf3c3          	fmadd.s	ft7,fs9,ft7,fa3
	return vec3(a[1] * b[2] - a[2] * b[1],
   16308:	51c47447          	fmsub.s	fs0,fs0,ft8,fa0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1630c:	09ecff43          	fmadd.s	ft10,fs9,ft10,ft1
	return vec3(a[1] * b[2] - a[2] * b[1],
   16310:	81d07847          	fmsub.s	fa6,ft0,ft9,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16314:	309cf343          	fmadd.s	ft6,fs9,fs1,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   16318:	18e27747          	fmsub.s	fa4,ft4,fa4,ft3
	if(gn_dot_d > 0.0f) bc = -bc;
   1631c:	a05797d3          	flt.s	a5,fa5,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16320:	f0897f43          	fmadd.s	ft10,fs2,fs0,ft10
   16324:	310976c3          	fmadd.s	fa3,fs2,fa6,ft6
   16328:	38e97743          	fmadd.s	fa4,fs2,fa4,ft7
   1632c:	00078863          	beqz	a5,1633c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xccc>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   16330:	21ef1f53          	fneg.s	ft10,ft10
   16334:	20d696d3          	fneg.s	fa3,fa3
   16338:	20e71753          	fneg.s	fa4,fa4
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   1633c:	f00007d3          	fmv.w.x	fa5,zero
   16340:	a0ff17d3          	flt.s	a5,ft10,fa5
   16344:	06079263          	bnez	a5,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
   16348:	a0f697d3          	flt.s	a5,fa3,fa5
   1634c:	04079e63          	bnez	a5,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
   16350:	a0f717d3          	flt.s	a5,fa4,fa5
   16354:	04079a63          	bnez	a5,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16358:	01812787          	flw	fa5,24(sp)
   1635c:	01c12587          	flw	fa1,28(sp)
   16360:	1117f7d3          	fmul.s	fa5,fa5,fa7
   16364:	78bc77c3          	fmadd.s	fa5,fs8,fa1,fa5
   16368:	78cff7c3          	fmadd.s	fa5,ft11,fa2,fa5
	if(t < ray.t_min || t > hit.t) return false;
   1636c:	05c12607          	flw	fa2,92(sp)
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   16370:	1857f7d3          	fdiv.s	fa5,fa5,ft5
	if(t < ray.t_min || t > hit.t) return false;
   16374:	a0c797d3          	flt.s	a5,fa5,fa2
   16378:	02079863          	bnez	a5,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
   1637c:	a0fd17d3          	flt.s	a5,fs10,fa5
   16380:	02079463          	bnez	a5,163a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd38>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   16384:	00df7653          	fadd.s	fa2,ft10,fa3
	hit.t = t ;
   16388:	00f5a027          	fsw	fa5,0(a1)
				hit.id = node_index;
   1638c:	01c5a623          	sw	t3,12(a1)
		uint32_t lod = current_entry.lod;
   16390:	00040513          	mv	a0,s0
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   16394:	00e677d3          	fadd.s	fa5,fa2,fa4
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   16398:	18ff7f53          	fdiv.s	ft10,ft10,fa5
   1639c:	18f6f6d3          	fdiv.s	fa3,fa3,fa5
	e[0] = v[0];
   163a0:	01e5a227          	fsw	ft10,4(a1)
	e[1] = v[1];
   163a4:	00d5a427          	fsw	fa3,8(a1)
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   163a8:	000e8893          	mv	a7,t4
	} while(node_stack_size);
   163ac:	de0896e3          	bnez	a7,16198 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb28>
	if(hit_lod != ~0u)
   163b0:	fff00793          	li	a5,-1
   163b4:	06813703          	ld	a4,104(sp)
   163b8:	07013603          	ld	a2,112(sp)
   163bc:	4ef50e63          	beq	a0,a5,168b8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1248>
		hit.id += header.id_offset;
   163c0:	00c5a783          	lw	a5,12(a1)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   163c4:	02070713          	add	a4,a4,32
   163c8:	00c787bb          	addw	a5,a5,a2
   163cc:	00f5a623          	sw	a5,12(a1)
   163d0:	09813783          	ld	a5,152(sp)
   163d4:	72f70a63          	beq	a4,a5,16b08 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1498>
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   163d8:	00100793          	li	a5,1
   163dc:	0af13023          	sd	a5,160(sp)
   163e0:	00cda787          	flw	fa5,12(s11)
		if(current_entry.t >= hit.t) continue;
   163e4:	0005ac87          	flw	fs9,0(a1)
   163e8:	20f78753          	fmv.s	fa4,fa5
   163ec:	01cda787          	flw	fa5,28(s11)
   163f0:	cf4ff06f          	j	158e4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x274>
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   163f4:	34069263          	bnez	a3,16738 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x10c8>
	inline float operator[](int i) const { return e[i]; }
   163f8:	00072287          	flw	ft5,0(a4)
   163fc:	00472387          	flw	ft7,4(a4)
   16400:	00872307          	flw	ft6,8(a4)
	e[2] = v[2];
   16404:	03812707          	flw	fa4,56(sp)
	e[1] = v[1];
   16408:	03412187          	flw	ft3,52(sp)
	e[0] = v[0];
   1640c:	03012207          	flw	ft4,48(sp)
	e[2] = v[2];
   16410:	01c12887          	flw	fa7,28(sp)
	e[1] = v[1];
   16414:	01812e07          	flw	ft8,24(sp)
	e[0] = v[0];
   16418:	01412807          	flw	fa6,20(sp)
	return vec3(std::min(a[0], b[0]), std::min(a[1], b[1]), std::min(a[2], b[2]));
   1641c:	285207d3          	fmin.s	fa5,ft4,ft5
   16420:	29c18153          	fmin.s	ft2,ft3,ft8
   16424:	291706d3          	fmin.s	fa3,fa4,fa7
   16428:	285212d3          	fmax.s	ft5,ft4,ft5
   1642c:	29c19253          	fmax.s	ft4,ft3,ft8
   16430:	291711d3          	fmax.s	ft3,fa4,fa7
   16434:	f0038753          	fmv.w.x	fa4,t2
   16438:	28e787d3          	fmin.s	fa5,fa5,fa4
   1643c:	f00e0753          	fmv.w.x	fa4,t3
   16440:	290787d3          	fmin.s	fa5,fa5,fa6
   16444:	28e10153          	fmin.s	ft2,ft2,fa4
   16448:	f00f0753          	fmv.w.x	fa4,t5
   1644c:	28710153          	fmin.s	ft2,ft2,ft7
   16450:	28e686d3          	fmin.s	fa3,fa3,fa4
   16454:	f0080753          	fmv.w.x	fa4,a6
   16458:	286686d3          	fmin.s	fa3,fa3,ft6
	return vec3(std::max(a[0], b[0]), std::max(a[1], b[1]), std::max(a[2], b[2]));
   1645c:	28e292d3          	fmax.s	ft5,ft5,fa4
   16460:	f00e8753          	fmv.w.x	fa4,t4
   16464:	290292d3          	fmax.s	ft5,ft5,fa6
   16468:	28e21253          	fmax.s	ft4,ft4,fa4
   1646c:	f0060753          	fmv.w.x	fa4,a2
   16470:	28721253          	fmax.s	ft4,ft4,ft7
   16474:	28e191d3          	fmax.s	ft3,ft3,fa4
   16478:	286191d3          	fmax.s	ft3,ft3,ft6
					for(uint32_t j = 0; j < 3; ++j)
   1647c:	c85ff06f          	j	16100 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xa90>
	e[1] = v[1];
   16480:	20210c53          	fmv.s	fs8,ft2
   16484:	20000753          	fmv.s	fa4,ft0
   16488:	20318853          	fmv.s	fa6,ft3
	inline float operator[](int i) const { return e[i]; }
   1648c:	00072007          	flw	ft0,0(a4)
   16490:	00472587          	flw	fa1,4(a4)
   16494:	00872787          	flw	fa5,8(a4)
	e[2] = v[2];
   16498:	20108fd3          	fmv.s	ft11,ft1
	e[0] = v[0];
   1649c:	20d681d3          	fmv.s	ft3,fa3
	e[1] = v[1];
   164a0:	20a50153          	fmv.s	ft2,fa0
	if(gn_dot_d > 0.0f) bc = -bc;
   164a4:	f0000453          	fmv.w.x	fs0,zero
   164a8:	218c08d3          	fmv.s	fa7,fs8
   164ac:	217b8d53          	fmv.s	fs10,fs7
   164b0:	215a84d3          	fmv.s	fs1,fs5
			for(uint32_t i = 0; i < 4; ++i)
   164b4:	00000793          	li	a5,0
   164b8:	00400613          	li	a2,4
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   164bc:	00100893          	li	a7,1
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   164c0:	080876d3          	fsub.s	fa3,fa6,ft0
   164c4:	08fffed3          	fsub.s	ft9,ft11,fa5
   164c8:	08f770d3          	fsub.s	ft1,fa4,fa5
   164cc:	0801f253          	fsub.s	ft4,ft3,ft0
   164d0:	08b8fbd3          	fsub.s	fs7,fa7,fa1
   164d4:	0901f653          	fsub.s	fa2,ft3,fa6
		(-(a[0] * b[2] - a[2] * b[0])),
   164d8:	11d6f3d3          	fmul.s	ft7,fa3,ft9
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   164dc:	08b172d3          	fsub.s	ft5,ft2,fa1
   164e0:	08917f53          	fsub.s	ft10,ft2,fs1
	return vec3(a[1] * b[2] - a[2] * b[1],
   164e4:	1170f353          	fmul.s	ft6,ft1,fs7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   164e8:	00c12027          	fsw	fa2,0(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   164ec:	3840f3c7          	fmsub.s	ft7,ft1,ft4,ft7
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   164f0:	09a87653          	fsub.s	fa2,fa6,fs10
   164f4:	08307553          	fsub.s	fa0,ft0,ft3
   164f8:	09677ad3          	fsub.s	fs5,fa4,fs6
   164fc:	096ff9d3          	fsub.s	fs3,ft11,fs6
   16500:	0967fe53          	fsub.s	ft8,fa5,fs6
   16504:	08eff753          	fsub.s	fa4,ft11,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   16508:	00712427          	fsw	ft7,8(sp)
		(-(a[0] * b[2] - a[2] * b[0])),
   1650c:	00012387          	flw	ft7,0(sp)
	return vec3(a[1] * b[2] - a[2] * b[1],
   16510:	31d2fec7          	fmsub.s	ft9,ft5,ft9,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16514:	02c12027          	fsw	fa2,32(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16518:	00812307          	flw	ft6,8(sp)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   1651c:	21ef0653          	fmv.s	fa2,ft10
   16520:	09f7f7d3          	fsub.s	fa5,fa5,ft11
   16524:	09a1f1d3          	fsub.s	ft3,ft3,fs10
   16528:	0898ffd3          	fsub.s	ft11,fa7,fs1
   1652c:	0895ff53          	fsub.s	ft10,fa1,fs1
		(-(a[0] * b[2] - a[2] * b[0])),
   16530:	11357c53          	fmul.s	fs8,fa0,fs3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16534:	09a07053          	fsub.s	ft0,ft0,fs10
		(-(a[0] * b[2] - a[2] * b[0])),
   16538:	1153f3d3          	fmul.s	ft7,ft7,fs5
   1653c:	11c6f853          	fmul.s	fa6,fa3,ft8
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16540:	0828f153          	fsub.s	ft2,fa7,ft2
   16544:	0915f5d3          	fsub.s	fa1,fa1,fa7
		a[0] * b[1] - a[1] * b[0]);
   16548:	1042f253          	fmul.s	ft4,ft5,ft4
	return vec3(a[1] * b[2] - a[2] * b[1],
   1654c:	10c778d3          	fmul.s	fa7,fa4,fa2
   16550:	02c12427          	fsw	fa2,40(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16554:	106a7353          	fmul.s	ft6,fs4,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   16558:	02012607          	flw	fa2,32(sp)
   1655c:	2176f247          	fmsub.s	ft4,fa3,fs7,ft4
   16560:	895178c7          	fmsub.s	fa7,ft2,fs5,fa7
   16564:	38c77747          	fmsub.s	fa4,fa4,fa2,ft7
   16568:	11f7f3d3          	fmul.s	ft7,fa5,ft11
   1656c:	c037f7c7          	fmsub.s	fa5,fa5,ft3,fs8
   16570:	11e0fc53          	fmul.s	fs8,ft1,ft10
   16574:	8000f0c7          	fmsub.s	ft1,ft1,ft0,fa6
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16578:	31dcf343          	fmadd.s	ft6,fs9,ft9,ft6
		a[0] * b[1] - a[1] * b[0]);
   1657c:	10c17153          	fmul.s	ft2,ft2,fa2
	return vec3(a[1] * b[2] - a[2] * b[1],
   16580:	3935f3c7          	fmsub.s	ft7,fa1,fs3,ft7
   16584:	c1c2fc47          	fmsub.s	fs8,ft5,ft8,fs8
		a[0] * b[1] - a[1] * b[0]);
   16588:	1035f5d3          	fmul.s	fa1,fa1,ft3
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   1658c:	10ea7753          	fmul.s	fa4,fs4,fa4
   16590:	10fa77d3          	fmul.s	fa5,fs4,fa5
		a[0] * b[1] - a[1] * b[0]);
   16594:	1002f2d3          	fmul.s	ft5,ft5,ft0
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   16598:	101a70d3          	fmul.s	ft1,fs4,ft1
   1659c:	30497343          	fmadd.s	ft6,fs2,ft4,ft6
	return vec3(a[1] * b[2] - a[2] * b[1],
   165a0:	02812187          	flw	ft3,40(sp)
   165a4:	00012607          	flw	fa2,0(sp)
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   165a8:	711cf8c3          	fmadd.s	fa7,fs9,fa7,fa4
	return vec3(a[1] * b[2] - a[2] * b[1],
   165ac:	59f57547          	fmsub.s	fa0,fa0,ft11,fa1
   165b0:	10367647          	fmsub.s	fa2,fa2,ft3,ft2
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   165b4:	787cf3c3          	fmadd.s	ft7,fs9,ft7,fa5
	return vec3(a[1] * b[2] - a[2] * b[1],
   165b8:	29e6f6c7          	fmsub.s	fa3,fa3,ft10,ft5
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   165bc:	098cfc43          	fmadd.s	fs8,fs9,fs8,ft1
   165c0:	a06416d3          	flt.s	a3,fs0,ft6
   165c4:	88c97643          	fmadd.s	fa2,fs2,fa2,fa7
   165c8:	38a97543          	fmadd.s	fa0,fs2,fa0,ft7
   165cc:	c0d976c3          	fmadd.s	fa3,fs2,fa3,fs8
   165d0:	00068863          	beqz	a3,165e0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xf70>
	inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }
   165d4:	20c61653          	fneg.s	fa2,fa2
   165d8:	20a51553          	fneg.s	fa0,fa0
   165dc:	20d696d3          	fneg.s	fa3,fa3
	if(bc[0] < 0.0f || bc[1] < 0.0f || bc[2] < 0.0f) return false;
   165e0:	a08616d3          	flt.s	a3,fa2,fs0
   165e4:	06069463          	bnez	a3,1664c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xfdc>
   165e8:	a08516d3          	flt.s	a3,fa0,fs0
   165ec:	06069063          	bnez	a3,1664c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xfdc>
   165f0:	a08696d3          	flt.s	a3,fa3,fs0
   165f4:	04069c63          	bnez	a3,1664c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xfdc>
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   165f8:	00812787          	flw	fa5,8(sp)
   165fc:	10ff7f53          	fmul.s	ft10,ft10,fa5
	if(t < ray.t_min || t > hit.t) return false;
   16600:	05c12787          	flw	fa5,92(sp)
   16604:	f1d07043          	fmadd.s	ft0,ft0,ft9,ft10
   16608:	004e7e43          	fmadd.s	ft8,ft8,ft4,ft0
	float t = rtm::dot(gn, tri.vrts[0] - ray.o) / gn_dot_d;
   1660c:	186e7e53          	fdiv.s	ft8,ft8,ft6
	if(t < ray.t_min || t > hit.t) return false;
   16610:	a0fe16d3          	flt.s	a3,ft8,fa5
   16614:	02069c63          	bnez	a3,1664c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xfdc>
   16618:	0005a787          	flw	fa5,0(a1)
   1661c:	a1c796d3          	flt.s	a3,fa5,ft8
   16620:	02069663          	bnez	a3,1664c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xfdc>
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   16624:	00a677d3          	fadd.s	fa5,fa2,fa0
					hit.id = first_child_index + i;
   16628:	00fe06bb          	addw	a3,t3,a5
	hit.t = t ;
   1662c:	01c5a027          	fsw	ft8,0(a1)
   16630:	00d5a623          	sw	a3,12(a1)
   16634:	000f0513          	mv	a0,t5
	hit.bc = rtm::vec2(bc.x, bc.y) / (bc[0] + bc[1] + bc[2]);
   16638:	00d7f7d3          	fadd.s	fa5,fa5,fa3
	return vec2(a.e[0] / b.e[0], a.e[1] / b.e[1]);
   1663c:	18f67653          	fdiv.s	fa2,fa2,fa5
   16640:	18f57553          	fdiv.s	fa0,fa0,fa5
	e[0] = v[0];
   16644:	00c5a227          	fsw	fa2,4(a1)
	e[1] = v[1];
   16648:	00a5a427          	fsw	fa0,8(a1)
			for(uint32_t i = 0; i < 4; ++i)
   1664c:	0017879b          	addw	a5,a5,1
   16650:	14c78c63          	beq	a5,a2,167a8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1138>
   16654:	17178463          	beq	a5,a7,167bc <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x114c>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   16658:	00200693          	li	a3,2
   1665c:	18d78463          	beq	a5,a3,167e4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1174>
	e[2] = v[2];
   16660:	01c12f87          	flw	ft11,28(sp)
	e[1] = v[1];
   16664:	01812887          	flw	fa7,24(sp)
	e[0] = v[0];
   16668:	01412187          	flw	ft3,20(sp)
	e[2] = v[2];
   1666c:	03812707          	flw	fa4,56(sp)
	e[1] = v[1];
   16670:	03412107          	flw	ft2,52(sp)
	e[0] = v[0];
   16674:	03012807          	flw	fa6,48(sp)
	e[2] = v[2];
   16678:	04412787          	flw	fa5,68(sp)
	e[1] = v[1];
   1667c:	04012587          	flw	fa1,64(sp)
	e[0] = v[0];
   16680:	03c12007          	flw	ft0,60(sp)
	}
   16684:	00300793          	li	a5,3
   16688:	e39ff06f          	j	164c0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xe50>
		else         tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   1668c:	fff4061b          	addw	a2,s0,-1
   16690:	02061613          	sll	a2,a2,0x20
   16694:	02065613          	srl	a2,a2,0x20
   16698:	02560633          	mul	a2,a2,t0
   1669c:	20010993          	add	s3,sp,512
		uint32_t tri_type = current_entry.tri_type;
   166a0:	0006849b          	sext.w	s1,a3
		else         tri_stack[lod].tri = reconstruct_triangle(tri_stack[lod - 1u].tri, tri_stack[lod - 1u].new_center_tri, tri_type);
   166a4:	02460293          	add	t0,a2,36
   166a8:	005982b3          	add	t0,s3,t0
   166ac:	00c98633          	add	a2,s3,a2
	if(tri_type == 0) return Triangle(prnt_tri.vrts[0], cntr_tri.vrts[2], cntr_tri.vrts[1]);
   166b0:	0c069063          	bnez	a3,16770 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1100>
	inline float operator[](int i) const { return e[i]; }
   166b4:	00062887          	flw	fa7,0(a2)
   166b8:	00462807          	flw	fa6,4(a2)
   166bc:	00862307          	flw	ft6,8(a2)
   166c0:	0182a207          	flw	ft4,24(t0)
   166c4:	01c2a507          	flw	fa0,28(t0)
   166c8:	0202a007          	flw	ft0,32(t0)
   166cc:	00c2a187          	flw	ft3,12(t0)
   166d0:	0102a107          	flw	ft2,16(t0)
   166d4:	0142a087          	flw	ft1,20(t0)
	e[0] = v[0];
   166d8:	01172027          	fsw	fa7,0(a4)
	e[1] = v[1];
   166dc:	01072227          	fsw	fa6,4(a4)
	e[2] = v[2];
   166e0:	00672427          	fsw	ft6,8(a4)
	e[0] = v[0];
   166e4:	00472627          	fsw	ft4,12(a4)
	e[1] = v[1];
   166e8:	00a72827          	fsw	fa0,16(a4)
	e[2] = v[2];
   166ec:	00072a27          	fsw	ft0,20(a4)
	e[0] = v[0];
   166f0:	00372c27          	fsw	ft3,24(a4)
	e[1] = v[1];
   166f4:	00272e27          	fsw	ft2,28(a4)
	e[2] = v[2];
   166f8:	02172027          	fsw	ft1,32(a4)
class Triangle
   166fc:	c44ff06f          	j	15b40 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x4d0>
	return (u & (1 << 23)) ? 1.0 : as_f32(u | 0x3f800000) * 2.0f - 3.0f;
   16700:	00019637          	lui	a2,0x19
   16704:	90862687          	flw	fa3,-1784(a2) # 18908 <__DATA_BEGIN__>
   16708:	e9cff06f          	j	15da4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x734>
   1670c:	00019637          	lui	a2,0x19
   16710:	90862787          	flw	fa5,-1784(a2) # 18908 <__DATA_BEGIN__>
   16714:	e5cff06f          	j	15d70 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x700>
   16718:	000192b7          	lui	t0,0x19
   1671c:	9082a587          	flw	fa1,-1784(t0) # 18908 <__DATA_BEGIN__>
   16720:	e14ff06f          	j	15d34 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x6c4>
   16724:	000192b7          	lui	t0,0x19
   16728:	9082a387          	flw	ft7,-1784(t0) # 18908 <__DATA_BEGIN__>
   1672c:	dd4ff06f          	j	15d00 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x690>
   16730:	00060813          	mv	a6,a2
   16734:	ae5ff06f          	j	16218 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xba8>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   16738:	00100c93          	li	s9,1
   1673c:	0d968863          	beq	a3,s9,1680c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x119c>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   16740:	00200c93          	li	s9,2
   16744:	11968c63          	beq	a3,s9,1685c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x11ec>
   16748:	01c12707          	flw	fa4,28(sp)
	e[1] = v[1];
   1674c:	01812187          	flw	ft3,24(sp)
	e[0] = v[0];
   16750:	01412207          	flw	ft4,20(sp)
	e[2] = v[2];
   16754:	03812887          	flw	fa7,56(sp)
	e[1] = v[1];
   16758:	03412e07          	flw	ft8,52(sp)
	e[0] = v[0];
   1675c:	03012807          	flw	fa6,48(sp)
	e[2] = v[2];
   16760:	04412307          	flw	ft6,68(sp)
	e[1] = v[1];
   16764:	04012387          	flw	ft7,64(sp)
	e[0] = v[0];
   16768:	03c12287          	flw	ft5,60(sp)
   1676c:	cb1ff06f          	j	1641c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xdac>
	else if(tri_type == 1) return Triangle(cntr_tri.vrts[2], prnt_tri.vrts[1], cntr_tri.vrts[0]);
   16770:	00100693          	li	a3,1
	inline float operator[](int i) const { return e[i]; }
   16774:	0002a887          	flw	fa7,0(t0)
   16778:	0042a807          	flw	fa6,4(t0)
   1677c:	0082a307          	flw	ft6,8(t0)
   16780:	0ad48a63          	beq	s1,a3,16834 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x11c4>
	else if(tri_type == 2) return Triangle(cntr_tri.vrts[1], cntr_tri.vrts[0], prnt_tri.vrts[2]);
   16784:	00200693          	li	a3,2
   16788:	00c2a207          	flw	ft4,12(t0)
   1678c:	0102a507          	flw	fa0,16(t0)
   16790:	0142a007          	flw	ft0,20(t0)
   16794:	0ed48863          	beq	s1,a3,16884 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1214>
   16798:	0182a187          	flw	ft3,24(t0)
   1679c:	01c2a107          	flw	ft2,28(t0)
   167a0:	0202a087          	flw	ft1,32(t0)
	}
   167a4:	f35ff06f          	j	166d8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1068>
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   167a8:	000e8793          	mv	a5,t4
   167ac:	21ad0bd3          	fmv.s	fs7,fs10
   167b0:	20948ad3          	fmv.s	fs5,fs1
   167b4:	00078893          	mv	a7,a5
   167b8:	9ddff06f          	j	16194 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xb24>
   167bc:	00c72807          	flw	fa6,12(a4)
   167c0:	01072107          	flw	ft2,16(a4)
   167c4:	01472707          	flw	fa4,20(a4)
	e[2] = v[2];
   167c8:	04412f87          	flw	ft11,68(sp)
	e[1] = v[1];
   167cc:	04012887          	flw	fa7,64(sp)
	e[0] = v[0];
   167d0:	03c12187          	flw	ft3,60(sp)
	e[2] = v[2];
   167d4:	01c12787          	flw	fa5,28(sp)
	e[1] = v[1];
   167d8:	01812587          	flw	fa1,24(sp)
	e[0] = v[0];
   167dc:	01412007          	flw	ft0,20(sp)
   167e0:	ce1ff06f          	j	164c0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xe50>
	inline float operator[](int i) const { return e[i]; }
   167e4:	01872187          	flw	ft3,24(a4)
   167e8:	01c72887          	flw	fa7,28(a4)
   167ec:	02072f87          	flw	ft11,32(a4)
	e[2] = v[2];
   167f0:	04412707          	flw	fa4,68(sp)
	e[1] = v[1];
   167f4:	04012107          	flw	ft2,64(sp)
	e[0] = v[0];
   167f8:	03c12807          	flw	fa6,60(sp)
	e[2] = v[2];
   167fc:	03812787          	flw	fa5,56(sp)
	e[1] = v[1];
   16800:	03412587          	flw	fa1,52(sp)
	e[0] = v[0];
   16804:	03012007          	flw	ft0,48(sp)
   16808:	cb9ff06f          	j	164c0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xe50>
	inline float operator[](int i) const { return e[i]; }
   1680c:	00c72807          	flw	fa6,12(a4)
   16810:	01072e07          	flw	ft8,16(a4)
   16814:	01472887          	flw	fa7,20(a4)
	e[2] = v[2];
   16818:	04412707          	flw	fa4,68(sp)
	e[1] = v[1];
   1681c:	04012187          	flw	ft3,64(sp)
	e[0] = v[0];
   16820:	03c12207          	flw	ft4,60(sp)
	e[2] = v[2];
   16824:	01c12307          	flw	ft6,28(sp)
	e[1] = v[1];
   16828:	01812387          	flw	ft7,24(sp)
	e[0] = v[0];
   1682c:	01412287          	flw	ft5,20(sp)
   16830:	bedff06f          	j	1641c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xdac>
	e[2] = v[2];
   16834:	206300d3          	fmv.s	ft1,ft6
	e[1] = v[1];
   16838:	21080153          	fmv.s	ft2,fa6
	e[0] = v[0];
   1683c:	211881d3          	fmv.s	ft3,fa7
	inline float operator[](int i) const { return e[i]; }
   16840:	00c62207          	flw	ft4,12(a2)
   16844:	01062507          	flw	fa0,16(a2)
   16848:	01462007          	flw	ft0,20(a2)
	e[2] = v[2];
   1684c:	0202a307          	flw	ft6,32(t0)
	e[1] = v[1];
   16850:	01c2a807          	flw	fa6,28(t0)
	e[0] = v[0];
   16854:	0182a887          	flw	fa7,24(t0)
   16858:	e81ff06f          	j	166d8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1068>
	inline float operator[](int i) const { return e[i]; }
   1685c:	01872207          	flw	ft4,24(a4)
   16860:	01c72187          	flw	ft3,28(a4)
   16864:	02072707          	flw	fa4,32(a4)
	e[2] = v[2];
   16868:	04412887          	flw	fa7,68(sp)
	e[1] = v[1];
   1686c:	04012e07          	flw	ft8,64(sp)
	e[0] = v[0];
   16870:	03c12807          	flw	fa6,60(sp)
	e[2] = v[2];
   16874:	03812307          	flw	ft6,56(sp)
	e[1] = v[1];
   16878:	03412387          	flw	ft7,52(sp)
	e[0] = v[0];
   1687c:	03012287          	flw	ft5,48(sp)
   16880:	b9dff06f          	j	1641c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xdac>
	inline float operator[](int i) const { return e[i]; }
   16884:	206306d3          	fmv.s	fa3,ft6
   16888:	21080753          	fmv.s	fa4,fa6
   1688c:	211887d3          	fmv.s	fa5,fa7
	e[2] = v[2];
   16890:	20000353          	fmv.s	ft6,ft0
	e[1] = v[1];
   16894:	20a50853          	fmv.s	fa6,fa0
	e[0] = v[0];
   16898:	204208d3          	fmv.s	fa7,ft4
	inline float operator[](int i) const { return e[i]; }
   1689c:	01862187          	flw	ft3,24(a2)
   168a0:	01c62107          	flw	ft2,28(a2)
   168a4:	02062087          	flw	ft1,32(a2)
	e[2] = v[2];
   168a8:	20d68053          	fmv.s	ft0,fa3
	e[1] = v[1];
   168ac:	20e70553          	fmv.s	fa0,fa4
	e[0] = v[0];
   168b0:	20f78253          	fmv.s	ft4,fa5
   168b4:	e25ff06f          	j	166d8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1068>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   168b8:	09813783          	ld	a5,152(sp)
   168bc:	02070713          	add	a4,a4,32
   168c0:	b2e790e3          	bne	a5,a4,163e0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xd70>
   168c4:	0a813703          	ld	a4,168(sp)
   168c8:	216b0d53          	fmv.s	fs10,fs6
   168cc:	07812c07          	flw	fs8,120(sp)
   168d0:	215a8b53          	fmv.s	fs6,fs5
   168d4:	0b013903          	ld	s2,176(sp)
   168d8:	07c12a87          	flw	fs5,124(sp)
   168dc:	0a013883          	ld	a7,160(sp)
   168e0:	0b813783          	ld	a5,184(sp)
	while(node_stack_size);
   168e4:	00070463          	beqz	a4,168ec <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x127c>
   168e8:	f39fe06f          	j	15820 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1b0>
}
   168ec:	06010113          	add	sp,sp,96
   168f0:	7e813083          	ld	ra,2024(sp)
   168f4:	7e013403          	ld	s0,2016(sp)
   168f8:	7d813483          	ld	s1,2008(sp)
   168fc:	7d013903          	ld	s2,2000(sp)
   16900:	7c813983          	ld	s3,1992(sp)
   16904:	7c013a03          	ld	s4,1984(sp)
   16908:	7b813a83          	ld	s5,1976(sp)
   1690c:	7b013b03          	ld	s6,1968(sp)
   16910:	7a813b83          	ld	s7,1960(sp)
   16914:	7a013c03          	ld	s8,1952(sp)
   16918:	79813c83          	ld	s9,1944(sp)
   1691c:	79013d03          	ld	s10,1936(sp)
   16920:	78813d83          	ld	s11,1928(sp)
   16924:	77c12407          	flw	fs0,1916(sp)
   16928:	77812487          	flw	fs1,1912(sp)
   1692c:	77412907          	flw	fs2,1908(sp)
   16930:	77012987          	flw	fs3,1904(sp)
   16934:	76c12a07          	flw	fs4,1900(sp)
   16938:	76812a87          	flw	fs5,1896(sp)
   1693c:	76412b07          	flw	fs6,1892(sp)
   16940:	76012b87          	flw	fs7,1888(sp)
   16944:	75c12c07          	flw	fs8,1884(sp)
   16948:	75812c87          	flw	fs9,1880(sp)
   1694c:	75412d07          	flw	fs10,1876(sp)
   16950:	75012d87          	flw	fs11,1872(sp)
   16954:	00088513          	mv	a0,a7
   16958:	7f010113          	add	sp,sp,2032
   1695c:	00008067          	ret
	stack[j] = entry;
   16960:	02059613          	sll	a2,a1,0x20
   16964:	02065613          	srl	a2,a2,0x20
   16968:	00161793          	sll	a5,a2,0x1
   1696c:	00c787b3          	add	a5,a5,a2
   16970:	00279793          	sll	a5,a5,0x2
   16974:	0e010613          	add	a2,sp,224
   16978:	00f60833          	add	a6,a2,a5
   1697c:	89dff06f          	j	16218 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0xba8>
   16980:	00d50533          	add	a0,a0,a3
   16984:	00150f93          	add	t6,a0,1
   16988:	00569693          	sll	a3,a3,0x5
   1698c:	005f9f93          	sll	t6,t6,0x5
   16990:	05012107          	flw	ft2,80(sp)
   16994:	05412187          	flw	ft3,84(sp)
   16998:	05812207          	flw	ft4,88(sp)
   1699c:	00d78333          	add	t1,a5,a3
   169a0:	01f78fb3          	add	t6,a5,t6
   169a4:	46010f13          	add	t5,sp,1120
   169a8:	00070e13          	mv	t3,a4
   169ac:	00c0006f          	j	169b8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1348>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   169b0:	02030313          	add	t1,t1,32
   169b4:	13f30463          	beq	t1,t6,16adc <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x146c>
		uint64_t r = ((uint64_t*)&src)[i];
   169b8:	00033503          	ld	a0,0(t1)
   169bc:	00833603          	ld	a2,8(t1)
   169c0:	01033803          	ld	a6,16(t1)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   169c4:	00050693          	mv	a3,a0
   169c8:	02055513          	srl	a0,a0,0x20
   169cc:	f0050753          	fmv.w.x	fa4,a0
   169d0:	02065e93          	srl	t4,a2,0x20
   169d4:	f00687d3          	fmv.w.x	fa5,a3
   169d8:	096776d3          	fsub.s	fa3,fa4,fs6
   169dc:	f00e8753          	fmv.w.x	fa4,t4
   169e0:	0977f7d3          	fsub.s	fa5,fa5,fs7
		((uint64_t*)&dst)[i] = r;
   169e4:	01833703          	ld	a4,24(t1)
   169e8:	097772d3          	fsub.s	ft5,fa4,fs7
   169ec:	f0080753          	fmv.w.x	fa4,a6
   169f0:	02085813          	srl	a6,a6,0x20
   169f4:	f0080653          	fmv.w.x	fa2,a6
   169f8:	096770d3          	fsub.s	ft1,fa4,fs6
   169fc:	f0060753          	fmv.w.x	fa4,a2
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16a00:	1027f7d3          	fmul.s	fa5,fa5,ft2
   16a04:	1036f6d3          	fmul.s	fa3,fa3,ft3
   16a08:	1022f2d3          	fmul.s	ft5,ft5,ft2
   16a0c:	1030f0d3          	fmul.s	ft1,ft1,ft3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16a10:	09a675d3          	fsub.s	fa1,fa2,fs10
   16a14:	09a77753          	fsub.s	fa4,fa4,fs10
   16a18:	00e93c23          	sd	a4,24(s2)
   16a1c:	28578653          	fmin.s	fa2,fa5,ft5
   16a20:	28168353          	fmin.s	ft6,fa3,ft1
	if (tmin > tmax) return ray.t_max;//no hit || behind
   16a24:	285797d3          	fmax.s	fa5,fa5,ft5
   16a28:	281696d3          	fmax.s	fa3,fa3,ft1
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16a2c:	10477753          	fmul.s	fa4,fa4,ft4
   16a30:	1045f5d3          	fmul.s	fa1,fa1,ft4
   16a34:	28661653          	fmax.s	fa2,fa2,ft6
   16a38:	28d787d3          	fmin.s	fa5,fa5,fa3
   16a3c:	280616d3          	fmax.s	fa3,fa2,ft0
   16a40:	28a787d3          	fmin.s	fa5,fa5,fa0
   16a44:	28b70653          	fmin.s	fa2,fa4,fa1
   16a48:	28b71753          	fmax.s	fa4,fa4,fa1
   16a4c:	28c696d3          	fmax.s	fa3,fa3,fa2
   16a50:	28e787d3          	fmin.s	fa5,fa5,fa4
   16a54:	a0d79753          	flt.s	a4,fa5,fa3
   16a58:	00070463          	beqz	a4,16a60 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x13f0>
   16a5c:	20a506d3          	fmv.s	fa3,fa0
				new_entry.data = node.data;
   16a60:	01892683          	lw	a3,24(s2)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16a64:	a1969753          	flt.s	a4,fa3,fs9
				new_entry.data = node.data;
   16a68:	20d12223          	sw	a3,516(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16a6c:	f40702e3          	beqz	a4,169b0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1340>
   16a70:	001e0e9b          	addw	t4,t3,1
	for(; j != min; --j)
   16a74:	060e0c63          	beqz	t3,16aec <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x147c>
   16a78:	fffe071b          	addw	a4,t3,-1
   16a7c:	020e1613          	sll	a2,t3,0x20
   16a80:	01d65693          	srl	a3,a2,0x1d
   16a84:	02071613          	sll	a2,a4,0x20
   16a88:	01d65713          	srl	a4,a2,0x1d
   16a8c:	000f0e13          	mv	t3,t5
   16a90:	00df06b3          	add	a3,t5,a3
   16a94:	00ef0733          	add	a4,t5,a4
   16a98:	0180006f          	j	16ab0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1440>
		stack[j] = stack[j - 1];
   16a9c:	00073603          	ld	a2,0(a4)
	for(; j != min; --j)
   16aa0:	ff868693          	add	a3,a3,-8
		stack[j] = stack[j - 1];
   16aa4:	00c6b423          	sd	a2,8(a3)
	for(; j != min; --j)
   16aa8:	04ef0463          	beq	t5,a4,16af0 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1480>
   16aac:	00050713          	mv	a4,a0
		if(stack[j - 1].t >= entry.t) break;
   16ab0:	00072787          	flw	fa5,0(a4)
		stack[j] = stack[j - 1];
   16ab4:	00068813          	mv	a6,a3
	for(; j != min; --j)
   16ab8:	ff870513          	add	a0,a4,-8
		if(stack[j - 1].t >= entry.t) break;
   16abc:	a0f68653          	fle.s	a2,fa3,fa5
   16ac0:	fc060ee3          	beqz	a2,16a9c <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x142c>
	stack[j] = entry;
   16ac4:	20d12027          	fsw	fa3,512(sp)
   16ac8:	20013703          	ld	a4,512(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16acc:	000e8e13          	mv	t3,t4
	stack[j] = entry;
   16ad0:	00e83023          	sd	a4,0(a6)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16ad4:	02030313          	add	t1,t1,32
   16ad8:	eff310e3          	bne	t1,t6,169b8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1348>
   16adc:	000e0713          	mv	a4,t3
	while(node_stack_size);
   16ae0:	00070463          	beqz	a4,16ae8 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1478>
   16ae4:	d3dfe06f          	j	15820 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1b0>
   16ae8:	e05ff06f          	j	168ec <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x127c>
   16aec:	46010e13          	add	t3,sp,1120
	stack[j] = entry;
   16af0:	20d12027          	fsw	fa3,512(sp)
   16af4:	20013703          	ld	a4,512(sp)
   16af8:	000e0813          	mv	a6,t3
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16afc:	000e8e13          	mv	t3,t4
	stack[j] = entry;
   16b00:	00e83023          	sd	a4,0(a6)
   16b04:	fd1ff06f          	j	16ad4 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1464>
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   16b08:	0a813703          	ld	a4,168(sp)
   16b0c:	216b0d53          	fmv.s	fs10,fs6
   16b10:	07812c07          	flw	fs8,120(sp)
   16b14:	215a8b53          	fmv.s	fs6,fs5
   16b18:	0b013903          	ld	s2,176(sp)
   16b1c:	07c12a87          	flw	fs5,124(sp)
   16b20:	0b813783          	ld	a5,184(sp)
   16b24:	00100893          	li	a7,1
	while(node_stack_size);
   16b28:	00070463          	beqz	a4,16b30 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x14c0>
   16b2c:	cf5fe06f          	j	15820 <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1b0>
   16b30:	dbdff06f          	j	168ec <_Z9intersectI24TesselationTree1PointersEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x127c>

0000000000016b34 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit>:
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   16b34:	bf010113          	add	sp,sp,-1040
   16b38:	3d713423          	sd	s7,968(sp)
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   16b3c:	00019bb7          	lui	s7,0x19
   16b40:	38912c27          	fsw	fs1,920(sp)
   16b44:	39212a27          	fsw	fs2,916(sp)
   16b48:	01862487          	flw	fs1,24(a2)
   16b4c:	01462907          	flw	fs2,20(a2)
   16b50:	39312827          	fsw	fs3,912(sp)
   16b54:	39412627          	fsw	fs4,908(sp)
   16b58:	01062987          	flw	fs3,16(a2)
   16b5c:	908baa07          	flw	fs4,-1784(s7) # 18908 <__DATA_BEGIN__>
	node_stack[0].t = ray.t_min;
   16b60:	00c62787          	flw	fa5,12(a2)
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   16b64:	3d613823          	sd	s6,976(sp)
   16b68:	193a79d3          	fdiv.s	fs3,fs4,fs3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16b6c:	00019b37          	lui	s6,0x19
   16b70:	000197b7          	lui	a5,0x19
   16b74:	38812e27          	fsw	fs0,924(sp)
   16b78:	910b2407          	flw	fs0,-1776(s6) # 18910 <__DATA_BEGIN__+0x8>
   16b7c:	3f313423          	sd	s3,1000(sp)
   16b80:	39512427          	fsw	fs5,904(sp)
   16b84:	34f10993          	add	s3,sp,847
   16b88:	91c7aa87          	flw	fs5,-1764(a5) # 1891c <__DATA_BEGIN__+0x14>
	node_stack[0].data.is_leaf = false;
   16b8c:	00600793          	li	a5,6
inline bool intersect(const BVH::CompressedNode4* blas, const T& mesh, const Ray& ray, Hit& hit)
   16b90:	40813023          	sd	s0,1024(sp)
   16b94:	3f213823          	sd	s2,1008(sp)
   16b98:	3f413023          	sd	s4,992(sp)
   16b9c:	3d513c23          	sd	s5,984(sp)
   16ba0:	3d813023          	sd	s8,960(sp)
   16ba4:	3bb13423          	sd	s11,936(sp)
   16ba8:	40113423          	sd	ra,1032(sp)
   16bac:	3e913c23          	sd	s1,1016(sp)
   16bb0:	3b913c23          	sd	s9,952(sp)
   16bb4:	3ba13823          	sd	s10,944(sp)
   16bb8:	192a7953          	fdiv.s	fs2,fs4,fs2
   16bbc:	00060c13          	mv	s8,a2
   16bc0:	00050a93          	mv	s5,a0
   16bc4:	00058a13          	mv	s4,a1
   16bc8:	00068913          	mv	s2,a3
   16bcc:	fc09f993          	and	s3,s3,-64
	node_stack[0].t = ray.t_min;
   16bd0:	00f12827          	fsw	fa5,16(sp)
	node_stack[0].data.is_leaf = false;
   16bd4:	00f12a23          	sw	a5,20(sp)
	bool found_hit = false;
   16bd8:	00000d93          	li	s11,0
	uint32_t node_stack_size = 1u;
   16bdc:	00100413          	li	s0,1
   16be0:	189a74d3          	fdiv.s	fs1,fs4,fs1
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   16be4:	fff4041b          	addw	s0,s0,-1
   16be8:	02041713          	sll	a4,s0,0x20
   16bec:	01d75793          	srl	a5,a4,0x1d
   16bf0:	38078793          	add	a5,a5,896
   16bf4:	002787b3          	add	a5,a5,sp
   16bf8:	c907b483          	ld	s1,-880(a5)
		if(current_entry.t >= hit.t) return found_hit;
   16bfc:	00092187          	flw	ft3,0(s2)
   16c00:	f00487d3          	fmv.w.x	fa5,s1
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   16c04:	00913023          	sd	s1,0(sp)
		if(current_entry.t >= hit.t) return found_hit;
   16c08:	a0f187d3          	fle.s	a5,ft3,fa5
   16c0c:	04079a63          	bnez	a5,16c60 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12c>
		if(!current_entry.data.is_leaf)
   16c10:	00412783          	lw	a5,4(sp)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16c14:	0214dc93          	srl	s9,s1,0x21
   16c18:	007cfc93          	and	s9,s9,7
		if(!current_entry.data.is_leaf)
   16c1c:	0017f793          	and	a5,a5,1
			move_to_stack(node4, blas[current_entry.data.fst_chld_ind]);
   16c20:	0244d493          	srl	s1,s1,0x24
		if(!current_entry.data.is_leaf)
   16c24:	08078a63          	beqz	a5,16cb8 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x184>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16c28:	000c8c9b          	sext.w	s9,s9
   16c2c:	00000d13          	li	s10,0
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   16c30:	00048513          	mv	a0,s1
   16c34:	00090693          	mv	a3,s2
   16c38:	000c0613          	mv	a2,s8
   16c3c:	000a0593          	mv	a1,s4
   16c40:	ffffb097          	auipc	ra,0xffffb
   16c44:	cac080e7          	jalr	-852(ra) # 118ec <_Z9intersectjRK32TesselationTree4SecondaryRayDataRK3RayR3Hit>
   16c48:	01b56533          	or	a0,a0,s11
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16c4c:	001d0d1b          	addw	s10,s10,1
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   16c50:	0ff57d93          	zext.b	s11,a0
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16c54:	0014849b          	addw	s1,s1,1
   16c58:	fdacfce3          	bgeu	s9,s10,16c30 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xfc>
	while(node_stack_size);
   16c5c:	f80414e3          	bnez	s0,16be4 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xb0>
   16c60:	40813083          	ld	ra,1032(sp)
   16c64:	40013403          	ld	s0,1024(sp)
   16c68:	3f813483          	ld	s1,1016(sp)
   16c6c:	3f013903          	ld	s2,1008(sp)
   16c70:	3e813983          	ld	s3,1000(sp)
   16c74:	3e013a03          	ld	s4,992(sp)
   16c78:	3d813a83          	ld	s5,984(sp)
   16c7c:	3d013b03          	ld	s6,976(sp)
   16c80:	3c813b83          	ld	s7,968(sp)
   16c84:	3c013c03          	ld	s8,960(sp)
   16c88:	3b813c83          	ld	s9,952(sp)
   16c8c:	3b013d03          	ld	s10,944(sp)
   16c90:	39c12407          	flw	fs0,924(sp)
   16c94:	39812487          	flw	fs1,920(sp)
   16c98:	39412907          	flw	fs2,916(sp)
   16c9c:	39012987          	flw	fs3,912(sp)
   16ca0:	38c12a07          	flw	fs4,908(sp)
   16ca4:	38812a87          	flw	fs5,904(sp)
   16ca8:	000d8513          	mv	a0,s11
   16cac:	3a813d83          	ld	s11,936(sp)
   16cb0:	41010113          	add	sp,sp,1040
   16cb4:	00008067          	ret
	for(uint i = 0; i < sizeof(T) / sizeof(uint64_t); ++i)
   16cb8:	000c2087          	flw	ft1,0(s8) # 3c000000 <__global_pointer$+0x3bfe6ef8>
   16cbc:	004c2007          	flw	ft0,4(s8)
   16cc0:	008c2507          	flw	fa0,8(s8)
			move_to_stack(node4, blas[current_entry.data.fst_chld_ind]);
   16cc4:	00649493          	sll	s1,s1,0x6
		uint64_t r = ((uint64_t*)&src)[i];
   16cc8:	009a87b3          	add	a5,s5,s1
   16ccc:	081af0d3          	fsub.s	ft1,fs5,ft1
   16cd0:	080af053          	fsub.s	ft0,fs5,ft0
   16cd4:	08aaf553          	fsub.s	fa0,fs5,fa0
   16cd8:	0287b603          	ld	a2,40(a5)
   16cdc:	0307b683          	ld	a3,48(a5)
   16ce0:	0387b703          	ld	a4,56(a5)
   16ce4:	0087b303          	ld	t1,8(a5)
   16ce8:	0107b883          	ld	a7,16(a5)
   16cec:	0187b803          	ld	a6,24(a5)
   16cf0:	0207b503          	ld	a0,32(a5)
		((uint64_t*)&dst)[i] = r;
   16cf4:	0007b783          	ld	a5,0(a5)
      if (__a < __b)
   16cf8:	00cc2287          	flw	ft5,12(s8)
      if (__b < __a)
   16cfc:	01cc2207          	flw	ft4,28(s8)
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16d00:	910b2587          	flw	fa1,-1776(s6)
   16d04:	908ba107          	flw	ft2,-1784(s7)
   16d08:	01098593          	add	a1,s3,16
   16d0c:	004c9c93          	sll	s9,s9,0x4
		((uint64_t*)&dst)[i] = r;
   16d10:	02c9b423          	sd	a2,40(s3)
   16d14:	02d9b823          	sd	a3,48(s3)
   16d18:	02e9bc23          	sd	a4,56(s3)
   16d1c:	00f9b023          	sd	a5,0(s3)
   16d20:	0069b423          	sd	t1,8(s3)
   16d24:	0119b823          	sd	a7,16(s3)
   16d28:	0109bc23          	sd	a6,24(s3)
   16d2c:	02a9b023          	sd	a0,32(s3)
   16d30:	00098713          	mv	a4,s3
   16d34:	019585b3          	add	a1,a1,s9
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16d38:	3f8006b7          	lui	a3,0x3f800
   16d3c:	01010613          	add	a2,sp,16
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   16d40:	00075783          	lhu	a5,0(a4)
   16d44:	208407d3          	fmv.s	fa5,fs0
   16d48:	00f7d513          	srl	a0,a5,0xf
   16d4c:	00051c63          	bnez	a0,16d64 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x230>
   16d50:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16d54:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16d58:	f00787d3          	fmv.w.x	fa5,a5
   16d5c:	0947f7d3          	fsub.s	fa5,fa5,fs4
   16d60:	00f7f7d3          	fadd.s	fa5,fa5,fa5
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   16d64:	00675783          	lhu	a5,6(a4)
   16d68:	20b58853          	fmv.s	fa6,fa1
   16d6c:	00f7d513          	srl	a0,a5,0xf
   16d70:	00051c63          	bnez	a0,16d88 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x254>
   16d74:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16d78:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16d7c:	f0078753          	fmv.w.x	fa4,a5
   16d80:	08277853          	fsub.s	fa6,fa4,ft2
   16d84:	01087853          	fadd.s	fa6,fa6,fa6
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   16d88:	00275783          	lhu	a5,2(a4)
   16d8c:	20b58653          	fmv.s	fa2,fa1
   16d90:	00f7d513          	srl	a0,a5,0xf
   16d94:	00051c63          	bnez	a0,16dac <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x278>
   16d98:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16d9c:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16da0:	f0078753          	fmv.w.x	fa4,a5
   16da4:	08277653          	fsub.s	fa2,fa4,ft2
   16da8:	00c67653          	fadd.s	fa2,fa2,fa2
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   16dac:	00875783          	lhu	a5,8(a4)
   16db0:	20b583d3          	fmv.s	ft7,fa1
   16db4:	00f7d513          	srl	a0,a5,0xf
   16db8:	00051c63          	bnez	a0,16dd0 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x29c>
   16dbc:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16dc0:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16dc4:	f0078753          	fmv.w.x	fa4,a5
   16dc8:	082773d3          	fsub.s	ft7,fa4,ft2
   16dcc:	0073f3d3          	fadd.s	ft7,ft7,ft7
		aabb.min[i] = u16_to_f32(aabb16.min[i]) * 2.0f - 1.0f;
   16dd0:	00475783          	lhu	a5,4(a4)
   16dd4:	208406d3          	fmv.s	fa3,fs0
   16dd8:	00f7d513          	srl	a0,a5,0xf
   16ddc:	00051c63          	bnez	a0,16df4 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2c0>
   16de0:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16de4:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16de8:	f0078753          	fmv.w.x	fa4,a5
   16dec:	082776d3          	fsub.s	fa3,fa4,ft2
   16df0:	00d6f6d3          	fadd.s	fa3,fa3,fa3
		aabb.max[i] = u16_to_f32(aabb16.max[i]) * 2.0f - 1.0f;
   16df4:	00a75783          	lhu	a5,10(a4)
   16df8:	20840353          	fmv.s	ft6,fs0
   16dfc:	00f7d513          	srl	a0,a5,0xf
   16e00:	00051c63          	bnez	a0,16e18 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x2e4>
   16e04:	0087979b          	sllw	a5,a5,0x8
	return *((float*)&u);
   16e08:	00d7e7b3          	or	a5,a5,a3
	return u16 & 0x8000u ? 1.0f : as_f32(((uint32_t)u16 << 8) | 0x3f800000u) - 1.0f;
   16e0c:	f0078753          	fmv.w.x	fa4,a5
   16e10:	09477353          	fsub.s	ft6,fa4,fs4
   16e14:	00637353          	fadd.s	ft6,ft6,ft6
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16e18:	0017f7d3          	fadd.s	fa5,fa5,ft1
   16e1c:	0100f853          	fadd.s	fa6,ft1,fa6
   16e20:	00067653          	fadd.s	fa2,fa2,ft0
   16e24:	0003f3d3          	fadd.s	ft7,ft7,ft0
   16e28:	00a6f6d3          	fadd.s	fa3,fa3,fa0
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16e2c:	1137f7d3          	fmul.s	fa5,fa5,fs3
   16e30:	11387853          	fmul.s	fa6,fa6,fs3
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16e34:	00a37353          	fadd.s	ft6,ft6,fa0
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16e38:	1123f3d3          	fmul.s	ft7,ft7,fs2
   16e3c:	11267653          	fmul.s	fa2,fa2,fs2
   16e40:	1096f6d3          	fmul.s	fa3,fa3,fs1
   16e44:	29078753          	fmin.s	fa4,fa5,fa6
	if (tmin > tmax) return ray.t_max;//no hit || behind
   16e48:	290797d3          	fmax.s	fa5,fa5,fa6
   16e4c:	10937353          	fmul.s	ft6,ft6,fs1
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   16e50:	28760853          	fmin.s	fa6,fa2,ft7
   16e54:	28571753          	fmax.s	fa4,fa4,ft5
	if (tmin > tmax) return ray.t_max;//no hit || behind
   16e58:	28761653          	fmax.s	fa2,fa2,ft7
   16e5c:	284787d3          	fmin.s	fa5,fa5,ft4
   16e60:	286683d3          	fmin.s	ft7,fa3,ft6
   16e64:	29071753          	fmax.s	fa4,fa4,fa6
   16e68:	28c787d3          	fmin.s	fa5,fa5,fa2
   16e6c:	286696d3          	fmax.s	fa3,fa3,ft6
   16e70:	28771753          	fmax.s	fa4,fa4,ft7
   16e74:	28d787d3          	fmin.s	fa5,fa5,fa3
   16e78:	a0e797d3          	flt.s	a5,fa5,fa4
   16e7c:	00078463          	beqz	a5,16e84 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x350>
   16e80:	20420753          	fmv.s	fa4,ft4
				new_entry.data = node4.nodes[i].data;
   16e84:	00c72503          	lw	a0,12(a4)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16e88:	a03717d3          	flt.s	a5,fa4,ft3
				new_entry.data = node4.nodes[i].data;
   16e8c:	00a12623          	sw	a0,12(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16e90:	00079a63          	bnez	a5,16ea4 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x370>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   16e94:	01070713          	add	a4,a4,16
   16e98:	eae594e3          	bne	a1,a4,16d40 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x20c>
	while(node_stack_size);
   16e9c:	d40414e3          	bnez	s0,16be4 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0xb0>
   16ea0:	dc1ff06f          	j	16c60 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x12c>
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16ea4:	0014031b          	addw	t1,s0,1
	for(; j != min; --j)
   16ea8:	06040263          	beqz	s0,16f0c <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3d8>
   16eac:	fff4079b          	addw	a5,s0,-1
   16eb0:	02041513          	sll	a0,s0,0x20
   16eb4:	01d55413          	srl	s0,a0,0x1d
   16eb8:	02079513          	sll	a0,a5,0x20
   16ebc:	01d55793          	srl	a5,a0,0x1d
   16ec0:	00060e13          	mv	t3,a2
   16ec4:	00860433          	add	s0,a2,s0
   16ec8:	00f607b3          	add	a5,a2,a5
   16ecc:	0180006f          	j	16ee4 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3b0>
		stack[j] = stack[j - 1];
   16ed0:	0007b503          	ld	a0,0(a5)
	for(; j != min; --j)
   16ed4:	ff840413          	add	s0,s0,-8
		stack[j] = stack[j - 1];
   16ed8:	00a43423          	sd	a0,8(s0)
	for(; j != min; --j)
   16edc:	02f60a63          	beq	a2,a5,16f10 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x3dc>
   16ee0:	00080793          	mv	a5,a6
		if(stack[j - 1].t >= entry.t) break;
   16ee4:	0007a787          	flw	fa5,0(a5)
		stack[j] = stack[j - 1];
   16ee8:	00040893          	mv	a7,s0
	for(; j != min; --j)
   16eec:	ff878813          	add	a6,a5,-8
		if(stack[j - 1].t >= entry.t) break;
   16ef0:	a0f70553          	fle.s	a0,fa4,fa5
   16ef4:	fc050ee3          	beqz	a0,16ed0 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x39c>
	stack[j] = entry;
   16ef8:	00e12427          	fsw	fa4,8(sp)
   16efc:	00813783          	ld	a5,8(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16f00:	00030413          	mv	s0,t1
	stack[j] = entry;
   16f04:	00f8b023          	sd	a5,0(a7)
}
   16f08:	f8dff06f          	j	16e94 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x360>
   16f0c:	01010e13          	add	t3,sp,16
	stack[j] = entry;
   16f10:	00e12427          	fsw	fa4,8(sp)
   16f14:	00813783          	ld	a5,8(sp)
   16f18:	000e0893          	mv	a7,t3
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   16f1c:	00030413          	mv	s0,t1
	stack[j] = entry;
   16f20:	00f8b023          	sd	a5,0(a7)
   16f24:	f71ff06f          	j	16e94 <_Z9intersectI32TesselationTree4SecondaryRayDataEbPKN3BVH15CompressedNode4ERKT_RK3RayR3Hit+0x360>

0000000000016f28 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit>:
inline bool intersect(const BVH::Node* blas, const T& mesh, const Ray& ray, Hit& hit)
   16f28:	c2010113          	add	sp,sp,-992
	return vec3(a[0] / b[0], a[1] / b[1], a[2] / b[2]);
   16f2c:	000197b7          	lui	a5,0x19
   16f30:	36812e27          	fsw	fs0,892(sp)
   16f34:	36912c27          	fsw	fs1,888(sp)
   16f38:	9087a407          	flw	fs0,-1784(a5) # 18908 <__DATA_BEGIN__>
   16f3c:	01062487          	flw	fs1,16(a2)
   16f40:	37212a27          	fsw	fs2,884(sp)
   16f44:	01462907          	flw	fs2,20(a2)
   16f48:	189474d3          	fdiv.s	fs1,fs0,fs1
   16f4c:	01862787          	flw	fa5,24(a2)
   16f50:	3b613023          	sd	s6,928(sp)
   16f54:	32f10b13          	add	s6,sp,815
   16f58:	fe0b7b13          	and	s6,s6,-32
   16f5c:	3c813823          	sd	s0,976(sp)
   16f60:	3d213023          	sd	s2,960(sp)
   16f64:	00060413          	mv	s0,a2
   16f68:	3b313c23          	sd	s3,952(sp)
   16f6c:	00058913          	mv	s2,a1
   16f70:	00050993          	mv	s3,a0
		((uint64_t*)&dst)[i] = r;
   16f74:	00050593          	mv	a1,a0
   16f78:	02000613          	li	a2,32
   16f7c:	020b0513          	add	a0,s6,32
   16f80:	3c913423          	sd	s1,968(sp)
   16f84:	37312827          	fsw	fs3,880(sp)
   16f88:	37412627          	fsw	fs4,876(sp)
   16f8c:	37512427          	fsw	fs5,872(sp)
   16f90:	3c113c23          	sd	ra,984(sp)
   16f94:	3b413823          	sd	s4,944(sp)
   16f98:	19247953          	fdiv.s	fs2,fs0,fs2
   16f9c:	3b513423          	sd	s5,936(sp)
   16fa0:	39713c23          	sd	s7,920(sp)
   16fa4:	39813823          	sd	s8,912(sp)
   16fa8:	39913423          	sd	s9,904(sp)
   16fac:	39a13023          	sd	s10,896(sp)
   16fb0:	00068493          	mv	s1,a3
   16fb4:	18f47453          	fdiv.s	fs0,fs0,fa5
   16fb8:	00000097          	auipc	ra,0x0
   16fbc:	2f4080e7          	jalr	756(ra) # 172ac <memcpy>
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16fc0:	000197b7          	lui	a5,0x19
   16fc4:	9207a707          	flw	fa4,-1760(a5) # 18920 <__DATA_BEGIN__+0x18>
   16fc8:	000197b7          	lui	a5,0x19
   16fcc:	9247a687          	flw	fa3,-1756(a5) # 18924 <__DATA_BEGIN__+0x1c>
	inline float operator[](int i) const { return e[i]; }
   16fd0:	00042987          	flw	fs3,0(s0)
   16fd4:	00442a07          	flw	fs4,4(s0)
   16fd8:	00842a87          	flw	fs5,8(s0)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   16fdc:	093777d3          	fsub.s	fa5,fa4,fs3
   16fe0:	094775d3          	fsub.s	fa1,fa4,fs4
   16fe4:	0936f053          	fsub.s	ft0,fa3,fs3
   16fe8:	0946f553          	fsub.s	fa0,fa3,fs4
   16fec:	09577753          	fsub.s	fa4,fa4,fs5
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   16ff0:	1097f7d3          	fmul.s	fa5,fa5,fs1
   16ff4:	1125f5d3          	fmul.s	fa1,fa1,fs2
   16ff8:	10907053          	fmul.s	ft0,ft0,fs1
   16ffc:	11257553          	fmul.s	fa0,fa0,fs2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   17000:	0956f6d3          	fsub.s	fa3,fa3,fs5
   17004:	00c42087          	flw	ft1,12(s0)
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   17008:	10877753          	fmul.s	fa4,fa4,fs0
   1700c:	28078653          	fmin.s	fa2,fa5,ft0
   17010:	28a58153          	fmin.s	ft2,fa1,fa0
	if (tmin > tmax) return ray.t_max;//no hit || behind
   17014:	280797d3          	fmax.s	fa5,fa5,ft0
   17018:	28a595d3          	fmax.s	fa1,fa1,fa0
   1701c:	1086f6d3          	fmul.s	fa3,fa3,fs0
	float tmin = std::max(std::max(tminv.x, tminv.y), std::max(tminv.z, ray.t_min));
   17020:	28261653          	fmax.s	fa2,fa2,ft2
	if (tmin > tmax) return ray.t_max;//no hit || behind
   17024:	28b787d3          	fmin.s	fa5,fa5,fa1
   17028:	01c42507          	flw	fa0,28(s0)
   1702c:	28161653          	fmax.s	fa2,fa2,ft1
   17030:	28d705d3          	fmin.s	fa1,fa4,fa3
   17034:	28a787d3          	fmin.s	fa5,fa5,fa0
   17038:	28d71753          	fmax.s	fa4,fa4,fa3
   1703c:	28b616d3          	fmax.s	fa3,fa2,fa1
   17040:	28e787d3          	fmin.s	fa5,fa5,fa4
   17044:	a0d797d3          	flt.s	a5,fa5,fa3
   17048:	00079463          	bnez	a5,17050 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x128>
	return tmin;
   1704c:	20d68553          	fmv.s	fa0,fa3
	node_stack[0].data = root_node.data;
   17050:	038b2783          	lw	a5,56(s6)
	node_stack[0].t = intersect(root_node.aabb, ray, inv_d);
   17054:	00a12827          	fsw	fa0,16(sp)
	bool found_hit = false;
   17058:	00000b93          	li	s7,0
	node_stack[0].data = root_node.data;
   1705c:	00f12a23          	sw	a5,20(sp)
	uint32_t node_stack_size = 1u;
   17060:	00100a13          	li	s4,1
   17064:	01010a93          	add	s5,sp,16
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   17068:	fffa0a1b          	addw	s4,s4,-1
   1706c:	020a1713          	sll	a4,s4,0x20
   17070:	01d75793          	srl	a5,a4,0x1d
   17074:	36078793          	add	a5,a5,864
   17078:	002787b3          	add	a5,a5,sp
   1707c:	cb07bc03          	ld	s8,-848(a5)
		if(current_entry.t >= hit.t) return found_hit;
   17080:	0004a087          	flw	ft1,0(s1)
   17084:	f00c07d3          	fmv.w.x	fa5,s8
		const NodeStackEntry current_entry = node_stack[--node_stack_size];
   17088:	01813023          	sd	s8,0(sp)
		if(current_entry.t >= hit.t) return found_hit;
   1708c:	a0f087d3          	fle.s	a5,ft1,fa5
   17090:	16079863          	bnez	a5,17200 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x2d8>
		if(!current_entry.data.is_leaf)
   17094:	00412783          	lw	a5,4(sp)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   17098:	021c5c93          	srl	s9,s8,0x21
   1709c:	007cfc93          	and	s9,s9,7
		if(!current_entry.data.is_leaf)
   170a0:	0017f793          	and	a5,a5,1
				move_to_stack(node, blas[current_entry.data.fst_chld_ind + i]);
   170a4:	024c5c13          	srl	s8,s8,0x24
		if(!current_entry.data.is_leaf)
   170a8:	1c079463          	bnez	a5,17270 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x348>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   170ac:	018c8cb3          	add	s9,s9,s8
   170b0:	001c8513          	add	a0,s9,1 # 3f800001 <__global_pointer$+0x3f7e6ef9>
   170b4:	005c1c13          	sll	s8,s8,0x5
   170b8:	00551513          	sll	a0,a0,0x5
      if (__a < __b)
   170bc:	00c42187          	flw	ft3,12(s0)
      if (__b < __a)
   170c0:	01c42107          	flw	ft2,28(s0)
   170c4:	01898733          	add	a4,s3,s8
   170c8:	00a98533          	add	a0,s3,a0
   170cc:	00c0006f          	j	170d8 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1b0>
   170d0:	02070713          	add	a4,a4,32
   170d4:	12e50463          	beq	a0,a4,171fc <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x2d4>
		uint64_t r = ((uint64_t*)&src)[i];
   170d8:	00073883          	ld	a7,0(a4)
   170dc:	00873803          	ld	a6,8(a4)
   170e0:	01073683          	ld	a3,16(a4)
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   170e4:	00088793          	mv	a5,a7
   170e8:	0208d893          	srl	a7,a7,0x20
   170ec:	f0088753          	fmv.w.x	fa4,a7
   170f0:	02085593          	srl	a1,a6,0x20
   170f4:	f00787d3          	fmv.w.x	fa5,a5
   170f8:	094776d3          	fsub.s	fa3,fa4,fs4
   170fc:	f0058753          	fmv.w.x	fa4,a1
   17100:	0937f7d3          	fsub.s	fa5,fa5,fs3
		((uint64_t*)&dst)[i] = r;
   17104:	01873783          	ld	a5,24(a4)
   17108:	09377053          	fsub.s	ft0,fa4,fs3
   1710c:	f0068753          	fmv.w.x	fa4,a3
   17110:	0206d693          	srl	a3,a3,0x20
   17114:	f0068653          	fmv.w.x	fa2,a3
   17118:	09477553          	fsub.s	fa0,fa4,fs4
   1711c:	f0080753          	fmv.w.x	fa4,a6
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   17120:	1097f7d3          	fmul.s	fa5,fa5,fs1
   17124:	1126f6d3          	fmul.s	fa3,fa3,fs2
   17128:	10907053          	fmul.s	ft0,ft0,fs1
   1712c:	11257553          	fmul.s	fa0,fa0,fs2
	return vec3(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
   17130:	095675d3          	fsub.s	fa1,fa2,fs5
   17134:	09577753          	fsub.s	fa4,fa4,fs5
   17138:	00fb3c23          	sd	a5,24(s6)
   1713c:	28078653          	fmin.s	fa2,fa5,ft0
   17140:	28a68253          	fmin.s	ft4,fa3,fa0
	if (tmin > tmax) return ray.t_max;//no hit || behind
   17144:	280797d3          	fmax.s	fa5,fa5,ft0
   17148:	28a696d3          	fmax.s	fa3,fa3,fa0
	return vec3(a[0] * b[0], a[1] * b[1], a[2] * b[2]);
   1714c:	10877753          	fmul.s	fa4,fa4,fs0
   17150:	1085f5d3          	fmul.s	fa1,fa1,fs0
   17154:	28461653          	fmax.s	fa2,fa2,ft4
   17158:	28d787d3          	fmin.s	fa5,fa5,fa3
   1715c:	283616d3          	fmax.s	fa3,fa2,ft3
   17160:	282787d3          	fmin.s	fa5,fa5,ft2
   17164:	28b70653          	fmin.s	fa2,fa4,fa1
   17168:	28b71753          	fmax.s	fa4,fa4,fa1
   1716c:	28c696d3          	fmax.s	fa3,fa3,fa2
   17170:	28e787d3          	fmin.s	fa5,fa5,fa4
   17174:	a0d797d3          	flt.s	a5,fa5,fa3
   17178:	00078463          	beqz	a5,17180 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x258>
   1717c:	202106d3          	fmv.s	fa3,ft2
				new_entry.data = node.data;
   17180:	018b2683          	lw	a3,24(s6)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   17184:	a01697d3          	flt.s	a5,fa3,ft1
				new_entry.data = node.data;
   17188:	00d12623          	sw	a3,12(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   1718c:	f40782e3          	beqz	a5,170d0 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1a8>
   17190:	001a089b          	addw	a7,s4,1
	for(; j != min; --j)
   17194:	0c0a0063          	beqz	s4,17254 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x32c>
   17198:	fffa079b          	addw	a5,s4,-1
   1719c:	020a1613          	sll	a2,s4,0x20
   171a0:	01d65693          	srl	a3,a2,0x1d
   171a4:	02079613          	sll	a2,a5,0x20
   171a8:	01d65793          	srl	a5,a2,0x1d
   171ac:	000a8313          	mv	t1,s5
   171b0:	00da86b3          	add	a3,s5,a3
   171b4:	00fa87b3          	add	a5,s5,a5
   171b8:	0180006f          	j	171d0 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x2a8>
		stack[j] = stack[j - 1];
   171bc:	0007b603          	ld	a2,0(a5)
	for(; j != min; --j)
   171c0:	ff868693          	add	a3,a3,-8 # 3f7ffff8 <__global_pointer$+0x3f7e6ef0>
		stack[j] = stack[j - 1];
   171c4:	00c6b423          	sd	a2,8(a3)
	for(; j != min; --j)
   171c8:	08fa8863          	beq	s5,a5,17258 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x330>
   171cc:	00058793          	mv	a5,a1
		if(stack[j - 1].t >= entry.t) break;
   171d0:	0007a787          	flw	fa5,0(a5)
		stack[j] = stack[j - 1];
   171d4:	00068813          	mv	a6,a3
	for(; j != min; --j)
   171d8:	ff878593          	add	a1,a5,-8
		if(stack[j - 1].t >= entry.t) break;
   171dc:	a0f68653          	fle.s	a2,fa3,fa5
   171e0:	fc060ee3          	beqz	a2,171bc <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x294>
	stack[j] = entry;
   171e4:	00d12427          	fsw	fa3,8(sp)
   171e8:	00813783          	ld	a5,8(sp)
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   171ec:	00088a13          	mv	s4,a7
	stack[j] = entry;
   171f0:	00f83023          	sd	a5,0(a6)
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   171f4:	02070713          	add	a4,a4,32
   171f8:	eee510e3          	bne	a0,a4,170d8 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x1b0>
	while(node_stack_size);
   171fc:	e60a16e3          	bnez	s4,17068 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x140>
}
   17200:	3d813083          	ld	ra,984(sp)
   17204:	3d013403          	ld	s0,976(sp)
   17208:	3c813483          	ld	s1,968(sp)
   1720c:	3c013903          	ld	s2,960(sp)
   17210:	3b813983          	ld	s3,952(sp)
   17214:	3b013a03          	ld	s4,944(sp)
   17218:	3a813a83          	ld	s5,936(sp)
   1721c:	3a013b03          	ld	s6,928(sp)
   17220:	39013c03          	ld	s8,912(sp)
   17224:	38813c83          	ld	s9,904(sp)
   17228:	38013d03          	ld	s10,896(sp)
   1722c:	37c12407          	flw	fs0,892(sp)
   17230:	37812487          	flw	fs1,888(sp)
   17234:	37412907          	flw	fs2,884(sp)
   17238:	37012987          	flw	fs3,880(sp)
   1723c:	36c12a07          	flw	fs4,876(sp)
   17240:	36812a87          	flw	fs5,872(sp)
   17244:	000b8513          	mv	a0,s7
   17248:	39813b83          	ld	s7,920(sp)
   1724c:	3e010113          	add	sp,sp,992
   17250:	00008067          	ret
   17254:	01010313          	add	t1,sp,16
	stack[j] = entry;
   17258:	00d12427          	fsw	fa3,8(sp)
   1725c:	00813783          	ld	a5,8(sp)
   17260:	00030813          	mv	a6,t1
				if(new_entry.t < hit.t) insert(new_entry, node_stack, node_stack_size++);
   17264:	00088a13          	mv	s4,a7
	stack[j] = entry;
   17268:	00f83023          	sd	a5,0(a6)
   1726c:	f89ff06f          	j	171f4 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x2cc>
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   17270:	000c8c9b          	sext.w	s9,s9
   17274:	00000d13          	li	s10,0
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   17278:	000c0513          	mv	a0,s8
   1727c:	00048693          	mv	a3,s1
   17280:	00040613          	mv	a2,s0
   17284:	00090593          	mv	a1,s2
   17288:	ffff9097          	auipc	ra,0xffff9
   1728c:	198080e7          	jalr	408(ra) # 10420 <_Z9intersectjRK32TesselationTree1SecondaryRayDataRK3RayR3Hit>
   17290:	01756533          	or	a0,a0,s7
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   17294:	001d0d1b          	addw	s10,s10,1
				found_hit |= intersect(current_entry.data.fst_chld_ind + i, mesh, ray, hit);
   17298:	0ff57b93          	zext.b	s7,a0
			for(uint32_t i = 0; i <= current_entry.data.lst_chld_ofst; ++i)
   1729c:	001c0c1b          	addw	s8,s8,1
   172a0:	fdacfce3          	bgeu	s9,s10,17278 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x350>
	while(node_stack_size);
   172a4:	dc0a12e3          	bnez	s4,17068 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x140>
   172a8:	f59ff06f          	j	17200 <_Z9intersectI32TesselationTree1SecondaryRayDataEbPKN3BVH4NodeERKT_RK3RayR3Hit+0x2d8>

00000000000172ac <memcpy>:
   172ac:	00b547b3          	xor	a5,a0,a1
   172b0:	0077f793          	and	a5,a5,7
   172b4:	00c508b3          	add	a7,a0,a2
   172b8:	06079463          	bnez	a5,17320 <memcpy+0x74>
   172bc:	00700793          	li	a5,7
   172c0:	06c7f063          	bgeu	a5,a2,17320 <memcpy+0x74>
   172c4:	00757793          	and	a5,a0,7
   172c8:	00050713          	mv	a4,a0
   172cc:	06079a63          	bnez	a5,17340 <memcpy+0x94>
   172d0:	ff88f613          	and	a2,a7,-8
   172d4:	40e606b3          	sub	a3,a2,a4
   172d8:	04000793          	li	a5,64
   172dc:	08d7ce63          	blt	a5,a3,17378 <memcpy+0xcc>
   172e0:	00058693          	mv	a3,a1
   172e4:	00070793          	mv	a5,a4
   172e8:	02c77863          	bgeu	a4,a2,17318 <memcpy+0x6c>
   172ec:	0006b803          	ld	a6,0(a3)
   172f0:	00878793          	add	a5,a5,8
   172f4:	00868693          	add	a3,a3,8
   172f8:	ff07bc23          	sd	a6,-8(a5)
   172fc:	fec7e8e3          	bltu	a5,a2,172ec <memcpy+0x40>
   17300:	fff60793          	add	a5,a2,-1
   17304:	40e787b3          	sub	a5,a5,a4
   17308:	ff87f793          	and	a5,a5,-8
   1730c:	00878793          	add	a5,a5,8
   17310:	00f70733          	add	a4,a4,a5
   17314:	00f585b3          	add	a1,a1,a5
   17318:	01176863          	bltu	a4,a7,17328 <memcpy+0x7c>
   1731c:	00008067          	ret
   17320:	00050713          	mv	a4,a0
   17324:	05157863          	bgeu	a0,a7,17374 <memcpy+0xc8>
   17328:	0005c783          	lbu	a5,0(a1)
   1732c:	00170713          	add	a4,a4,1
   17330:	00158593          	add	a1,a1,1
   17334:	fef70fa3          	sb	a5,-1(a4)
   17338:	fee898e3          	bne	a7,a4,17328 <memcpy+0x7c>
   1733c:	00008067          	ret
   17340:	0005c683          	lbu	a3,0(a1)
   17344:	00170713          	add	a4,a4,1
   17348:	00777793          	and	a5,a4,7
   1734c:	fed70fa3          	sb	a3,-1(a4)
   17350:	00158593          	add	a1,a1,1
   17354:	f6078ee3          	beqz	a5,172d0 <memcpy+0x24>
   17358:	0005c683          	lbu	a3,0(a1)
   1735c:	00170713          	add	a4,a4,1
   17360:	00777793          	and	a5,a4,7
   17364:	fed70fa3          	sb	a3,-1(a4)
   17368:	00158593          	add	a1,a1,1
   1736c:	fc079ae3          	bnez	a5,17340 <memcpy+0x94>
   17370:	f61ff06f          	j	172d0 <memcpy+0x24>
   17374:	00008067          	ret
   17378:	ff010113          	add	sp,sp,-16
   1737c:	00813423          	sd	s0,8(sp)
   17380:	04000413          	li	s0,64
   17384:	0005b383          	ld	t2,0(a1)
   17388:	0085b283          	ld	t0,8(a1)
   1738c:	0105bf83          	ld	t6,16(a1)
   17390:	0185bf03          	ld	t5,24(a1)
   17394:	0205be83          	ld	t4,32(a1)
   17398:	0285be03          	ld	t3,40(a1)
   1739c:	0305b303          	ld	t1,48(a1)
   173a0:	0385b803          	ld	a6,56(a1)
   173a4:	0405b683          	ld	a3,64(a1)
   173a8:	04870713          	add	a4,a4,72
   173ac:	40e607b3          	sub	a5,a2,a4
   173b0:	fa773c23          	sd	t2,-72(a4)
   173b4:	fc573023          	sd	t0,-64(a4)
   173b8:	fdf73423          	sd	t6,-56(a4)
   173bc:	fde73823          	sd	t5,-48(a4)
   173c0:	fdd73c23          	sd	t4,-40(a4)
   173c4:	ffc73023          	sd	t3,-32(a4)
   173c8:	fe673423          	sd	t1,-24(a4)
   173cc:	ff073823          	sd	a6,-16(a4)
   173d0:	fed73c23          	sd	a3,-8(a4)
   173d4:	04858593          	add	a1,a1,72
   173d8:	faf446e3          	blt	s0,a5,17384 <memcpy+0xd8>
   173dc:	00058693          	mv	a3,a1
   173e0:	00070793          	mv	a5,a4
   173e4:	02c77863          	bgeu	a4,a2,17414 <memcpy+0x168>
   173e8:	0006b803          	ld	a6,0(a3)
   173ec:	00878793          	add	a5,a5,8
   173f0:	00868693          	add	a3,a3,8
   173f4:	ff07bc23          	sd	a6,-8(a5)
   173f8:	fec7e8e3          	bltu	a5,a2,173e8 <memcpy+0x13c>
   173fc:	fff60793          	add	a5,a2,-1
   17400:	40e787b3          	sub	a5,a5,a4
   17404:	ff87f793          	and	a5,a5,-8
   17408:	00878793          	add	a5,a5,8
   1740c:	00f70733          	add	a4,a4,a5
   17410:	00f585b3          	add	a1,a1,a5
   17414:	01176863          	bltu	a4,a7,17424 <memcpy+0x178>
   17418:	00813403          	ld	s0,8(sp)
   1741c:	01010113          	add	sp,sp,16
   17420:	00008067          	ret
   17424:	0005c783          	lbu	a5,0(a1)
   17428:	00170713          	add	a4,a4,1
   1742c:	00158593          	add	a1,a1,1
   17430:	fef70fa3          	sb	a5,-1(a4)
   17434:	fee882e3          	beq	a7,a4,17418 <memcpy+0x16c>
   17438:	0005c783          	lbu	a5,0(a1)
   1743c:	00170713          	add	a4,a4,1
   17440:	00158593          	add	a1,a1,1
   17444:	fef70fa3          	sb	a5,-1(a4)
   17448:	fce89ee3          	bne	a7,a4,17424 <memcpy+0x178>
   1744c:	fcdff06f          	j	17418 <memcpy+0x16c>
